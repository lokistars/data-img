{
	"ID": "20220915121359-md1t6a6",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220915121359-md1t6a6",
		"scroll": "{\u0026amp;quot;startId\u0026amp;quot;:\u0026amp;quot;20220915121843-8sjwfsy\u0026amp;quot;,\u0026amp;quot;endId\u0026amp;quot;:\u0026amp;quot;20220915193503-sbya7vy\u0026amp;quot;,\u0026amp;quot;scrollTop\u0026amp;quot;:200,\u0026amp;quot;focusId\u0026amp;quot;:\u0026amp;quot;20220915121843-lkmc643\u0026amp;quot;,\u0026amp;quot;focusStart\u0026amp;quot;:20,\u0026amp;quot;focusEnd\u0026amp;quot;:20}",
		"title": "Ribbon 初始化配置",
		"updated": "20230212152506"
	},
	"Children": [
		{
			"ID": "20220915121843-8sjwfsy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915121843-8sjwfsy",
				"updated": "20220915122719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、Ribbon 自动配置"
				}
			]
		},
		{
			"ID": "20230212151738-ibe0sli",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230212151738-ibe0sli",
				"updated": "20230212151748"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心类或接口："
				}
			]
		},
		{
			"ID": "20230212151749-1jp0ej2",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230212151749-1jp0ej2",
				"updated": "20230212152506"
			},
			"Children": [
				{
					"ID": "20230212151755-rffhrj9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230212151755-rffhrj9",
						"updated": "20230212151755"
					},
					"Children": [
						{
							"ID": "20230212151804-o0rkuwx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230212151804-o0rkuwx",
								"updated": "20230212151826"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IClentConfig   读取配置、默认值：DefaultClientCOnfigImpl"
								}
							]
						}
					]
				},
				{
					"ID": "20230212151827-mdzl0gj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230212151827-mdzl0gj"
					},
					"Children": [
						{
							"ID": "20230212151827-bcex6qq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230212151827-bcex6qq",
								"updated": "20230212152028"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IRule               负载均衡规则，选择实例  默认值：ZoneAvoidanceRule"
								}
							]
						}
					]
				},
				{
					"ID": "20230212152029-e7unmok",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230212152029-e7unmok"
					},
					"Children": [
						{
							"ID": "20230212152029-h8pppar",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230212152029-h8pppar",
								"updated": "20230212152103"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IPing               赛选掉ping不通的实例  默认值：DummyPing"
								}
							]
						}
					]
				},
				{
					"ID": "20230212152103-dynggj9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230212152103-dynggj9"
					},
					"Children": [
						{
							"ID": "20230212152103-4wbcltv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230212152103-4wbcltv",
								"updated": "20230212152219"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ServerList\u003cServer\u003e    交给Ribbon的实例列表    默认值：ConfigurationBasedServerList、NacosServerList"
								}
							]
						}
					]
				},
				{
					"ID": "20230212152223-kyb88r7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230212152223-kyb88r7"
					},
					"Children": [
						{
							"ID": "20230212152223-zwyf8c7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230212152223-zwyf8c7",
								"updated": "20230212152333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ServerListFilter\u003cServer\u003e 过滤掉不符合条件的实例  默认值：ZonePreferenceServerListFilter"
								}
							]
						}
					]
				},
				{
					"ID": "20230212152333-ezngrmw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230212152333-ezngrmw"
					},
					"Children": [
						{
							"ID": "20230212152333-rid94nx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230212152333-rid94nx",
								"updated": "20230212152419"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ILoadBalancer           Ribbon的入口   默认值：  ZoneAwareLoadBalancer"
								}
							]
						}
					]
				},
				{
					"ID": "20230212152420-wun52de",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230212152420-wun52de",
						"updated": "20230212152506"
					},
					"Children": [
						{
							"ID": "20230212152420-5yj3e4t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230212152420-5yj3e4t",
								"updated": "20230212152506"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ServerListUpdater     更新提交给Ribbon的List策略  默认值：PollingServerListUpdater"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915121843-1odw2x2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915121843-1odw2x2",
				"updated": "20220915122225"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Ribbon自动配置类：org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration"
				}
			]
		},
		{
			"ID": "20220915121843-lkmc643",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915121843-lkmc643",
				"updated": "20220915122419"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当SpringBoot程序启动,自动配置扫描会加载该类注册到Spring容器中"
				}
			]
		},
		{
			"ID": "20220915121843-fn72uje",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915121843-fn72uje",
				"updated": "20220915163044"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Configuration\n@Conditional({RibbonClassesConditions.class}) // 条件\n@RibbonClients\n// 在当前配置类初始化之后\n@AutoConfigureAfter(name = {\"org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration\"})\n// 在当前配置类初始化之前\n@AutoConfigureBefore({LoadBalancerAutoConfiguration.class, AsyncLoadBalancerAutoConfiguration.class})\n// 加载配置\n@EnableConfigurationProperties({RibbonEagerLoadProperties.class, ServerIntrospectorProperties.class})\n// 条件\n@ConditionalOnProperty(\n    value = {\"spring.cloud.loadbalancer.ribbon.enabled\"},havingValue = \"true\",matchIfMissing = true)\npublic class RibbonAutoConfiguration {\n    // RibbonClient客户端指定的配置，有多少个Ribbon客户端这里就会有多少个RibbonClientSpecification\n    @Autowired(required = false)\n    private List\u003cRibbonClientSpecification\u003e configurations = new ArrayList();\n    @Autowired\n    private RibbonEagerLoadProperties ribbonEagerLoadProperties;\n\n    public RibbonAutoConfiguration() {\n    }\n\n    @Bean\n    public HasFeatures ribbonFeature() {\n        return HasFeatures.namedFeature(\"Ribbon\", Ribbon.class);\n    }\n    // 创建RibbonClient的ApplicationContext上下文，并创建RibbonClient相关组件如IClient、ILoadbalancer等\n    // 为每个客户机名称创建一个Spring ApplicationContext\n    @Bean\n    @ConditionalOnMissingBean\n    public SpringClientFactory springClientFactory() {\n        SpringClientFactory factory = new SpringClientFactory();\n        factory.setConfigurations(this.configurations);\n        return factory;\n    }\n    //注册了LoadBalancerClient ，负载均衡客户端，很重要的一个类\n    @Bean\n    @ConditionalOnMissingBean({LoadBalancerClient.class})\n    public LoadBalancerClient loadBalancerClient() {\n        return new RibbonLoadBalancerClient(this.springClientFactory());\n    }\n    //创建LoadBalancedRetryPolicy的工厂，负载均衡重试功能\n    @Bean\n    // 重试条件，必须配置RetryTemplate\n    @ConditionalOnClass(name = {\"org.springframework.retry.support.RetryTemplate\"})\n    @ConditionalOnMissingBean\n    public LoadBalancedRetryFactory loadBalancedRetryPolicyFactory(final SpringClientFactory clientFactory) {\n        return new RibbonLoadBalancedRetryFactory(clientFactory);\n    }\n    //如果配置了eager-load饥饿加载，就注册RibbonApplicationContextInitializer 上下文初始化对象，\n    //然后在ApplicationReadyEvent事件之后会立马初始化上下文\n    @Bean\n    @ConditionalOnProperty({\"ribbon.eager-load.enabled\"})\n    public RibbonApplicationContextInitializer ribbonApplicationContextInitializer() {\n        return new RibbonApplicationContextInitializer(this.springClientFactory(), this.ribbonEagerLoadProperties.getClients());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915123208-yd0xnj0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915123208-yd0xnj0",
				"updated": "20220915123208"
			},
			"Children": [
				{
					"ID": "20220915162630-dt5jqxp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915162630-dt5jqxp"
					},
					"Children": [
						{
							"ID": "20220915162630-87oa0ao",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915162630-87oa0ao",
								"updated": "20220915163112"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SpringClientFactory：用来给Ribbon客户端创建上下文和配置，它为每个客户机名称创建一个Spring "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "ApplicationContext"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，并创建好RibbonClient客户端相关的bean和配置，如：ILoadBalancer，IClientConfig，RibbonLoadBalancerContext。注意：是会为每个客户端都会做一个套配置"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				},
				{
					"ID": "20220915123208-lfajv62",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915123208-lfajv62",
						"updated": "20220915123208"
					},
					"Children": [
						{
							"ID": "20220915123208-lpko54f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915123208-lpko54f",
								"updated": "20220915123348"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LoadBalancerClient ：负载均衡客户端，RibbonLoadBalancerClient是对LoadBalancerClient的实现，exec方法包含了负载均衡的功能，Ribbon做负载均衡时用的就是它"
								}
							]
						}
					]
				},
				{
					"ID": "20220915123359-qscqzaj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915123359-qscqzaj"
					},
					"Children": [
						{
							"ID": "20220915123359-dy6hajc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915123359-dy6hajc",
								"updated": "20220915123359"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RibbonEagerLoadProperties：用来加载“饥饿加载”配置"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "ribbon.eager-load.enabled"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，指定些哪些RibonClient需要迫切初始化"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915163144-r95m0jc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915163144-r95m0jc",
				"updated": "20220915163203"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、SpringClientFactory Ribbon上下文初始化"
				}
			]
		},
		{
			"ID": "20220915163204-8q3qid9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915163204-8q3qid9",
				"updated": "20220915163509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SpringClientFactory用来给Ribbon客户端创建上下文和配置，它为每个客户机名称创建一个Spring ApplicationContext，并创建好RibbonClient客户端相关的bean和配置"
				}
			]
		},
		{
			"ID": "20220915163145-aqhf0rs",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915163145-aqhf0rs",
				"updated": "20220915163145"
			},
			"Children": [
				{
					"ID": "20220915163500-0xx56c8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915163500-0xx56c8"
					},
					"Children": [
						{
							"ID": "20220915163500-7ytcb00",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915163500-7ytcb00",
								"updated": "20220915163505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "openFeign 在LoadBalancerFeignClient#execute 中通过getClientConfig(clientName) 初始化客户端的上下文信息。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915163527-crtwlq8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915163527-crtwlq8",
				"updated": "20220915165408"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class SpringClientFactory extends NamedContextFactory\u003cRibbonClientSpecification\u003e {\n    static final String NAMESPACE = \"ribbon\";\n\n    public SpringClientFactory() {\n        //ribbon的客户端配置RibbonClientConfiguration,Ribbon默认配置类的类型 (很重要) \n        //上下文通过当前配置类来初始化\n        super(RibbonClientConfiguration.class, \"ribbon\", \"ribbon.client.name\");\n    }\n    // Ribbon的客户端上下文对象中(AnnotationConfigApplicationContext)根据name和type获取一个Bean的实例\n    public \u003cC extends IClient\u003c?, ?\u003e\u003e C getClient(String name, Class\u003cC\u003e clientClass) {\n        return (IClient)this.getInstance(name, clientClass);\n    }\n    // 根据Ribbon客户端的服务名，获取客户端的ILoadBalancer对象\n    public ILoadBalancer getLoadBalancer(String name) {\n        return (ILoadBalancer)this.getInstance(name, ILoadBalancer.class);\n    }\n    // 根据Ribbon客户端的服务名，获取客户端的配置对象，默认实现是DefaultClientConfigImpl\n    public IClientConfig getClientConfig(String name) {\n        return (IClientConfig)this.getInstance(name, IClientConfig.class);\n    }\n    // 根据Ribbon客户端的服务名，获取RibbonLoadBalancerContext 负载均衡器的上下文对象\n    public RibbonLoadBalancerContext getLoadBalancerContext(String serviceId) {\n        return (RibbonLoadBalancerContext)this.getInstance(serviceId, RibbonLoadBalancerContext.class);\n    }\n    // 根据配置，创建一个实例，clazz是要创建的对象的字节码，config是对象需要的配置类\n    static \u003cC\u003e C instantiateWithConfig(Class\u003cC\u003e clazz, IClientConfig config) {\n        return instantiateWithConfig((AnnotationConfigApplicationContext)null, clazz, config);\n    }\n\n    static \u003cC\u003e C instantiateWithConfig(AnnotationConfigApplicationContext context, Class\u003cC\u003e clazz, IClientConfig config) {\n        C result = null;\n        try {\n            Constructor\u003cC\u003e constructor = clazz.getConstructor(IClientConfig.class);\n            result = constructor.newInstance(config);\n        } catch (Throwable var5) {\n        }\n\n        if (result == null) {\n            // 如果创建失败 则调用无参构造创建实例\n            result = BeanUtils.instantiateClass(clazz);\n\t    //初始化配置\n            if (result instanceof IClientConfigAware) {\n                ((IClientConfigAware)result).initWithNiwsConfig(config);\n            }\n\t    // 自动注入容器\n            if (context != null) {\n                context.getAutowireCapableBeanFactory().autowireBean(result);\n            }\n        }\n\n        return result;\n    }\n    // 根据Ribbon客户端名称和类型获取具体的实例对象,实际上就是通过AnnotationConfigApplicationContext.getBean()\n    public \u003cC\u003e C getInstance(String name, Class\u003cC\u003e type) {\n        C instance = super.getInstance(name, type);\n        if (instance != null) {\n            return instance;\n        } else {\n            IClientConfig config = (IClientConfig)this.getInstance(name, IClientConfig.class);\n            //得到获取上下文对象，然后创建实例\n\t    return instantiateWithConfig(this.getContext(name), type, config);\n        }\n    }\n    //获取Spring上下文对象\n    protected AnnotationConfigApplicationContext getContext(String name) {\n        return super.getContext(name);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915165304-2dueu74",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915165304-2dueu74",
				"updated": "20220915171931"
			},
			"Children": [
				{
					"ID": "20220915165538-m1ta64u",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915165538-m1ta64u",
						"updated": "20220915165543"
					},
					"Children": [
						{
							"ID": "20220915165538-rxq3mhi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915165538-rxq3mhi",
								"updated": "20220915165543"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这些方法都需要调用"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "getInstance"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "得到相关实例，而"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "getInstance"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "方法中向会去从super.getInstance(其实就是通过AnnotationConfigApplicationContext.getBean 上下文对象)获取Bean"
								}
							]
						}
					]
				},
				{
					"ID": "20220915165314-y5sgmiu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915165314-y5sgmiu",
						"updated": "20220915171931"
					},
					"Children": [
						{
							"ID": "20220915165314-4vuknlr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915165314-4vuknlr",
								"updated": "20220915171931"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果super.getInstance获取不到bean，就先调用getContext方法得到上下文对象，然后调用instantiateWithConfig方法根据IClientConfig配置使用反射创建一个实例："
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "instantiateWithConfig(getContext(name), type, config);"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915165306-pgsr3hd",
			"Type": "NodeHeading",
			"HeadingLevel": 6,
			"Properties": {
				"id": "20220915165306-pgsr3hd",
				"updated": "20220915172015"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、父类NamedContextFactory 的实现"
				}
			]
		},
		{
			"ID": "20220915172027-tfbt0yk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915172027-tfbt0yk",
				"updated": "20220915172719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现了ApplicationContextAware 接口， 可以拿到Spring的上下文信息，实现了DisposableBean接口，上下文销毁时可以清理集合中数据"
				}
			]
		},
		{
			"ID": "20220915165306-mnyga14",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915165306-mnyga14",
				"updated": "20220915180252"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public abstract class NamedContextFactory\u003cC extends Specification\u003e implements DisposableBean, ApplicationContextAware {\n    private final String propertySourceName;  // 默认ribbon\n    private final String propertyName;        // 默认ribbon.client.name\n    // 保存上下文对象集合\n    private Map\u003cString, AnnotationConfigApplicationContext\u003e contexts = new ConcurrentHashMap();\n    // 保存配置类的集合\n    private Map\u003cString, C\u003e configurations = new ConcurrentHashMap();\n    // Spring 上下文对象\n    private ApplicationContext parent;\n    // 配置类对象, RibbonClientConfiguration.class\n    private Class\u003c?\u003e defaultConfigType;\n\n    public NamedContextFactory(Class\u003c?\u003e defaultConfigType, String propertySourceName, String propertyName) {\n        this.defaultConfigType = defaultConfigType;\n        this.propertySourceName = propertySourceName;\n        this.propertyName = propertyName;\n    }\n    // ApplicationContextAware  接口实现 获取上下文对象\n    public void setApplicationContext(ApplicationContext parent) throws BeansException {\n        this.parent = parent;\n    }\n    //添加配置到configurations集合中 在SpringClientFactory实例化时就可以设置\n    public void setConfigurations(List\u003cC\u003e configurations) {\n        Iterator var2 = configurations.iterator();\n\n        while(var2.hasNext()) {\n            C client = (Specification)var2.next();\n            this.configurations.put(client.getName(), client);\n        }\n\n    }\n    //获取上下文名字集合\n    public Set\u003cString\u003e getContextNames() {\n        return new HashSet(this.contexts.keySet());\n    }\n    //销毁，上下文对象关闭，清理上下文map\n    @Override\n    public void destroy() {\n        Collection\u003cAnnotationConfigApplicationContext\u003e values = this.contexts.values();\n        Iterator var2 = values.iterator();\n        while(var2.hasNext()) {\n            AnnotationConfigApplicationContext context = (AnnotationConfigApplicationContext)var2.next();\n            context.close();\n        }\n\n        this.contexts.clear();\n    }\n    // 根据Ribbon客户端名字获取上下文对象，通过这个上下文对象就能获取Ribbon客户端所需要的Bean\n    protected AnnotationConfigApplicationContext getContext(String name) {\n        if (!this.contexts.containsKey(name)) {\n            synchronized(this.contexts) {\n                if (!this.contexts.containsKey(name)) {\n                    this.contexts.put(name, this.createContext(name));\n                }\n            }\n        }\n        return (AnnotationConfigApplicationContext)this.contexts.get(name);\n    }\n    //根据Ribbon客户端名字创建上下文对象，并添加到集合中\n\n    protected AnnotationConfigApplicationContext createContext(String name) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        //注册指定的的RibbonClient的配置类，比如通过@RibbonClient注解指定的配置类\n\tif (this.configurations.containsKey(name)) {\n\t\tfor (Class\u003c?\u003e configuration : this.configurations.get(name).getConfiguration()) {\n                context.register(new Class[]{configuration});\n            }\n        }\n\t// 遍历配置类集合 注册默认的default 配置类到上下文中，即所有RibbonClient的默认配置\n        for (Map.Entry\u003cString, C\u003e entry : this.configurations.entrySet()) {\n\t    if (entry.getKey().startsWith(\"default.\")) {\n\t\tfor (Class\u003c?\u003e configuration : entry.getValue().getConfiguration()) {\n\t\t   context.register(configuration);\n\t\t}\n            }\n        }\n\t//注册了默认的配置类，defaultConfigType就是RibbonClientConfiguration\n\tcontext.register(PropertyPlaceholderAutoConfiguration.class,this.defaultConfigType);\n\tcontext.getEnvironment().getPropertySources().addFirst(new MapPropertySource(\n\t\t\tthis.propertySourceName,\n\t\t\tCollections.\u003cString, Object\u003esingletonMap(this.propertyName, name)));\n\tif (this.parent != null) {\n\t\tcontext.setParent(this.parent);\n\t\tcontext.setClassLoader(this.parent.getClassLoader());\n\t}\n\tcontext.setDisplayName(generateDisplayName(name));\n\tcontext.refresh(); //刷新容器\n\treturn context;\n    }\n\n    protected String generateDisplayName(String name) {\n        return this.getClass().getSimpleName() + \"-\" + name;\n    }\n    //从上下文对象中获取实例\n    public \u003cT\u003e T getInstance(String name, Class\u003cT\u003e type) {\n        AnnotationConfigApplicationContext context = this.getContext(name);\n        try {\n            return context.getBean(type);\n        } catch (NoSuchBeanDefinitionException var5) {\n            return null;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915165306-vm95kvx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915165306-vm95kvx",
				"updated": "20220915181809"
			},
			"Children": [
				{
					"ID": "20220915180325-l9uccwq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915180325-l9uccwq",
						"updated": "20220915180325"
					},
					"Children": [
						{
							"ID": "20220915180325-4oj5lxy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915180325-4oj5lxy",
								"updated": "20220915180328"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "createContext(String name) ：根据客户端名字创建上下文对象，方法中分别注册了RibbonClient客户端配置类，default开头的所有RibbonClient的默认配置，以及RibbonClientConfiguration全局默认配置，然后刷新容器，返回上下文对象"
								}
							]
						}
					]
				},
				{
					"ID": "20220915181808-uzs3ehd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915181808-uzs3ehd",
						"updated": "20220915181809"
					},
					"Children": [
						{
							"ID": "20220915181808-lzq1k51",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915181808-lzq1k51",
								"updated": "20220915181809"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "getInstance(String name, Class type) ：根据名字和类型返回实例，方法先根据名字得到上下文对象然后从上下文对象中获取Bean"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915181725-vgyjvk5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915181725-vgyjvk5",
				"updated": "20220915181830"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、Ribbon饥饿初始化"
				}
			]
		},
		{
			"ID": "20220915180342-4qv7rie",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915180342-4qv7rie",
				"updated": "20220915181902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NamedContextFactory.createContext上下文在什么时候调用？"
				}
			]
		},
		{
			"ID": "20220915181903-taf7h80",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915181903-taf7h80",
				"updated": "20220915182102"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\tSpringClientFactory#getClientConfig(clientName) 如果拿不到会通过createContext方法创建"
				}
			]
		},
		{
			"ID": "20220915182111-95xcj0c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915182111-95xcj0c",
				"updated": "20220915182154"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\tRibbonApplicationContextInitializer#initialize 方法中会去调用createContext创建上下文，如果配置了"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "ribbon.eager-load.enabled=true"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，在系统启动时就会初始化"
				}
			]
		},
		{
			"ID": "20220915165307-8ltplbc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915165307-8ltplbc",
				"updated": "20220915182503"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class RibbonApplicationContextInitializer\n\t\timplements ApplicationListener\u003cApplicationReadyEvent\u003e {\n        //创建Ribbon客户端上下文的工厂类\n\tprivate final SpringClientFactory springClientFactory;\n\n\t// ribbon的客户端名字结合\n\tprivate final List\u003cString\u003e clientNames;\n    \n\tpublic RibbonApplicationContextInitializer(SpringClientFactory springClientFactory,\n\t\t\tList\u003cString\u003e clientNames) {\n\t\tthis.springClientFactory = springClientFactory;\n\t\tthis.clientNames = clientNames;\n\t}\n\t//初始化，为每个客户端初始化，springClientFactory.getContext方法中会先调用createContext方法\n\tprotected void initialize() {\n\t   if (clientNames != null) {\n\t\tfor (String clientName : clientNames) {\n\t\t    this.springClientFactory.getContext(clientName);\n\t\t}\n\t    }\n\t}\n\n\t@Override\n\tpublic void onApplicationEvent(ApplicationReadyEvent event) {\n\t\tinitialize();\n\t}\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915165307-tdd8r88",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915165307-tdd8r88",
				"updated": "20220915182644"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "四、LoadBalancerAutoConfiguration负载均衡器配置"
				}
			]
		},
		{
			"ID": "20220915165307-v93zry8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915165307-v93zry8",
				"updated": "20220915182615"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\tLoadBalancerAutoConfiguration是针对于LoadBalancer负载均衡的配置类，它是在spring-cloud-commons-2.0.1.RELEASE.jar/META-INF/spring.factories 文件中被定义，SpringBoot启动自动配置时被加载"
				}
			]
		},
		{
			"ID": "20220915182631-hcvkf49",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915182631-hcvkf49",
				"updated": "20220915183229"
			},
			"Children": [
				{
					"ID": "20220915183231-51edhwi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915183231-51edhwi",
						"updated": "20220915183231"
					},
					"Children": [
						{
							"ID": "20220915183240-p40ln8g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915183240-p40ln8g",
								"updated": "20220915192549"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LoadBalancerInterceptor ：请求拦截器，当RestTmplate发请求时，会调用该拦截器，intercept方法执行，该方法会通过requestFactory.createRequest创建LoadBalancerRequest请求对象，调用ILoadBalancer.exec方法实现负载均衡请求"
								}
							]
						}
					]
				},
				{
					"ID": "20220915183253-wro4dfw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915183253-wro4dfw"
					},
					"Children": [
						{
							"ID": "20220915183254-l4zbhqf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915183254-l4zbhqf",
								"updated": "20220915183254"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RestTemplateCustomizer ：定制RestTmplate,设置拦截器LoadBalancerInterceptor"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915193043-gxtmnaq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915193043-gxtmnaq",
				"updated": "20220915193555"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "五、RibbonClientConfiguration 配置类"
				}
			]
		},
		{
			"ID": "20220915193051-sow2uen",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915193051-sow2uen",
				"updated": "20220915193441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Import({ HttpClientConfiguration.class, OkHttpRibbonConfiguration.class,\n\t\tRestClientRibbonConfiguration.class, HttpClientRibbonConfiguration.class })\npublic class RibbonClientConfiguration {\n\n\t/**\n\t * 默认链接超时\n\t */\n\tpublic static final int DEFAULT_CONNECT_TIMEOUT = 1000;\n\n\t/**\n\t * 默认读取超时\n\t */\n\tpublic static final int DEFAULT_READ_TIMEOUT = 1000;\n\n\t/**\n\t * Ribbon client default Gzip Payload flag.\n\t */\n\tpublic static final boolean DEFAULT_GZIP_PAYLOAD = true;\n\n\t@RibbonClientName\n\tprivate String name = \"client\";\n\n\n\t@Autowired\n\tprivate PropertiesFactory propertiesFactory;\n\n\t@Autowired\n\tprivate Environment environment;\n\n\t//ribbon的配置，默认配置实现：DefaultClientConfigImpl\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic IClientConfig ribbonClientConfig() {\n\t\tDefaultClientConfigImpl config = new DefaultClientConfigImpl();\n\t\tconfig.loadProperties(this.name);\n\t\tconfig.set(CommonClientConfigKey.ConnectTimeout, getProperty(\n\t\t\t\tCommonClientConfigKey.ConnectTimeout, DEFAULT_CONNECT_TIMEOUT));\n\t\tconfig.set(CommonClientConfigKey.ReadTimeout,\n\t\t\t\tgetProperty(CommonClientConfigKey.ReadTimeout, DEFAULT_READ_TIMEOUT));\n\t\tconfig.set(CommonClientConfigKey.GZipPayload, DEFAULT_GZIP_PAYLOAD);\n\t\treturn config;\n\t}\n\n\tprivate Integer getProperty(IClientConfigKey\u003cInteger\u003e connectTimeout,\n\t\t\tint defaultConnectTimeout) {\n\t\treturn environment.getProperty(\"ribbon.\" + connectTimeout, Integer.class,\n\t\t\t\tdefaultConnectTimeout);\n\t}\n\t//配置负载均衡算法类，如果有自定义，使用自定义的，否则使用的是ZoneAvoidanceRule 区域选择\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic IRule ribbonRule(IClientConfig config) {\n\t\tif (this.propertiesFactory.isSet(IRule.class, name)) {\n\t\t\treturn this.propertiesFactory.get(IRule.class, config, name);\n\t\t}\n\t\tZoneAvoidanceRule rule = new ZoneAvoidanceRule();\n\t\trule.initWithNiwsConfig(config);\n\t\treturn rule;\n\t}\n\t//定义IPing，用来检查服务是否可用的，默认使用DummyPing\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic IPing ribbonPing(IClientConfig config) {\n\t\tif (this.propertiesFactory.isSet(IPing.class, name)) {\n\t\t\treturn this.propertiesFactory.get(IPing.class, config, name);\n\t\t}\n\t\treturn new DummyPing();\n\t}\n\t//服务列表，定义用于获取服务器列表的方法的接口,默认实现是ConfigurationBasedServerList，很重要\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@SuppressWarnings(\"unchecked\")\n\tpublic ServerList\u003cServer\u003e ribbonServerList(IClientConfig config) {\n\t\tif (this.propertiesFactory.isSet(ServerList.class, name)) {\n\t\t\treturn this.propertiesFactory.get(ServerList.class, config, name);\n\t\t}\n\t\tConfigurationBasedServerList serverList = new ConfigurationBasedServerList();\n\t\tserverList.initWithNiwsConfig(config);\n\t\treturn serverList;\n\t}\n\t//服务器列表更新器，默认实现是PollingServerListUpdater\n\t//是动态服务器列表更新程序更新的默认策略 \n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ServerListUpdater ribbonServerListUpdater(IClientConfig config) {\n\t\treturn new PollingServerListUpdater(config);\n\t}\n\t//负载均衡器ILoadBalancer ，\n\t//默认实现ZoneAwareLoadBalancer，继承于DynamicServerListLoadBalancer\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ILoadBalancer ribbonLoadBalancer(IClientConfig config,\n\t\t\tServerList\u003cServer\u003e serverList, ServerListFilter\u003cServer\u003e serverListFilter,\n\t\t\tIRule rule, IPing ping, ServerListUpdater serverListUpdater) {\n\t\tif (this.propertiesFactory.isSet(ILoadBalancer.class, name)) {\n\t\t\treturn this.propertiesFactory.get(ILoadBalancer.class, config, name);\n\t\t}\n\t\treturn new ZoneAwareLoadBalancer\u003c\u003e(config, rule, ping, serverList,\n\t\t\t\tserverListFilter, serverListUpdater);\n\t}\n\t//服务列表过滤器，默认ZonePreferenceServerListFilter 区域首选\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@SuppressWarnings(\"unchecked\")\n\tpublic ServerListFilter\u003cServer\u003e ribbonServerListFilter(IClientConfig config) {\n\t\tif (this.propertiesFactory.isSet(ServerListFilter.class, name)) {\n\t\t\treturn this.propertiesFactory.get(ServerListFilter.class, config, name);\n\t\t}\n\t\tZonePreferenceServerListFilter filter = new ZonePreferenceServerListFilter();\n\t\tfilter.initWithNiwsConfig(config);\n\t\treturn filter;\n\t}\n\t//负载均衡上下文\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RibbonLoadBalancerContext ribbonLoadBalancerContext(ILoadBalancer loadBalancer,\n\t\t\tIClientConfig config, RetryHandler retryHandler) {\n\t\treturn new RibbonLoadBalancerContext(loadBalancer, config, retryHandler);\n\t}\n\t//默认负载均衡器重试处理程序\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RetryHandler retryHandler(IClientConfig config) {\n\t\treturn new DefaultLoadBalancerRetryHandler(config);\n\t}\n\t//服务内省器\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ServerIntrospector serverIntrospector() {\n\t\treturn new DefaultServerIntrospector();\n\t}\n\n\t@PostConstruct\n\tpublic void preprocess() {\n\t\tsetRibbonProperty(name, DeploymentContextBasedVipAddresses.key(), name);\n\t}\n\t//覆盖其他Rest客户端\n\tstatic class OverrideRestClient extends RestClient {\n\n\t\tprivate IClientConfig config;\n\n\t\tprivate ServerIntrospector serverIntrospector;\n\n\t\tprotected OverrideRestClient(IClientConfig config,\n\t\t\t\tServerIntrospector serverIntrospector) {\n\t\t\tsuper();\n\t\t\tthis.config = config;\n\t\t\tthis.serverIntrospector = serverIntrospector;\n\t\t\tinitWithNiwsConfig(this.config);\n\t\t}\n\t\t//使用服务器重构URI\n\t\t@Override\n\t\tpublic URI reconstructURIWithServer(Server server, URI original) {\n\t\t\tURI uri = updateToSecureConnectionIfNeeded(original, this.config,\n\t\t\t\t\tthis.serverIntrospector, server);\n\t\t\treturn super.reconstructURIWithServer(server, uri);\n\t\t}\n\t\t//初始化ApacheHttpClient4  客户端\n\t\t@Override\n\t\tprotected Client apacheHttpClientSpecificInitialization() {\n\t\t\tApacheHttpClient4 apache = (ApacheHttpClient4) super.apacheHttpClientSpecificInitialization();\n\t\t\tapache.getClientHandler().getHttpClient().getParams().setParameter(\n\t\t\t\t\tClientPNames.COOKIE_POLICY, CookiePolicy.IGNORE_COOKIES);\n\t\t\treturn apache;\n\t\t}\n\n\t}\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915193503-sbya7vy",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915193503-sbya7vy",
				"updated": "20220915193503"
			},
			"Children": [
				{
					"ID": "20220915193503-t56d18p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193503-t56d18p",
						"updated": "20220915193503"
					},
					"Children": [
						{
							"ID": "20220915193503-1webkof",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193503-1webkof",
								"updated": "20220915193510"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IClientConfig ：Ribon的客户端配置对象\n"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193512-cp0vxkr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193512-cp0vxkr"
					},
					"Children": [
						{
							"ID": "20220915193512-wk99mqe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193512-wk99mqe"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IRule：Ribbon的负载均衡策略，如果没有指定策略类，默认使用ZoneAvoidanceRule ，拥有zone选择和轮询算法\n"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193514-c2suk9p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193514-c2suk9p"
					},
					"Children": [
						{
							"ID": "20220915193514-8pb4uv3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193514-8pb4uv3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IPing ：检查服务器是否可用，可用的服务器将作为Ribbon负载均衡的候选服务器\n"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193515-d9xajmk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193515-d9xajmk"
					},
					"Children": [
						{
							"ID": "20220915193515-dvv1ahm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193515-dvv1ahm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ServerList : 用来获取所有server的注册列表的接口，提供了初始化服务列表和更新服务列表的方法，"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193515-dvkkpur",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193515-dvkkpur"
					},
					"Children": [
						{
							"ID": "20220915193515-5z6m8jw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193515-5z6m8jw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DynamicServerListLoadBalancer通过它来获取服务注册表\n"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193516-zq8ricn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193516-zq8ricn"
					},
					"Children": [
						{
							"ID": "20220915193516-37s726x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193516-37s726x"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ServerListUpdater ： 服务列表更新器默认实现PollingServerListUpdater ，维护了一个定时器30s/次更新\n"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193516-xdskkov",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193516-xdskkov"
					},
					"Children": [
						{
							"ID": "20220915193516-zq55zf9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193516-zq55zf9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ServerListFilter ：服务列表过滤器，通过该接口过滤后的server列表作为负载均衡候选的服务列表，默认实现"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193517-pcysnko",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193517-pcysnko"
					},
					"Children": [
						{
							"ID": "20220915193517-fnlpo0s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193517-fnlpo0s"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ZonePreferenceServerListFilter 首选根据区域过滤。\n"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193518-ys88hlk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193518-ys88hlk"
					},
					"Children": [
						{
							"ID": "20220915193518-aotcapq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193518-aotcapq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ILoadBalancer ：负载均衡器，默认实现ZoneAwareLoadBalancer，Ribobn通过它实现负载均衡\n"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193518-q5svejp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193518-q5svejp"
					},
					"Children": [
						{
							"ID": "20220915193518-vqet4ox",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193518-vqet4ox"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LoadBalancerContext： Ribbon负载均衡器上下文对象，默认实现RibbonLoadBalancerContext\n"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193519-8jfwr16",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193519-8jfwr16"
					},
					"Children": [
						{
							"ID": "20220915193519-mt20uy2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193519-mt20uy2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RetryHandler：重试处理器，它确定负载均衡器是否可重试，维护了Ribbon的重试次数\n"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193520-buyqqfa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193520-buyqqfa"
					},
					"Children": [
						{
							"ID": "20220915193520-fn84vcw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193520-fn84vcw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ServerIntrospector ：服务器自省，可以确定服务器是安全访问，和获取服务的元数据"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915193527-jt7y8wz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915193527-jt7y8wz",
				"updated": "20220915193543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "六、ILoadBalancer 负载均衡器"
				}
			]
		},
		{
			"ID": "20220915193623-5ahgicq",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915193623-5ahgicq",
				"updated": "20220915193623"
			},
			"Children": [
				{
					"ID": "20220915193623-0ybby1c",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193623-0ybby1c",
						"updated": "20220915193623"
					},
					"Children": [
						{
							"ID": "20220915193623-5m4svm7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193623-5m4svm7",
								"updated": "20220915193623"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "chooseServer 根据服务名选择一个服务"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193623-nz0si81",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193623-nz0si81",
						"updated": "20220915193623"
					},
					"Children": [
						{
							"ID": "20220915193623-szxjbb2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193623-szxjbb2",
								"updated": "20220915193623"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "addServers添加服务集合，"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193623-ajhj1p0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193623-ajhj1p0",
						"updated": "20220915193623"
					},
					"Children": [
						{
							"ID": "20220915193623-n4oy6og",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193623-n4oy6og",
								"updated": "20220915193623"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "markServerDown标记服务下线，"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193623-tmiwrjx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193623-tmiwrjx",
						"updated": "20220915193623"
					},
					"Children": [
						{
							"ID": "20220915193623-zjw8bo7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193623-zjw8bo7",
								"updated": "20220915193623"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "getServerList获取可用的服务列表"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193623-9j0yxc3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193623-9j0yxc3",
						"updated": "20220915193623"
					},
					"Children": [
						{
							"ID": "20220915193623-0ajx7mu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193623-0ajx7mu",
								"updated": "20220915193623"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "getReachableServers获取可用的服务列表，"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193623-e5gf58a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193623-e5gf58a",
						"updated": "20220915193623"
					},
					"Children": [
						{
							"ID": "20220915193623-8aajcrt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193623-8aajcrt",
								"updated": "20220915193623"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "getAllServers获取所有的服务列表"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915193820-8h9xm0v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915193820-8h9xm0v",
				"updated": "20220915193832"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ILoadBalancer  接口实现类 DynamicServerListLoadBalancer"
				}
			]
		},
		{
			"ID": "20220915193718-kq3b6tn",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915193718-kq3b6tn",
				"updated": "20220915193718"
			},
			"Children": [
				{
					"ID": "20220915193718-429hemt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193718-429hemt",
						"updated": "20220915193718"
					},
					"Children": [
						{
							"ID": "20220915193718-rx6ilc4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193718-rx6ilc4",
								"updated": "20220915193718"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DynamicServerListLoadBalancer是动态服务器列表负载均衡器，具有动态获取服务器的候选列表的功能，即便注册表在修改也可以动态获取有效的服务"
								}
							]
						}
					]
				},
				{
					"ID": "20220915193718-b2c4ab9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915193718-b2c4ab9",
						"updated": "20220915193718"
					},
					"Children": [
						{
							"ID": "20220915193718-wa8xuaz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915193718-wa8xuaz",
								"updated": "20220915193718"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ZoneAwareLoadBalancer是区域感知负载均衡器，选择服务器时可以根据区域zone进行选择"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915165305-uigp9rl",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915165305-uigp9rl",
				"updated": "20220915165305"
			},
			"Children": [
				{
					"ID": "20220915123215-5vlu8xy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915123215-5vlu8xy"
					},
					"Children": [
						{
							"ID": "20220915123215-8t2xpx3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915123215-8t2xpx3",
								"updated": "20220915123254"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ZoneAwareLoadBalancer的父类是"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "DynamicServerListLoadBalancer"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，DynamicServerListLoadBalancer构造函数中会调用"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "restOfInit()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "方法（其中会获取到所有的服务实例）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915122341-o9jkf5j",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915122341-o9jkf5j",
				"updated": "20220915193911"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "七、IRule负载均衡策略"
				}
			]
		},
		{
			"ID": "20220915193912-hin0uco",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915193912-hin0uco",
				"updated": "20220915193917"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "IRule就是具体的负载均衡算法接口，包括了存取负载均衡器方法和选择服务方法，它很多的实现，一个实现代表一种算法，是ribbon实现负载均衡的核心算法"
				}
			]
		},
		{
			"ID": "20220915193918-loet3fu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915193918-loet3fu",
				"updated": "20220915194008"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//接口定义了负载均衡器“规则”。，众所周知的负载均衡策略，包括基于轮循，响应时间等\npublic interface IRule {\n    // 选择服务的具体方法，从 allServers 或者 lb.upServers选择一个服务\n    Server choose(Object var1);\n    //设置负载均衡器\n    void setLoadBalancer(ILoadBalancer var1);\n    //获取负载均衡器\n    ILoadBalancer getLoadBalancer();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915194018-4px21aq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915194018-4px21aq",
				"updated": "20220915194108"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "八、ServerList 服务列表获取接口"
				}
			]
		},
		{
			"ID": "20220915194110-07ci88o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915194110-07ci88o",
				"updated": "20220915194118"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用来获取负载均衡候选的server的注册列表的接口，提供了初始化服务列表和更新服务列表的方法"
				}
			]
		},
		{
			"ID": "20220915194119-i9nw3xm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915194119-i9nw3xm",
				"updated": "20220915194209"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface ServerList\u003cT extends Server\u003e {\n    //初始化服务列表\n    List\u003cT\u003e getInitialListOfServers();\n\n    List\u003cT\u003e getUpdatedListOfServers();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915194043-q7t1abm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915194043-q7t1abm",
				"updated": "20220915200435"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "九、ServerListUpdater 服务列表更新器"
				}
			]
		},
		{
			"ID": "20220915200508-y9zaqpx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915200508-y9zaqpx",
				"updated": "20220915200942"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它是用来更新负载均衡的候选服务列表的，其中一个实现是PollingServerListUpdater，通过定时任务来更新服务列表"
				}
			]
		},
		{
			"ID": "20220915200943-5o86grg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915200943-5o86grg",
				"updated": "20220915201239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class PollingServerListUpdater implements ServerListUpdater {\n\t//延迟时间\n    private static long LISTOFSERVERS_CACHE_UPDATE_DELAY = 1000; // msecs;\n    //定时任务间隔时间，更新服务列表\n    private static int LISTOFSERVERS_CACHE_REPEAT_INTERVAL = 30 * 1000; // msecs;\n\n   @Override\n    public synchronized void start(final UpdateAction updateAction) {\n        if (isActive.compareAndSet(false, true)) {\n            final Runnable wrapperRunnable = new Runnable() {\n                @Override\n                public void run() {\n                    if (!isActive.get()) {\n                        if (scheduledFuture != null) {\n                            scheduledFuture.cancel(true);\n                        }\n                        return;\n                    }\n                    try {\n                    \t//更新动作，执行更新\n                        updateAction.doUpdate();\n                        lastUpdated = System.currentTimeMillis();\n                    } catch (Exception e) {\n                        logger.warn(\"Failed one update cycle\", e);\n                    }\n                }\n            };\n\t\t//定时任务\n            scheduledFuture = getRefreshExecutor().scheduleWithFixedDelay(\n                    wrapperRunnable,\t//任务线程\n                    initialDelayMs,\n                    refreshIntervalMs,\n                    TimeUnit.MILLISECONDS\t30s/次\n            );\n        } else {\n            logger.info(\"Already active, no-op\");\n        }\n    }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915201345-re9jd96",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915201345-re9jd96",
				"updated": "20220915201700"
			},
			"Children": [
				{
					"ID": "20220915201349-1oyfphb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915201349-1oyfphb",
						"updated": "20220915201349"
					},
					"Children": [
						{
							"ID": "20220915201349-nlatjyz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915201349-nlatjyz",
								"updated": "20220915201349"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "其实PollingServerListUpdater 最终也是通过DynamicServerListLoadBalancer#updateListOfServers去更新服务列表，只不过是定时更新的"
								}
							]
						}
					]
				},
				{
					"ID": "20220915201504-v99o7rn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915201504-v99o7rn",
						"updated": "20220915201700"
					},
					"Children": [
						{
							"ID": "20220915201504-sxj8kmc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915201504-sxj8kmc",
								"updated": "20220915201700"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DynamicServerListLoadBalancer 初始化构造方法时会调用restOfInit 方法在里面通过"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "updateListOfServers"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "  服务列表更新的定时任务。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915200434-gty0y3i",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915200434-gty0y3i",
				"updated": "20220915200453"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "十、ServerListFilter 服务列表过滤"
				}
			]
		},
		{
			"ID": "20220915200505-visif44",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915200505-visif44",
				"updated": "20220915200506"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它负责过滤负载均衡器候选的服务列表，在Rbbon加载到servers服务列表后就会使用ServerListFilter进行过滤，比如ZonePreferenceServerListFilter就是根据区域进行过滤"
				}
			]
		},
		{
			"ID": "20220915200652-oc7225h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915200652-oc7225h",
				"updated": "20220915201934"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总结"
				}
			]
		},
		{
			"ID": "20220915200916-6cr4llt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915200916-6cr4llt",
				"updated": "20220915201854"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20220915201854-8nhizf4.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220915202009-yoqu9e7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915202009-yoqu9e7",
				"updated": "20220915202023"
			}
		},
		{
			"ID": "20220915202010-1tyc5id",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915202010-1tyc5id",
				"updated": "20220915202019"
			}
		},
		{
			"ID": "20220915202015-vce3358",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915202015-vce3358",
				"updated": "20220915202257"
			},
			"Children": [
				{
					"ID": "20220915202015-ojm0ky7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202015-ojm0ky7",
						"updated": "20220915202015"
					},
					"Children": [
						{
							"ID": "20220915202015-vdfcspa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202015-vdfcspa",
								"updated": "20220915202020"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RibbonAutoConfiguration 创建负载均衡客户端LoadBalancerClient "
								}
							]
						}
					]
				},
				{
					"ID": "20220915202204-kqhg1v3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202204-kqhg1v3"
					},
					"Children": [
						{
							"ID": "20220915202204-jjqjmra",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202204-jjqjmra"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RibbonAutoConfiguration 创建SpringClientFactory初始化Ribbon上下文，注册相关的组件 "
								}
							]
						}
					]
				},
				{
					"ID": "20220915202211-uznq9nn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202211-uznq9nn"
					},
					"Children": [
						{
							"ID": "20220915202211-tfk0dd2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202211-tfk0dd2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LoadBalancerAutoConfiguration 定义好负载均衡拦截器LoadBalancerInterceptor，添加到RestTemplate "
								}
							]
						}
					]
				},
				{
					"ID": "20220915202223-1mx271d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202223-1mx271d"
					},
					"Children": [
						{
							"ID": "20220915202223-o5155sx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202223-o5155sx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RibbonClientConfiguration 注册了ILoadBalancer,IRule,IPing,ServerList,ServerListFilter,ServerListUpdater "
								}
							]
						}
					]
				},
				{
					"ID": "20220915202257-vwb1ipr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202257-vwb1ipr",
						"updated": "20220915202257"
					},
					"Children": [
						{
							"ID": "20220915202257-s9g5471",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202257-s9g5471"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ILoadBalancer 的实现类DynamicServerListLoadBalancer 通过ServerList加载服务列表，通过ServerListFilter过滤，通过IPing检查可用性，通过ServerListUpdater定时更新服务列表"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915202056-a3o8bgl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915202056-a3o8bgl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是用RestTemplate使用服务名发起请求时会走如下流程"
				}
			]
		},
		{
			"ID": "20220915202058-43e13ff",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915202058-43e13ff",
				"updated": "20220915202058"
			},
			"Children": [
				{
					"ID": "20220915202024-r3asfwr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202024-r3asfwr"
					},
					"Children": [
						{
							"ID": "20220915202024-g8tmn2j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202024-g8tmn2j",
								"updated": "20220915202025"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RestTemplate请求调用LoadBalancerInterceptorintercept方法执行请求"
								}
							]
						}
					]
				},
				{
					"ID": "20220915202111-jmgi80s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202111-jmgi80s"
					},
					"Children": [
						{
							"ID": "20220915202111-mxg19w0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202111-mxg19w0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接着调用LoadBalancerClientexec，服务名和LoadBalancerRequestFactory创建的LoadBalancerRequest请求对象作为参数 "
								}
							]
						}
					]
				},
				{
					"ID": "20220915202122-qbmj8nl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202122-qbmj8nl"
					},
					"Children": [
						{
							"ID": "20220915202122-gstme83",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202122-gstme83"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LoadBalancerClientexec方法中调用ILoadBalancerchooseServer选择一个服务"
								}
							]
						}
					]
				},
				{
					"ID": "20220915202131-qlo41xo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202131-qlo41xo"
					},
					"Children": [
						{
							"ID": "20220915202131-25muz51",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202131-25muz51",
								"updated": "20220915202133"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ILoadBalancerchooseServer又调用IRule的负载均衡算法选择服务"
								}
							]
						}
					]
				},
				{
					"ID": "20220915202144-ijnk7u2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915202144-ijnk7u2"
					},
					"Children": [
						{
							"ID": "20220915202144-gwewj4l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915202144-gwewj4l"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "选择到服务后，调用LoadBalancerRequestapply对选择的服务发起请求"
								}
							]
						}
					]
				}
			]
		}
	]
}