{
	"ID": "20220824115603-juqypwe",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220824115603-juqypwe",
		"scroll": "{\u0026amp;quot;startId\u0026amp;quot;:\u0026amp;quot;20220824115619-5uwejjg\u0026amp;quot;,\u0026amp;quot;endId\u0026amp;quot;:\u0026amp;quot;20220824115619-263pib0\u0026amp;quot;,\u0026amp;quot;scrollTop\u0026amp;quot;:2188,\u0026amp;quot;focusId\u0026amp;quot;:\u0026amp;quot;20220824115619-zevf1yg\u0026amp;quot;,\u0026amp;quot;focusStart\u0026amp;quot;:13,\u0026amp;quot;focusEnd\u0026amp;quot;:13}",
		"title": "Redis 面试题",
		"updated": "20220824133906"
	},
	"Children": [
		{
			"ID": "20220824115619-5uwejjg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-5uwejjg",
				"updated": "20220824115801"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.说说什么是Redis?"
				}
			]
		},
		{
			"ID": "20220824115619-qalazz7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-qalazz7",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis是一种基于键值对（key-value）的NoSQL数据库。"
				}
			]
		},
		{
			"ID": "20220824115619-88x3b4k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-88x3b4k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比一般键值对数据库强大的地方，Redis中的value支持string（字符串）、hash（哈希）、 list（列表）、set（集合）、zset（有序集合）、Bitmaps（位图）、 HyperLogLog、GEO（地理信息定位）等多种数据结构，因此 Redis可以满足很多的应用场景。"
				}
			]
		},
		{
			"ID": "20220824115619-2wt51yi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-2wt51yi",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而且因为Redis会将所有数据都存放在内存中，所以它的读写性能非常出色。"
				}
			]
		},
		{
			"ID": "20220824115619-pr6459k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-pr6459k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不仅如此，Redis还可以将内存的数据利用快照和日志的形式保存到硬盘上，这样在发生类似断电或者机器故障的时候，内存中的数据不会“丢失”。"
				}
			]
		},
		{
			"ID": "20220824115619-vuidptf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-vuidptf",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除了上述功能以外，Redis还提供了键过期、发布订阅、事务、流水线、Lua脚本等附加功能。"
				}
			]
		},
		{
			"ID": "20220824115619-mmssssf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-mmssssf",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总之，Redis是一款强大的性能利器。"
				}
			]
		},
		{
			"ID": "20220824115619-ud8l3hk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-ud8l3hk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.Redis可以用来干什么？"
				}
			]
		},
		{
			"ID": "20220824115619-5arrcrm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-5arrcrm",
				"updated": "20220824115814"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152145-q1rq385.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				}
			]
		},
		{
			"ID": "20220824115619-w00nz94",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-w00nz94",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-6zyieaz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-6zyieaz",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-8vzzndq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-8vzzndq",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存"
								}
							]
						},
						{
							"ID": "20220824115619-w0kch1t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-w0kch1t",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这是Redis应用最广泛地方，基本所有的Web应用都会使用Redis作为缓存，来降低数据源压力，提高响应速度。"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152145-mwinkiu.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-tuhwq1b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-tuhwq1b",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ew8rm16",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ew8rm16",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "计数器 Redis天然支持计数功能，而且计数性能非常好，可以用来记录浏览量、点赞量等等。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-sh55z3c",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-sh55z3c",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-oyizvbs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-oyizvbs",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "排行榜 Redis提供了列表和有序集合数据结构，合理地使用这些数据结构可以很方便地构建各种排行榜系统。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-tfuuosc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-tfuuosc",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-o2npo3b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-o2npo3b",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "社交网络 赞/踩、粉丝、共同好友/喜好、推送、下拉刷新。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ynemc9h",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220824115619-ynemc9h",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ky27wla",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ky27wla",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "消息队列 Redis提供了发布订阅功能和阻塞队列的功能，可以满足一般消息队列功能。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ui8fx93",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20220824115619-ui8fx93",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-v6krcnt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-v6krcnt",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "分布式锁 分布式环境下，利用Redis实现分布式锁，也是Redis常见的应用。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-bboq9r4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-bboq9r4",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis的应用一般会结合项目去问，以一个电商项目的用户服务为例："
				}
			]
		},
		{
			"ID": "20220824115619-ujghanc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-ujghanc",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-mzsfl75",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-mzsfl75",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-cys0n73",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-cys0n73",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Token存储：用户登录成功之后，使用Redis存储Token"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-cay5xm8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-cay5xm8",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-myegnx3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-myegnx3",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "登录失败次数计数：使用Redis计数，登录失败超过一定次数，锁定账号"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-td7vru7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-td7vru7",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ekijad7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ekijad7",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "地址缓存：对省市区数据的缓存"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-zzjb9s5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-zzjb9s5",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-xfpjmzx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-xfpjmzx",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "分布式锁：分布式环境下登录、注册等操作加分布式锁"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-tdoppa9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-tdoppa9",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-738vh97",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-738vh97",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "……"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-6jk4t6s",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-6jk4t6s",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.Redis 有哪些数据结构？"
				}
			]
		},
		{
			"ID": "20220824115619-zevf1yg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-zevf1yg",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152145-0o676tv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "Redis有五种基本数据结构。"
				}
			]
		},
		{
			"ID": "20220824115619-uud6djd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-uud6djd",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "string"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-quzgjpa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-quzgjpa",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符串最基础的数据结构。字符串类型的值实际可以是字符串（简单的字符串、复杂的字符串（例如JSON、XML））、数字 （整数、浮点数），甚至是二进制（图片、音频、视频），但是值最大不能超过512MB。"
				}
			]
		},
		{
			"ID": "20220824115619-3wpjn0l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-3wpjn0l",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符串主要有以下几个典型使用场景："
				}
			]
		},
		{
			"ID": "20220824115619-sfaoexk",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-sfaoexk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-m2jmtcq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-m2jmtcq",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-e2zugml",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-e2zugml",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存功能"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-oaauetw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-oaauetw",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-w34xbua",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-w34xbua",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "计数"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-4c4e3zq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-4c4e3zq",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ggxfqyx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ggxfqyx",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "共享Session"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-jlz1hzz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-jlz1hzz",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-f0qf9h5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-f0qf9h5",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "限速"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-sdx26l5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-sdx26l5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "hash"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-91gyf86",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-91gyf86",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "哈希类型是指键值本身又是一个键值对结构。"
				}
			]
		},
		{
			"ID": "20220824115619-lv855w0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-lv855w0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "哈希主要有以下典型应用场景："
				}
			]
		},
		{
			"ID": "20220824115619-iyq334y",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-iyq334y",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-e6fr4fc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-e6fr4fc",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-dk73427",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-dk73427",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存用户信息"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-n0j6vz6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-n0j6vz6",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ryjfk90",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ryjfk90",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存对象"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-qn5oa8d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-qn5oa8d",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "list"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-p78bn2n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-p78bn2n",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "列表（list）类型是用来存储多个有序的字符串。列表是一种比较灵活的数据结构，它可以充当栈和队列的角色"
				}
			]
		},
		{
			"ID": "20220824115619-b8b7r58",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-b8b7r58",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "列表主要有以下几种使用场景："
				}
			]
		},
		{
			"ID": "20220824115619-s1z15ww",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-s1z15ww",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-njpk6u1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-njpk6u1",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-8x8xchg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-8x8xchg",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "消息队列"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-dv02d4k",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-dv02d4k",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-knjsfyz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-knjsfyz",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "文章列表"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-4vgcjcy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-4vgcjcy",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "set"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-c1d3mxq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-c1d3mxq",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合（set）类型也是用来保存多个的字符串元素，但和列表类型不一 样的是，集合中不允许有重复元素，并且集合中的元素是无序的。"
				}
			]
		},
		{
			"ID": "20220824115619-61mutmr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-61mutmr",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合主要有如下使用场景："
				}
			]
		},
		{
			"ID": "20220824115619-jcjvzl2",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-jcjvzl2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-pwsvbt8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-pwsvbt8",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-im8s6e1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-im8s6e1",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "标签（tag）"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-8ubl7e7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-8ubl7e7",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-swwyvda",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-swwyvda",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "共同关注"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-6bjufu0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-6bjufu0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "sorted set"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-f95fax2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-f95fax2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有序集合中的元素可以排序。但是它和列表使用索引下标作为排序依据不同的是，它给每个元素设置一个权重（score）作为排序的依据。"
				}
			]
		},
		{
			"ID": "20220824115619-djhdxuc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-djhdxuc",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有序集合主要应用场景："
				}
			]
		},
		{
			"ID": "20220824115619-3ybhln3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-3ybhln3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-v24izq2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-v24izq2",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-suist3s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-suist3s",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用户点赞统计"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-l5af8nq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-l5af8nq",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-10nlnn9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-10nlnn9",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用户排序"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-60hanz9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-60hanz9",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.Redis为什么快呢？"
				}
			]
		},
		{
			"ID": "20220824115619-riez90g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-riez90g",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis的速度⾮常的快，单机的Redis就可以⽀撑每秒十几万的并发，相对于MySQL来说，性能是MySQL的⼏⼗倍。速度快的原因主要有⼏点："
				}
			]
		},
		{
			"ID": "20220824115619-263pib0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-263pib0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-xsjnwlr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-xsjnwlr",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-twl063c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-twl063c",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "完全基于内存操作"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-r11jp52",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-r11jp52",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-rucew0g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-rucew0g",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使⽤单线程，避免了线程切换和竞态产生的消耗"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-u8zfi0l",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-u8zfi0l",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ay3fzfy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ay3fzfy",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "基于⾮阻塞的IO多路复⽤机制"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-4d2w6e1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-4d2w6e1",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-94saiah",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-94saiah",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C语⾔实现，优化过的数据结构，基于⼏种基础的数据结构，redis做了⼤量的优化，性能极⾼"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152145-001yvph.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-17nzsw5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-17nzsw5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.能说一下I/O多路复用吗？"
				}
			]
		},
		{
			"ID": "20220824115619-fbqvbsk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-fbqvbsk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "引用知乎上一个高赞的回答来解释什么是I/O多路复用。假设你是一个老师，让30个学生解答一道题目，然后检查学生做的是否正确，你有下面几个选择："
				}
			]
		},
		{
			"ID": "20220824115619-pslxoec",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-pslxoec",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-8d7imfl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-8d7imfl",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-vlpugij",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-vlpugij",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一种选择：按顺序逐个检查，先检查A，然后是B，之后是C、D。。。这中间如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理socket，根本不具有并发能力。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-sna1o2a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-sna1o2a",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-55obi2x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-55obi2x",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。这种类似于为每一个用户创建一个进程或者- 线程处理连接。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ub4yzyf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-ub4yzyf",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-74f5izj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-74f5izj",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又举手，然后去处理E和A。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-0v6bi0g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-0v6bi0g",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一种就是阻塞IO模型，第三种就是I/O复用模型。"
				}
			]
		},
		{
			"ID": "20220824115619-x1pokc1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-x1pokc1",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152146-qv531jg.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n多路复用模型"
				}
			]
		},
		{
			"ID": "20220824115619-r3vx6s3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-r3vx6s3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Linux系统有三种方式实现IO多路复用：select、poll和epoll。"
				}
			]
		},
		{
			"ID": "20220824115619-ejarq0j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-ejarq0j",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如epoll方式是将用户socket对应的fd注册进epoll，然后epoll帮你监听哪些socket上有消息到达，这样就避免了大量的无用操作。此时的socket应该采用非阻塞模式。"
				}
			]
		},
		{
			"ID": "20220824115619-5byzyoo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-5byzyoo",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样，整个过程只在进行select、poll、epoll这些调用的时候才会阻塞，收发客户消息是不会阻塞的，整个进程或者线程就被充分利用起来，这就是事件驱动，所谓的reactor模式。"
				}
			]
		},
		{
			"ID": "20220824115619-ubqhez1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-ubqhez1",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6. Redis为什么早期选择单线程？"
				}
			]
		},
		{
			"ID": "20220824115619-2aiijvo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-2aiijvo",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "官方解释：https://redis.io/topics/faq"
				}
			]
		},
		{
			"ID": "20220824115619-mgudthz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-mgudthz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152146-sv328bw.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "官方FAQ表示，因为Redis是基于内存的操作，CPU成为Redis的瓶颈的情况很少见，Redis的瓶颈最有可能是内存的大小或者网络限制。"
				}
			]
		},
		{
			"ID": "20220824115619-brolsrs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-brolsrs",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果想要最大程度利用CPU，可以在一台机器上启动多个Redis实例。"
				}
			]
		},
		{
			"ID": "20220824115619-3rjwrsh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-3rjwrsh",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "PS：网上有这样的回答，吐槽官方的解释有些敷衍，其实就是历史原因，开发者嫌多线程麻烦，后来这个CPU的利用问题就被抛给了使用者。"
				}
			]
		},
		{
			"ID": "20220824115619-r75ut0y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-r75ut0y",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同时FAQ里还提到了， Redis 4.0 之后开始变成多线程，除了主线程外，它也有后台线程在处理一些较为缓慢的操作，例如清理脏数据、无用连接的释放、大 Key 的删除等等。"
				}
			]
		},
		{
			"ID": "20220824115619-bsciiex",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-bsciiex",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7.Redis6.0使用多线程是怎么回事?"
				}
			]
		},
		{
			"ID": "20220824115619-9hjgskz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-9hjgskz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis不是说用单线程的吗？怎么6.0成了多线程的？"
				}
			]
		},
		{
			"ID": "20220824115619-nciwxug",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-nciwxug",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis6.0的多线程是用多线程来处理数据的 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "读写和协议解析"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ，但是Redis"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "执行命令"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "还是单线程的。"
				}
			]
		},
		{
			"ID": "20220824115619-83f1z7z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-83f1z7z",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152146-ef8dxc3.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "这样做的⽬的是因为Redis的性能瓶颈在于⽹络IO⽽⾮CPU，使⽤多线程能提升IO读写的效率，从⽽整体提⾼Redis的性能。"
				}
			]
		},
		{
			"ID": "20220824115619-ylmd98a",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220824115619-ylmd98a",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "持久化"
				}
			]
		},
		{
			"ID": "20220824115619-nl3lhj7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-nl3lhj7",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "8.Redis持久化⽅式有哪些？有什么区别？"
				}
			]
		},
		{
			"ID": "20220824115619-vd90d01",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-vd90d01",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis持久化⽅案分为RDB和AOF两种。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152146-37geo8c.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-lvqmxno",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-lvqmxno",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "RDB"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-rs43487",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-rs43487",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RDB持久化是把当前进程数据生成"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "快照"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "保存到硬盘的过程，触发RDB持久化过程分为手动触发和自动触发。"
				}
			]
		},
		{
			"ID": "20220824115619-jlft5vk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-jlft5vk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RDB⽂件是⼀个压缩的⼆进制⽂件，通过它可以还原某个时刻数据库的状态。由于RDB⽂件是保存在硬盘上的，所以即使Redis崩溃或者退出，只要RDB⽂件存在，就可以⽤它来恢复还原数据库的状态。"
				}
			]
		},
		{
			"ID": "20220824115619-otkefpv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-otkefpv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "手动触发分别对应save和bgsave命令:"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-6h66b9n.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-bi0w2vv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-bi0w2vv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-kmryjxe",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-kmryjxe",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-19l5bjj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-19l5bjj",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "save命令：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-3auzu1q",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-3auzu1q",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-9slp5qj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-9slp5qj",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "bgsave命令：Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-rdtkymu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-rdtkymu",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以下场景会自动触发RDB持久化："
				}
			]
		},
		{
			"ID": "20220824115619-b6aek20",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-b6aek20",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-7y8regs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-7y8regs",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-10m68l2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-10m68l2",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用save相关配置，如“save m n”。表示m秒内数据集存在n次修改时，自动触发bgsave。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-w0csnrr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-w0csnrr",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-0nvxv6o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-0nvxv6o",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-qwohp5r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-qwohp5r",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-2lmiohl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-2lmiohl",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "执行debug reload命令重新加载Redis时，也会自动触发save操作"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-61lajrv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-61lajrv",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-4a7ndql",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-4a7ndql",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-iv56z1a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-iv56z1a",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "AOF"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-z2v31cj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-z2v31cj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AOF（append only file）持久化：以独立日志的方式记录每次写命令， 重启时再重新执行AOF文件中的命令达到恢复数据的目的。AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式。"
				}
			]
		},
		{
			"ID": "20220824115619-w4mg3we",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-w4mg3we",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AOF的工作流程操作：命令写入 （append）、文件同步（sync）、文件重写（rewrite）、重启加载 （load）"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-78xpd6l.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "流程如下："
				}
			]
		},
		{
			"ID": "20220824115619-lj6ota9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-lj6ota9",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1）所有的写入命令会追加到aof_buf（缓冲区）中。"
				}
			]
		},
		{
			"ID": "20220824115619-8izahrg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-8izahrg",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2）AOF缓冲区根据对应的策略向硬盘做同步操作。"
				}
			]
		},
		{
			"ID": "20220824115619-0sji9mu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-0sji9mu",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3）随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩 的目的。"
				}
			]
		},
		{
			"ID": "20220824115619-tv5uf6j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-tv5uf6j",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4）当Redis服务器重启时，可以加载AOF文件进行数据恢复。"
				}
			]
		},
		{
			"ID": "20220824115619-nd8a5xd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-nd8a5xd",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "9.RDB 和 AOF 各自有什么优缺点？"
				}
			]
		},
		{
			"ID": "20220824115619-yheagwp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-yheagwp",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "RDB | 优点"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-7c9li2l",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-7c9li2l",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-1fmsflm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-1fmsflm",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-d82lssn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-d82lssn",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "只有一个紧凑的二进制文件 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "dump.rdb"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，非常适合备份、全量复制的场景。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-wss4x7g",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-wss4x7g",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ygdg9x3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ygdg9x3",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "容灾性好"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，可以把RDB文件拷贝道远程机器或者文件系统张，用于容灾恢复。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-49i5obc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-49i5obc",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-vi8vfxq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-vi8vfxq",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "恢复速度快"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，RDB恢复数据的速度远远快于AOF的方式"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-9kj85hn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-9kj85hn",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "RDB | 缺点"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-jommafg",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-jommafg",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-014ea9x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-014ea9x",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-s1055j9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-s1055j9",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "实时性低"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，RDB 是间隔一段时间进行持久化，没法做到实时持久化/秒级持久化。如果在这一间隔事件发生故障，数据会丢失。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-475ap1a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-475ap1a",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-6e668xf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-6e668xf",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "存在兼容问题"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，Redis演进过程存在多个格式的RDB版本，存在老版本Redis无法兼容新版本RDB的问题。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-qcz0vyo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-qcz0vyo",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "AOF | 优点"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-od515jh",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-od515jh",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-jz5qdax",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-jz5qdax",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-y0p9uu4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-y0p9uu4",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "实时性好"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，aof 持久化可以配置 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "appendfsync"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 属性，有 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "always"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，每进行一次命令操作就记录到 aof 文件中一次。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-24jrnyc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-24jrnyc",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-vmovpbk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-vmovpbk",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-l8ey3j5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-l8ey3j5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "AOF | 缺点"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-pd8b4ra",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-pd8b4ra",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-7ndu0yd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-7ndu0yd",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-cfw566y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-cfw566y",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AOF 文件比 RDB  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "文件大"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，且  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "恢复速度慢"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ovug1ut",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-ovug1ut",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-wrel701",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-wrel701",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "数据集大"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 的时候，比 RDB  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "启动效率低"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-rs9zwfe",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-rs9zwfe",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "10.RDB和AOF如何选择？"
				}
			]
		},
		{
			"ID": "20220824115619-zd4fapm",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-zd4fapm",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-fvws455",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-fvws455",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-tqly27z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-tqly27z",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一般来说， 如果想达到足以媲美数据库的  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "数据安全性"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，应该  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "同时使用两种持久化功能"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 。在这种情况下，当 Redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-jmhn2ls",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-jmhn2ls",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-9dbvs9n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-9dbvs9n",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "可以接受数分钟以内的数据丢失"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，那么可以  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "只使用 RDB 持久化"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-o57io77",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-o57io77",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-2h322z8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-2h322z8",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有很多用户都只使用 AOF 持久化，但并不推荐这种方式，因为定时生成 RDB 快照（snapshot）非常便于进行数据备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快，除此之外，使用 RDB 还可以避免 AOF 程序的 bug。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-7byp1gw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-7byp1gw",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-lhml8ph",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-lhml8ph",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果只需要数据在服务器运行的时候存在，也可以不使用任何持久化方式。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-osu70lr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-osu70lr",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "11.Redis的数据恢复？"
				}
			]
		},
		{
			"ID": "20220824115619-tmdc12q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-tmdc12q",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当Redis发生了故障，可以从RDB或者AOF中恢复数据。"
				}
			]
		},
		{
			"ID": "20220824115619-jxscvwx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-jxscvwx",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "恢复的过程也很简单，把RDB或者AOF文件拷贝到Redis的数据目录下，如果使用AOF恢复，配置文件开启AOF，然后启动redis-server即可。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-w0v1ik7.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-lsg5dat",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-lsg5dat",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Redis"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 启动时加载数据的流程："
				}
			]
		},
		{
			"ID": "20220824115619-giyb04p",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-giyb04p",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-ul77q3w",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-ul77q3w",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-nshgv36",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-nshgv36",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AOF持久化开启且存在AOF文件时，优先加载AOF文件。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-o79andy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-o79andy",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-s68iunl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-s68iunl",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AOF关闭或者AOF文件不存在时，加载RDB文件。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-hmitrqw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-hmitrqw",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-fvormuv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-fvormuv",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加载AOF/RDB文件成功后，Redis启动成功。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-48wc6ut",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-48wc6ut",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-qzsqhay",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-qzsqhay",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AOF/RDB文件存在错误时，Redis启动失败并打印错误信息。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-h9mhbvk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-h9mhbvk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "12.Redis 4.0 的混合持久化了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-5nmqmo5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-5nmqmo5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重启 Redis 时，我们很少使用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "RDB"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "RDB"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。"
				}
			]
		},
		{
			"ID": "20220824115619-fak2s70",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-fak2s70",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Redis 4.0"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 为了解决这个问题，带来了一个新的持久化选项—— "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "混合持久化"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 。将 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "rdb"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "自持久化开始到持久化结束"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-reglcn1.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-vytghop",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-vytghop",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "于是在 Redis 重启的时候，可以先加载 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "rdb"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。"
				}
			]
		},
		{
			"ID": "20220824115619-lxz9vv6",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220824115619-lxz9vv6",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "高可用"
				}
			]
		},
		{
			"ID": "20220824115619-3rdwlq5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-3rdwlq5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis保证高可用主要有三种方式：主从、哨兵、集群。"
				}
			]
		},
		{
			"ID": "20220824115619-ek44oux",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-ek44oux",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "13.主从复制了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-h1gg3de",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-h1gg3de",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-ltppsfl.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\nRedis主从复制简图"
				}
			]
		},
		{
			"ID": "20220824115619-gheqnhg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-gheqnhg",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "主从复制"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "主节点(master)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，后者称为 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "从节点(slave)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。且数据的复制是 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "单向"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的，只能由主节点到从节点。Redis 主从复制支持 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "主从同步"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "从从同步"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 两种，后者是 Redis 后续版本新增的功能，以减轻主节点的同步负担。"
				}
			]
		},
		{
			"ID": "20220824115619-vobm00k",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-vobm00k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-blci424",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-blci424",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "主从复制主要的作用?"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-b4qdpd8",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-b4qdpd8",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-s47simq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-s47simq",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-1nyc82y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-1nyc82y",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "数据冗余："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-1u1mc05",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-1u1mc05",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-fp9ajbc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-fp9ajbc",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "故障恢复："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 "
								},
								{
									"Type": "NodeEmphasis",
									"Data": "em",
									"Children": [
										{
											"Type": "NodeEmA6kOpenMarker",
											"Data": "*"
										},
										{
											"Type": "NodeText",
											"Data": "(实际上是一种服务的冗余)"
										},
										{
											"Type": "NodeEmA6kCloseMarker",
											"Data": "*"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ytm7wuw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-ytm7wuw",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-njoy8g3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-njoy8g3",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "负载均衡："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务  "
								},
								{
									"Type": "NodeEmphasis",
									"Data": "em",
									"Children": [
										{
											"Type": "NodeEmA6kOpenMarker",
											"Data": "*"
										},
										{
											"Type": "NodeText",
											"Data": "（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点）"
										},
										{
											"Type": "NodeEmA6kCloseMarker",
											"Data": "*"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-d1lbt0o",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-d1lbt0o",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-sqeciog",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-sqeciog",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "高可用基石："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 除了上述作用以外，主从复制还是哨兵和集群能够实施的  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "基础"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，因此说主从复制是 Redis 高可用的基础。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-3do711f",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-3do711f",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "14.Redis主从有几种常见的拓扑结构？"
				}
			]
		},
		{
			"ID": "20220824115619-krwkw1r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-krwkw1r",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis的复制拓扑结构可以支持单层或多层复制关系，根据拓扑复杂性可以分为以下三种：一主一从、一主多从、树状主从结构。"
				}
			]
		},
		{
			"ID": "20220824115619-znl8oye",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-znl8oye",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.一主一从结构"
				}
			]
		},
		{
			"ID": "20220824115619-w352e7m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-w352e7m",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一主一从结构是最简单的复制拓扑结构，用于主节点出现宕机时从节点提供故障转移支持。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-2vyeaqk.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "2.一主多从结构"
				}
			]
		},
		{
			"ID": "20220824115619-aejcijm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-aejcijm",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一主多从结构（又称为星形拓扑结构）使得应用端可以利用多个从节点实现读写分离（见图6-5）。对于读占比较大的场景，可以把读命令发送到从节点来分担主节点压力。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-ypxnbnm.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "3.树状主从结构"
				}
			]
		},
		{
			"ID": "20220824115619-l0s0c0a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-l0s0c0a",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "树状主从结构（又称为树状拓扑结构）使得从节点不但可以复制主节点数据，同时可以作为其他从节点的主节点继续向下层复制。通过引入复制中间层，可以有效降低主节点负载和需要传送给从节点的数据量。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-mlizog7.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-l4m6lz5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-l4m6lz5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "15.Redis的主从复制原理了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-gaesxii",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-gaesxii",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis主从复制的工作流程大概可以分为如下几步："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-s8p494t.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-mjrgf9c",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-mjrgf9c",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-t5slhig",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-t5slhig",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-8z1yymz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-8z1yymz",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "保存主节点（master）信息 这一步只是保存主节点信息，保存主节点的ip和port。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-2gnippu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-2gnippu",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-5bl578x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-5bl578x",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主从建立连接 从节点（slave）发现新的主节点后，会尝试和主节点建立网络连接。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-3wwm8gn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-3wwm8gn",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-r2zgv9b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-r2zgv9b",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "发送ping命令 连接建立成功后从节点发送ping请求进行首次通信，主要是检测主从之间网络套接字是否可用、主节点当前是否可接受处理命令。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-mqgtj46",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-mqgtj46",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-c4ls7db",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-c4ls7db",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "权限验证 如果主节点要求密码验证，从节点必须正确的密码才能通过验证。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ie4lmjp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220824115619-ie4lmjp",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-u3qlu4r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-u3qlu4r",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同步数据集 主从复制连接正常通信后，主节点会把持有的数据全部发送给从节点。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-6kbnnm6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20220824115619-6kbnnm6",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-9z0l5q3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-9z0l5q3",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "命令持续复制 接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-l5dr2f2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-l5dr2f2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "16.说说主从数据同步的方式？"
				}
			]
		},
		{
			"ID": "20220824115619-t90ltyh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-t90ltyh",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis在2.8及以上版本使用psync命令完成主从数据同步，同步过程分为：全量复制和部分复制。"
				}
			]
		},
		{
			"ID": "20220824115619-0ykvklv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-0ykvklv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-0n1qyq4.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n主从数据同步方式"
				}
			]
		},
		{
			"ID": "20220824115619-xbl4u1o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-xbl4u1o",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "全量复制"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "一般用于初次复制场景，Redis早期支持的复制功能只有全量复制，它会把主节点全部数据一次性发送给从节点，当数据量较大时，会对主从节点和网络造成很大的开销。"
				}
			]
		},
		{
			"ID": "20220824115619-hlrftsi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-hlrftsi",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全量复制的完整运行流程如下："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-p2jww3b.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-e634kil",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-e634kil",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-x6ccm0k",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-x6ccm0k",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-60u67wj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-60u67wj",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "发送psync命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行ID，所以发送psync-1。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-wkwpfys",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-wkwpfys",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-hl1c3ie",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-hl1c3ie",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主节点根据psync-1解析出当前为全量复制，回复+FULLRESYNC响应。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-336tiqh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-336tiqh",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-sk4qla2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-sk4qla2",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从节点接收主节点的响应数据保存运行ID和偏移量offset"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-rfr39yq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-rfr39yq",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-w2ymblp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-w2ymblp",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主节点执行bgsave保存RDB文件到本地"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-3fnga16",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220824115619-3fnga16",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-y08fdpd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-y08fdpd",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主节点发送RDB文件给从节点，从节点把接收的RDB文件保存在本地并直接作为从节点的数据文件"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-bivuwm1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20220824115619-bivuwm1",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-wjj8ogf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-wjj8ogf",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于从节点开始接收RDB快照到接收完成期间，主节点仍然响应读写命令，因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完RDB文件后，主节点再把缓冲区内的数据发送给从节点，保证主从之间数据一致性。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-c0rj373",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20220824115619-c0rj373",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-dty14m0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-dty14m0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从节点接收完主节点传送来的全部数据后会清空自身旧数据"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ncc0lrk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "OC4=",
						"Num": 8
					},
					"Properties": {
						"id": "20220824115619-ncc0lrk",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-5eys0yh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-5eys0yh",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从节点清空数据后开始加载RDB文件"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-2b2px25",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "OS4=",
						"Num": 9
					},
					"Properties": {
						"id": "20220824115619-2b2px25",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-qsyc0pe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-qsyc0pe",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从节点成功加载完RDB后，如果当前节点开启了AOF持久化功能， 它会立刻做bgrewriteaof操作，为了保证全量复制后AOF持久化文件立刻可用。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ffzde10",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-ffzde10",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "部分复制"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "部分复制主要是Redis针对全量复制的过高开销做出的一种优化措施， 使用psync{runId}{offset}命令实现。当从节点（slave）正在复制主节点 （master）时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向 主节点要求补发丢失的命令数据，如果主节点的复制积压缓冲区内存在这部分数据则直接发送给从节点，这样就可以保持主从节点复制的一致性。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152147-yi62odu.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-ct3yono",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-ct3yono",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-5ns0igo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-5ns0igo",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-wii4qnv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-wii4qnv",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当主从节点之间网络出现中断时，如果超过repl-timeout时间，主节点会认为从节点故障并中断复制连接"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-4o1coly",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-4o1coly",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-4s659uu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-4s659uu",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内部存在的复制积压缓冲区，依然可以保存最近一段时间的写命令数据，默认最大缓存1MB。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-b67xw1d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-b67xw1d",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-oi9t5rh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-oi9t5rh",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当主从节点网络恢复后，从节点会再次连上主节点"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-puvt6nq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-puvt6nq",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-6om9f9x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-6om9f9x",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行ID。因此会把它们当作psync参数发送给主节点，要求进行部分复制操作。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-uklzs8b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220824115619-uklzs8b",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-4yo3jve",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-4yo3jve",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主节点接到psync命令后首先核对参数runId是否与自身一致，如果一 致，说明之前复制的是当前主节点；之后根据参数offset在自身复制积压缓冲区查找，如果偏移量之后的数据存在缓冲区中，则对从节点发送+CONTINUE响应，表示可以进行部分复制。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-0azat55",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20220824115619-0azat55",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-i4uuxan",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-i4uuxan",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-qrpfls3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-qrpfls3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "17.主从复制存在哪些问题呢？"
				}
			]
		},
		{
			"ID": "20220824115619-7uuahfy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-7uuahfy",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主从复制虽好，但也存在一些问题："
				}
			]
		},
		{
			"ID": "20220824115619-zi5so4p",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-zi5so4p",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-qxto2o3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-qxto2o3",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-sf4rhm0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-sf4rhm0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一旦主节点出现故障，需要手动将一个从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令其他从节点去复制新的主节点，整个过程都需要人工干预。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-myeledx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-myeledx",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-g95qnsa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-g95qnsa",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主节点的写能力受到单机的限制。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-d4941wa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-d4941wa",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-pzo0yzd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-pzo0yzd",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主节点的存储能力受到单机的限制。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-uyo7pq5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-uyo7pq5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一个问题是Redis的高可用问题，第二、三个问题属于Redis的分布式问题。"
				}
			]
		},
		{
			"ID": "20220824115619-dxmc7hd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-dxmc7hd",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "18.Redis Sentinel（哨兵）了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-7691wu3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-7691wu3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主从复制存在一个问题，没法完成自动故障转移。所以我们需要一个方案来完成自动故障转移，它就是Redis Sentinel（哨兵）。"
				}
			]
		},
		{
			"ID": "20220824115619-iwqj05e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-iwqj05e",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152148-aaf00s5.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\nRedis Sentinel"
				}
			]
		},
		{
			"ID": "20220824115619-d6m2cgj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-d6m2cgj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis Sentinel ，它由两部分组成，哨兵节点和数据节点："
				}
			]
		},
		{
			"ID": "20220824115619-0igevxo",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-0igevxo",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-set2v2a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-set2v2a",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-6200qvn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-6200qvn",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "哨兵节点："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的 Redis 节点，不存储数据，对数据节点进行监控。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ejl0h21",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-ejl0h21",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-r5hui49",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-r5hui49",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "数据节点："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 主节点和从节点都是数据节点；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-e8kaqju",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-e8kaqju",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在复制的基础上，哨兵实现了 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "自动化的故障恢复"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 功能，下面是官方对于哨兵功能的描述："
				}
			]
		},
		{
			"ID": "20220824115619-o1vilsp",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-o1vilsp",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-vasta07",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-vasta07",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-8ha462z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-8ha462z",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "监控（Monitoring）："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 哨兵会不断地检查主节点和从节点是否运作正常。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-3kaxhds",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-3kaxhds",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-y0xrlgz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-y0xrlgz",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "自动故障转移（Automatic failover）："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 当 "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "主节点"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 不能正常工作时，哨兵会开始  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "自动故障转移操作"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，它会将失效主节点的其中一个  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "从节点升级为新的主节点"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，并让其他从节点改为复制新的主节点。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-y73k7sz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-y73k7sz",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-zonh5by",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-zonh5by",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "配置提供者（Configuration provider）："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 客户端在初始化时，通过连接哨兵来获得当前 Redis 服务的主节点地址。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-5yadu4w",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-5yadu4w",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-7w2jml4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-7w2jml4",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "通知（Notification）："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 哨兵可以将故障转移的结果发送给客户端。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-9q0tzr1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-9q0tzr1",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移。而配置提供者和通知功能，则需要在与客户端的交互中才能体现。"
				}
			]
		},
		{
			"ID": "20220824115619-vs14ybs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-vs14ybs",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "19.Redis Sentinel（哨兵）实现原理知道吗？"
				}
			]
		},
		{
			"ID": "20220824115619-082v5nr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-082v5nr",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "哨兵模式是通过哨兵节点完成对数据节点的监控、下线、故障转移。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152148-nm91m7s.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-ucf7qcw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-ucf7qcw",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-2nxrtup",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-2nxrtup",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-dibh3au",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-dibh3au",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "定时监控"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152148-4grnpmq.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "Redis Sentinel通过三个定时监控任务完成对各个节点发现和监控："
								}
							]
						},
						{
							"ID": "20220824115619-0lqfsvd",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20220824115619-0lqfsvd",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"ID": "20220824115619-v0jqq0g",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20220824115619-v0jqq0g",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-x2ah1gv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-x2ah1gv",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "每隔10秒，每个Sentinel节点会向主节点和从节点发送info命令获取最新的拓扑结构"
												}
											]
										}
									]
								},
								{
									"ID": "20220824115619-2n4z7lj",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20220824115619-2n4z7lj",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-2e39n34",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-2e39n34",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "每隔2秒，每个Sentinel节点会向Redis数据节点的__sentinel__：hello 频道上发送该Sentinel节点对于主节点的判断以及当前Sentinel节点的信息"
												}
											]
										}
									]
								},
								{
									"ID": "20220824115619-ziy4pw3",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20220824115619-ziy4pw3",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-2bov0fi",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-2bov0fi",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "每隔1秒，每个Sentinel节点会向主节点、从节点、其余Sentinel节点发送一条ping命令做一次心跳检测，来确认这些节点当前是否可达"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-80eceei",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-80eceei",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-dl01whu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-dl01whu",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "主观下线和客观下线"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "主观下线就是哨兵节点认为某个节点有问题，客观下线就是超过一定数量的哨兵节点认为主节点有问题。"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152148-l1svvql.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-phiqrbz",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-phiqrbz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-6ab8bew",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-6ab8bew",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-twcxfip",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-twcxfip",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主观下线 每个Sentinel节点会每隔1秒对主节点、从节点、其他Sentinel节点发送ping命令做心跳检测，当这些节点超过 down-after-milliseconds没有进行有效回复，Sentinel节点就会对该节点做失败判定，这个行为叫做主观下线。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-kgck7jl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-kgck7jl",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-baqedv3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-baqedv3",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "客观下线 当Sentinel主观下线的节点是主节点时，该Sentinel节点会通过sentinel is- master-down-by-addr命令向其他Sentinel节点询问对主节点的判断，当超过 \u003cquorum\u003e个数，Sentinel节点认为主节点确实有问题，这时该Sentinel节点会做出客观下线的决定"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ppk60i8",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-ppk60i8",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-spv55vo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-spv55vo",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-xoyjlfa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-xoyjlfa",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "领导者Sentinel节点选举"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "Sentinel节点之间会做一个领导者选举的工作，选出一个Sentinel节点作为领导者进行故障转移的工作。Redis使用了Raft算法实现领导者选举。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-nr1s5fp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-nr1s5fp",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-yas6cc6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-yas6cc6",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "故障转移"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20220824115619-5ua4akk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-5ua4akk",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "领导者选举出的Sentinel节点负责故障转移，过程如下："
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152148-re37odz.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"ID": "20220824115619-9dqpgov",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20220824115619-9dqpgov",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"ID": "20220824115619-mpa0vez",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20220824115619-mpa0vez",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-l6matex",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-l6matex",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在从节点列表中选出一个节点作为新的主节点，这一步是相对复杂一些的一步"
												}
											]
										}
									]
								},
								{
									"ID": "20220824115619-an2b6pd",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20220824115619-an2b6pd",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-1140p0v",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-1140p0v",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Sentinel领导者节点会对第一步选出来的从节点执行slaveof no one命令让其成为主节点"
												}
											]
										}
									]
								},
								{
									"ID": "20220824115619-2mr3shj",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20220824115619-2mr3shj",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-th3d1ml",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-th3d1ml",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Sentinel领导者节点会向剩余的从节点发送命令，让它们成为新主节点的从节点"
												}
											]
										}
									]
								},
								{
									"ID": "20220824115619-hw3zo22",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20220824115619-hw3zo22",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-3fy0a54",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-3fy0a54",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Sentinel节点集合会将原来的主节点更新为从节点，并保持着对其关注，当其恢复后命令它去复制新的主节点"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-t8ahs4c",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-t8ahs4c",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "20.领导者Sentinel节点选举了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-yi0zi9k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-yi0zi9k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis使用了Raft算法实 现领导者选举，大致流程如下："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152148-ilbmtm1.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-5ikjcrq",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-5ikjcrq",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-dixb2sg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-dixb2sg",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-zh2gubl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-zh2gubl",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每个在线的Sentinel节点都有资格成为领导者，当它确认主节点主观 下线时候，会向其他Sentinel节点发送sentinel is-master-down-by-addr命令， 要求将自己设置为领导者。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-bczttqj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-bczttqj",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-sxbeaum",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-sxbeaum",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "收到命令的Sentinel节点，如果没有同意过其他Sentinel节点的sentinel is-master-down-by-addr命令，将同意该请求，否则拒绝。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-i3nx5da",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-i3nx5da",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-mvoo5cz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-mvoo5cz",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果该Sentinel节点发现自己的票数已经大于等于max（quorum， num（sentinels）/2+1），那么它将成为领导者。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-lgxvrr1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-lgxvrr1",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-2yednzy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-2yednzy",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果此过程没有选举出领导者，将进入下一次选举。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-s3utyrg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-s3utyrg",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "21.新的主节点是怎样被挑选出来的？"
				}
			]
		},
		{
			"ID": "20220824115619-3s3mc3i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-3s3mc3i",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "选出新的主节点，大概分为这么几步："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152148-npdc5lu.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-y0u4axh",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-y0u4axh",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-jditqa3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-jditqa3",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ny17a5u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ny17a5u",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "过滤：“不健康”（主观下线、断线）、5秒内没有回复过Sentinel节 点ping响应、与主节点失联超过down-after-milliseconds*10秒。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-yoayzec",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-yoayzec",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-na8kia1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-na8kia1",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "选择slave-priority（从节点优先级）最高的从节点列表，如果存在则返回，不存在则继续。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-1g5fog7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-1g5fog7",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-6rd9mjk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-6rd9mjk",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "选择复制偏移量最大的从节点（复制的最完整），如果存在则返 回，不存在则继续。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-cttf9nu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-cttf9nu",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ke1t1p0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ke1t1p0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "选择runid最小的从节点。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-3ilza8p",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-3ilza8p",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "22.Redis 集群了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-xa8h893",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-xa8h893",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "前面说到了主从存在高可用和分布式的问题，哨兵解决了高可用的问题，而集群就是终极方案，一举解决高可用和分布式问题。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152148-wr5vsko.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-e06ccwl",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-e06ccwl",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-6phzvjy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-6phzvjy",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-klysnp9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-klysnp9",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "数据分区："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 数据分区 "
								},
								{
									"Type": "NodeEmphasis",
									"Data": "em",
									"Children": [
										{
											"Type": "NodeEmA6kOpenMarker",
											"Data": "*"
										},
										{
											"Type": "NodeText",
											"Data": "(或称数据分片)"
										},
										{
											"Type": "NodeEmA6kCloseMarker",
											"Data": "*"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 是集群最核心的功能。集群将数据分散到多个节点，一方面 突破了 Redis 单机内存大小的限制， "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "存储容量大大增加"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ；"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "另一方面"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 每个主节点都可以对外提供读服务和写服务， "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "大大提高了集群的响应能力"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-oxadivj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-oxadivj",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-1e3jzd2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-1e3jzd2",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "高可用："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 集群支持主从复制和主节点的 "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "自动故障转移"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "  "
								},
								{
									"Type": "NodeEmphasis",
									"Data": "em",
									"Children": [
										{
											"Type": "NodeEmA6kOpenMarker",
											"Data": "*"
										},
										{
											"Type": "NodeText",
											"Data": "（与哨兵类似）"
										},
										{
											"Type": "NodeEmA6kCloseMarker",
											"Data": "*"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，当任一节点发生故障时，集群仍然可以对外提供服务。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-srzfmn0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-srzfmn0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "23.集群中数据如何分区？"
				}
			]
		},
		{
			"ID": "20220824115619-qo018c1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-qo018c1",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分布式的存储中，要把数据集按照分区规则映射到多个节点，常见的数据分区规则三种："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152148-re933s3.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-397ewlq",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-397ewlq",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方案一：节点取余分区"
				}
			]
		},
		{
			"ID": "20220824115619-33y10es",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-33y10es",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "节点取余分区，非常好理解，使用特定的数据，比如Redis的键，或者用户ID之类，对响应的hash值取余：hash（key）%N，来确定数据映射到哪一个节点上。"
				}
			]
		},
		{
			"ID": "20220824115619-nutm87k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-nutm87k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不过该方案最大的问题是，当节点数量变化时，如扩容或收缩节点，数据节点映射关 系需要重新计算，会导致数据的重新迁移。"
				}
			]
		},
		{
			"ID": "20220824115619-tgek8r5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-tgek8r5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152148-3tc0d86.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n节点取余分区"
				}
			]
		},
		{
			"ID": "20220824115619-t5o3e3a",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-t5o3e3a",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方案二：一致性哈希分区"
				}
			]
		},
		{
			"ID": "20220824115619-a70jk16",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-a70jk16",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将整个 Hash 值空间组织成一个虚拟的圆环，然后将缓存节点的 IP 地址或者主机名做 Hash 取值后，放置在这个圆环上。当我们需要确定某一个 Key 需 要存取到哪个节点上的时候，先对这个 Key 做同样的 Hash 取值，确定在环上的位置，然后按照顺时针方向在环上“行走”，遇到的第一个缓存节点就是要访问的节点。"
				}
			]
		},
		{
			"ID": "20220824115619-ybte285",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-ybte285",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如说下面 这张图里面，Key 1 和 Key 2 会落入到 Node 1 中，Key 3、Key 4 会落入到 Node 2 中，Key 5 落入到 Node 3 中，Key 6 落入到 Node 4 中。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152148-d8t7wog.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-ts90p5h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-ts90p5h",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种方式相比节点取余最大的好处在于加入和删除节点只影响哈希环中 相邻的节点，对其他节点无影响。"
				}
			]
		},
		{
			"ID": "20220824115619-3tjmhde",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-3tjmhde",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但它还是存在问题："
				}
			]
		},
		{
			"ID": "20220824115619-kmb68kh",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-kmb68kh",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-s45hfzw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-s45hfzw",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-l1fa0k0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-l1fa0k0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存节点在圆环上分布不平均，会造成部分缓存节点的压力较大"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-cw8vb12",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-cw8vb12",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-dvclfzv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-dvclfzv",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当某个节点故障时，这个节点所要承担的所有访问都会被顺移到另一个节点上，会对后面这个节点造成力。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-fsoqg4k",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-fsoqg4k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方案三：虚拟槽分区"
				}
			]
		},
		{
			"ID": "20220824115619-d5khm0z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-d5khm0z",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个方案 一致性哈希分区的基础上，引入了 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "虚拟节点"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的概念。Redis 集群使用的便是该方案，其中的虚拟节点称为  "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "槽（slot）"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 。槽是介于数据和实际节点之间的虚拟概念，每个实际节点包含一定数量的槽，每个槽包含哈希值在一定范围内的数据。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152148-rpax63w.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-qosfhvv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-qosfhvv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在使用了槽的一致性哈希分区中，槽是数据管理和迁移的基本单位。槽解耦了数据和实际节点 之间的关系，增加或删除节点对系统的影响很小。仍以上图为例，系统中有 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "4"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 个实际节点，假设为其分配 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "16"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 个槽(0-15)；"
				}
			]
		},
		{
			"ID": "20220824115619-q4agtl0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-q4agtl0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-au930fh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-au930fh",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-jk8lr45",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-jk8lr45",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "槽 0-3 位于 node1；4-7 位于 node2；以此类推...."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-c3duoss",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-c3duoss",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果此时删除 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "node2"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，只需要将槽 4-7 重新分配即可，例如槽 4-5 分配给 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "node1"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，槽 6 分配给 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "node3"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，槽 7 分配给 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "node4"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，数据在其他节点的分布仍然较为均衡。"
				}
			]
		},
		{
			"ID": "20220824115619-i3qbtfa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-i3qbtfa",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "24.能说说Redis集群的原理吗？"
				}
			]
		},
		{
			"ID": "20220824115619-atfzint",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-atfzint",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis集群通过数据分区来实现数据的分布式存储，通过自动故障转移实现高可用。"
				}
			]
		},
		{
			"ID": "20220824115619-k2f003l",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-k2f003l",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集群创建"
				}
			]
		},
		{
			"ID": "20220824115619-rw8wh5p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-rw8wh5p",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数据分区是在集群创建的时候完成的。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152149-stlynvi.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-nrlge2h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-nrlge2h",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "设置节点"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "Redis集群一般由多个节点组成，节点数量至少为6个才能保证组成完整高可用的集群。每个节点需要开启配置cluster-enabled yes，让Redis运行在集群模式下。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152149-jhbvzkb.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "节点握手"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "节点握手是指一批运行在集群模式下的节点通过Gossip协议彼此通信， 达到感知对方的过程。节点握手是集群彼此通信的第一步，由客户端发起命 令：cluster meet{ip}{port}。完成节点握手之后，一个个的Redis节点就组成了一个多节点的集群。"
				}
			]
		},
		{
			"ID": "20220824115619-mvcojtx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-mvcojtx",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "分配槽（slot）"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " Redis集群把所有的数据映射到16384个槽中。每个节点对应若干个槽，只有当节点分配了槽，才能响应和这些槽关联的键命令。通过 cluster addslots命令为节点分配槽。"
				}
			]
		},
		{
			"ID": "20220824115619-i3qwgdi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-i3qwgdi",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152149-tfyy3j0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n分配槽"
				}
			]
		},
		{
			"ID": "20220824115619-s31ymwp",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-s31ymwp",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "故障转移"
				}
			]
		},
		{
			"ID": "20220824115619-erxw8m4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-erxw8m4",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis集群的故障转移和哨兵的故障转移类似，但是Redis集群中所有的节点都要承担状态维护的任务。"
				}
			]
		},
		{
			"ID": "20220824115619-8x2x13x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-8x2x13x",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "故障发现"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "Redis集群内节点通过ping/pong消息实现节点通信，集群中每个节点都会定期向其他节点发送ping消息，接收节点回复pong 消息作为响应。如果在cluster-node-timeout时间内通信一直失败，则发送节 点会认为接收节点存在故障，把接收节点标记为主观下线（pfail）状态。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152149-kmbdvqe.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "当某个节点判断另一个节点主观下线后，相应的节点状态会跟随消息在集群内传播。通过Gossip消息传播，集群内节点不断收集到故障节点的下线报告。当 半数以上持有槽的主节点都标记某个节点是主观下线时。触发客观下线流程。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152149-jixu2xp.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-yuf5r0j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-yuf5r0j",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "故障恢复"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-igc9lbp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-igc9lbp",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "故障节点变为客观下线后，如果下线节点是持有槽的主节点则需要在它 的从节点中选出一个替换它，从而保证集群的高可用。"
				}
			]
		},
		{
			"ID": "20220824115619-159px3n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-159px3n",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152149-2opyrw8.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n故障恢复流程"
				}
			]
		},
		{
			"ID": "20220824115619-chzg4md",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-chzg4md",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-ks4h40x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-ks4h40x",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-iqnkjhb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-iqnkjhb",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "资格检查 每个从节点都要检查最后与主节点断线时间，判断是否有资格替换故障 的主节点。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-m27eh6k",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-m27eh6k",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-tjzdst0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-tjzdst0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "准备选举时间 当从节点符合故障转移资格后，更新触发故障选举的时间，只有到达该 时间后才能执行后续流程。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-bcf79ss",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-bcf79ss",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-rs9jlna",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-rs9jlna",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "发起选举 当从节点定时任务检测到达故障选举时间（failover_auth_time）到达后，发起选举流程。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-aypeevi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-aypeevi",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-r6jvhm1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-r6jvhm1",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "选举投票 持有槽的主节点处理故障选举消息。投票过程其实是一个领导者选举的过程，如集群内有N个持有槽的主节 点代表有N张选票。由于在每个配置纪元内持有槽的主节点只能投票给一个 从节点，因此只能有一个从节点获得N/2+1的选票，保证能够找出唯一的从节点。"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152149-nf7ljwt.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-nlir7h4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220824115619-nlir7h4",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-s4zldby",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-s4zldby",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "替换主节点 当从节点收集到足够的选票之后，触发替换主节点操作。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-frn928z",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-frn928z",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-05wq8qs",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-05wq8qs",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "部署Redis集群至少需要几个物理节点？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-4iiwc0e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-4iiwc0e",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在投票选举的环节，故障主节点也算在投票数内，假设集群内节点规模是3主3从，其中有2 个主节点部署在一台机器上，当这台机器宕机时，由于从节点无法收集到 3/2+1个主节点选票将导致故障转移失败。这个问题也适用于故障发现环节。因此部署集群时所有主节点最少需要部署在3台物理机上才能避免单点问题。"
				}
			]
		},
		{
			"ID": "20220824115619-kxu9qij",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-kxu9qij",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "25.说说集群的伸缩？"
				}
			]
		},
		{
			"ID": "20220824115619-rbltede",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-rbltede",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis集群提供了灵活的节点扩容和收缩方案，可以在不影响集群对外服务的情况下，为集群添加节点进行扩容也可以下线部分节点进行缩容。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152149-37velf0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "其实，集群扩容和缩容的关键点，就在于槽和节点的对应关系，扩容和缩容就是将一部分"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "槽"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "数据"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "迁移给新节点。"
				}
			]
		},
		{
			"ID": "20220824115619-6oq2xos",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-6oq2xos",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如下面一个集群，每个节点对应若干个槽，每个槽对应一定的数据，如果希望加入1个节点希望实现集群扩容时，需要通过相关命令把一部分槽和内容迁移给新节点。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-96x56gf.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "缩容也是类似，先把槽和数据迁移到其它节点，再把对应的节点下线。"
				}
			]
		},
		{
			"ID": "20220824115619-2v1ep2q",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220824115619-2v1ep2q",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存设计"
				}
			]
		},
		{
			"ID": "20220824115619-1qphcno",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-1qphcno",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "26.什么是缓存击穿、缓存穿透、缓存雪崩？"
				}
			]
		},
		{
			"ID": "20220824115619-6lhf1y4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-6lhf1y4",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "PS:这是多年黄历的老八股了，一定要理解清楚。"
				}
			]
		},
		{
			"ID": "20220824115619-1ult65k",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-1ult65k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存击穿"
				}
			]
		},
		{
			"ID": "20220824115619-8qgpjh2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-8qgpjh2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个并发访问量比较大的key在某个时间过期，导致所有的请求直接打在DB上。"
				}
			]
		},
		{
			"ID": "20220824115619-l9k7tas",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-l9k7tas",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-7kctjr5.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "解决⽅案："
				}
			]
		},
		{
			"ID": "20220824115619-2mebj79",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-2mebj79",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-n4ecvam",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-n4ecvam",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-djjsg70",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-djjsg70",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加锁更新，⽐如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写⼊缓存，再返回给⽤户，这样后⾯的请求就可以从缓存中拿到数据了。"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152150-yy2wjus.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-r1ub0zh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-r1ub0zh",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-97ikqw1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-97ikqw1",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将过期时间组合写在value中，通过异步的⽅式不断的刷新过期时间，防⽌此类现象。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-76qnv3a",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-76qnv3a",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存穿透"
				}
			]
		},
		{
			"ID": "20220824115619-xvv3hq2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-xvv3hq2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存穿透指的查询缓存和数据库中都不存在的数据，这样每次请求直接打到数据库，就好像缓存不存在一样。"
				}
			]
		},
		{
			"ID": "20220824115619-y0sxj4m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-y0sxj4m",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-lg1miul.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "缓存穿透将导致不存在的数据每次请求都要到存储层去查询，失去了缓存保护后端存储的意义。"
				}
			]
		},
		{
			"ID": "20220824115619-loetn6m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-loetn6m",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存穿透可能会使后端存储负载加大，如果发现大量存储层空命中，可能就是出现了缓存穿透问题。"
				}
			]
		},
		{
			"ID": "20220824115619-towfino",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-towfino",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存穿透可能有两种原因："
				}
			]
		},
		{
			"ID": "20220824115619-szxzr2p",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-szxzr2p",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-ac6jtjx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-ac6jtjx",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-zj75jsa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-zj75jsa",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "自身业务代码问题"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-9q1cff8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-9q1cff8",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-jzijczl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-jzijczl",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "恶意攻击，爬虫造成空命中"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-rrom7kt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-rrom7kt",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它主要有两种解决办法："
				}
			]
		},
		{
			"ID": "20220824115619-367bfud",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-367bfud",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-6qhqb8s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-6qhqb8s",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ywbtm1o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ywbtm1o",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "缓存空值/默认值"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-sumn1xp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-sumn1xp",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一种方式是在数据库不命中之后，把一个空对象或者默认值保存到缓存，之后再访问这个数据，就会从缓存中获取，这样就保护了数据库。"
				}
			]
		},
		{
			"ID": "20220824115619-mm8aepv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-mm8aepv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-qt19m9v.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n缓存空值/默认值"
				}
			]
		},
		{
			"ID": "20220824115619-3xyrjm2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-3xyrjm2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存空值有两大问题："
				}
			]
		},
		{
			"ID": "20220824115619-9l0s3sl",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-9l0s3sl",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-wjvptfr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-wjvptfr",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-4z452vs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-4z452vs",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间（如果是攻击，问题更严重），比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-hiqxu3e",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-hiqxu3e",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-sqf6igd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-sqf6igd",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致。这时候可以利用消息队列或者其它异步方式清理缓存中的空对象。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ustqomb",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-ustqomb",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-ea5fcvo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-ea5fcvo",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-e1f1xee",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-e1f1xee",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "布隆过滤器"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "除了缓存空对象，我们还可以在存储和缓存之前，加一个布隆过滤器，做一层过滤。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-d5j399g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-d5j399g",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "布隆过滤器里会保存数据是否存在，如果判断数据不不能再，就不会访问存储。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-8ume5hp.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "两种解决方案的对比："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-qqqzaqw.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-encigb9",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-encigb9",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存雪崩"
				}
			]
		},
		{
			"ID": "20220824115619-rcdgswt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-rcdgswt",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "某⼀时刻发⽣⼤规模的缓存失效的情况，例如缓存服务宕机、大量key在同一时间过期，这样的后果就是⼤量的请求进来直接打到DB上，可能导致整个系统的崩溃，称为雪崩。"
				}
			]
		},
		{
			"ID": "20220824115619-0y2p6q8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-0y2p6q8",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-quhadlr.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "缓存雪崩是三大缓存问题里最严重的一种，我们来看看怎么预防和处理。"
				}
			]
		},
		{
			"ID": "20220824115619-cz0804m",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-cz0804m",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-6l0qdae",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-6l0qdae",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-7p4lmm0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-7p4lmm0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "提高缓存可用性"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-zf5rznq",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-zf5rznq",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-xo068u9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-xo068u9",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-8xam2ri",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-8xam2ri",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "集群部署：通过集群来提升缓存的可用性，可以利用Redis本身的Redis Cluster或者第三方集群方案如Codis等。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-bfikt5y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-bfikt5y",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-bw2pxr7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-bw2pxr7",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "多级缓存：设置多级缓存，第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-2h1r9ge",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-2h1r9ge",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-s4bgbsi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-s4bgbsi",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-4b4hrti",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-4b4hrti",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "过期时间"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-zx3ghti",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-zx3ghti",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-c0l0y83",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-c0l0y83",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-5oixce8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-5oixce8",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "均匀过期：为了避免大量的缓存在同一时间过期，可以把不同的 key 过期时间随机生成，避免过期时间太过集中。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-6x3sv0h",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-6x3sv0h",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-zbnztw1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-zbnztw1",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "热点数据永不过期。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-rzx7xme",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-rzx7xme",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-mznf3sy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-mznf3sy",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-fyu7qq2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-fyu7qq2",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "熔断降级"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-yenyq42",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-yenyq42",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-aiibu8v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-aiibu8v",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-7e4wilt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-7e4wilt",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "服务熔断：当缓存服务器宕机或超时响应时，为了防止整个系统出现雪崩，暂时停止业务服务访问缓存系统。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-obw943v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-obw943v",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-dwy57qm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-dwy57qm",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "服务降级：当出现大量缓存失效，而且处在高并发高负荷的情况下，在业务系统内部暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的 fallback（退路）错误处理信息。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-tyh1mwx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-tyh1mwx",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "27.能说说布隆过滤器吗？"
				}
			]
		},
		{
			"ID": "20220824115619-mzvhckn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-mzvhckn",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "布隆过滤器，它是一个连续的数据结构，每个存储位存储都是一个"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "bit"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，即"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "0"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "或者"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "1"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ", 来标识数据是否存在。"
				}
			]
		},
		{
			"ID": "20220824115619-nl5vdfk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-nl5vdfk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "存储数据的时时候，使用K个不同的哈希函数将这个变量映射为bit列表的的K个点，把它们置为1。"
				}
			]
		},
		{
			"ID": "20220824115619-i4kvv4k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-i4kvv4k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-0lx10z9.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "我们判断缓存key是否存在，同样，K个哈希函数，映射到bit列表上的K个点，判断是不是1："
				}
			]
		},
		{
			"ID": "20220824115619-1et4az5",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-1et4az5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-r2jaf1b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-r2jaf1b",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-i1jjny0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-i1jjny0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果全不是1，那么key不存在；"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-fazsrw0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-fazsrw0",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-9cvaeuw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-9cvaeuw",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果都是1，也只是表示key可能存在。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ljxfqbc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-ljxfqbc",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "布隆过滤器也有一些缺点："
				}
			]
		},
		{
			"ID": "20220824115619-lb38x5k",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-lb38x5k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-r588ti0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-r588ti0",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-m8agio4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-m8agio4",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "它在判断元素是否在集合中时是有一定错误几率，因为哈希算法有一定的碰撞的概率。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-vqio794",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-vqio794",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-dek15a8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-dek15a8",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不支持删除元素。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-hiyu8hy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-hiyu8hy",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "28.如何保证缓存和数据库数据的⼀致性？"
				}
			]
		},
		{
			"ID": "20220824115619-tg6ysng",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-tg6ysng",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "根据CAP理论，在保证可用性和分区容错性的前提下，无法保证一致性，所以缓存和数据库的绝对一致是不可能实现的，只能尽可能保存缓存和数据库的最终一致性。"
				}
			]
		},
		{
			"ID": "20220824115619-ldq5a85",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-ldq5a85",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "选择合适的缓存更新策略"
				}
			]
		},
		{
			"ID": "20220824115619-mhdq2ub",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-mhdq2ub",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "1. 删除缓存而不是更新缓存"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-6mkd3t5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-6mkd3t5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当一个线程对缓存的key进行写操作的时候，如果其它线程进来读数据库的时候，读到的就是脏数据，产生了数据不一致问题。"
				}
			]
		},
		{
			"ID": "20220824115619-apsz16l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-apsz16l",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相比较而言，删除缓存的速度比更新缓存的速度快很多，所用时间相对也少很多，读脏数据的概率也小很多。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-qs6u6dr.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-xw50tx0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-xw50tx0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-g1aw1rb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-g1aw1rb",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-8eh24z8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-8eh24z8",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "先更数据，后删缓存"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "先更数据库还是先删缓存？这是一个问题。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-pn09k70",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-pn09k70",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "更新数据，耗时可能在删除缓存的百倍以上。在缓存中不存在对应的key，数据库又没有完成更新的时候，如果有线程进来读取数据，并写入到缓存，那么在更新成功之后，这个key就是一个脏数据。"
				}
			]
		},
		{
			"ID": "20220824115619-f0s2cyp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-f0s2cyp",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "毫无疑问，先删缓存，再更数据库，缓存中key不存在的时间的时间更长，有更大的概率会产生脏数据。"
				}
			]
		},
		{
			"ID": "20220824115619-b9zmpui",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-b9zmpui",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152150-7765k5w.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "目前最流行的缓存读写策略cache-aside-pattern就是采用先更数据库，再删缓存的方式。"
				}
			]
		},
		{
			"ID": "20220824115619-ig62n0q",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220824115619-ig62n0q",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存不一致处理"
				}
			]
		},
		{
			"ID": "20220824115619-3k0h0pc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-3k0h0pc",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果不是并发特别高，对缓存依赖性很强，其实一定程序的不一致是可以接受的。"
				}
			]
		},
		{
			"ID": "20220824115619-lnriotn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-lnriotn",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是如果对一致性要求比较高，那就得想办法保证缓存和数据库中数据一致。"
				}
			]
		},
		{
			"ID": "20220824115619-cllbwan",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-cllbwan",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存和数据库数据不一致常见的两种原因："
				}
			]
		},
		{
			"ID": "20220824115619-1ugsvel",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-1ugsvel",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-9a759y3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-9a759y3",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-oceffu5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-oceffu5",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存key删除失败"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-9wp402u",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-9wp402u",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-g3dhgg4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-g3dhgg4",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "并发导致写入了脏数据"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-w7aer04",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-w7aer04",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-s3d2x8x.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n缓存一致性"
				}
			]
		},
		{
			"ID": "20220824115619-aum1xrh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-aum1xrh",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "消息队列保证key被删除"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "可以引入消息队列，把要删除的key或者删除失败的key丢尽消息队列，利用消息队列的重试机制，重试删除对应的key。"
				}
			]
		},
		{
			"ID": "20220824115619-y7u9hav",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-y7u9hav",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-bn32xn8.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "这种方案看起来不错，缺点是对业务代码有一定的侵入性。"
				}
			]
		},
		{
			"ID": "20220824115619-fqqpkc3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-fqqpkc3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "数据库订阅+消息队列保证key被删除"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "可以用一个服务（比如阿里的 canal）去监听数据库的binlog，获取需要操作的数据。"
				}
			]
		},
		{
			"ID": "20220824115619-pmq0x1j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-pmq0x1j",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后用一个公共的服务获取订阅程序传来的信息，进行缓存删除操作。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-ecqu959.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "这种方式降低了对业务的侵入，但其实整个系统的复杂度是提升的，适合基建完善的大厂。"
				}
			]
		},
		{
			"ID": "20220824115619-lf66mdp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-lf66mdp",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "延时双删防止脏数据"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "还有一种情况，是在缓存不存在的时候，写入了脏数据，这种情况在先删缓存，再更数据库的缓存更新策略下发生的比较多，解决方案是延时双删。"
				}
			]
		},
		{
			"ID": "20220824115619-2ftn91q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-2ftn91q",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单说，就是在第一次删除缓存之后，过了一段时间之后，再次删除缓存。"
				}
			]
		},
		{
			"ID": "20220824115619-7g65uu5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-7g65uu5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-uts5aig.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n延时双删"
				}
			]
		},
		{
			"ID": "20220824115619-sd15rjb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-sd15rjb",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种方式的延时时间设置需要仔细考量和测试。"
				}
			]
		},
		{
			"ID": "20220824115619-4v28b3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-4v28b3h",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "设置缓存过期时间兜底"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-9qkgkoz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-9qkgkoz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这是一个朴素但是有用的办法，给缓存设置一个合理的过期时间，即使发生了缓存数据不一致的问题，它也不会永远不一致下去，缓存过期的时候，自然又会恢复一致。"
				}
			]
		},
		{
			"ID": "20220824115619-djqqtb4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-djqqtb4",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "29.如何保证本地缓存和分布式缓存的一致？"
				}
			]
		},
		{
			"ID": "20220824115619-29n87bc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-29n87bc",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "PS:这道题面试很少问，但实际工作中很常见。"
				}
			]
		},
		{
			"ID": "20220824115619-6pbz6wl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-6pbz6wl",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在日常的开发中，我们常常采用两级缓存：本地缓存+分布式缓存。"
				}
			]
		},
		{
			"ID": "20220824115619-cy60ke2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-cy60ke2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所谓本地缓存，就是对应服务器的内存缓存，比如Caffeine，分布式缓存基本就是采用Redis。"
				}
			]
		},
		{
			"ID": "20220824115619-pw96gq0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-pw96gq0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么问题来了，本地缓存和分布式缓存怎么保持数据一致？"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-em473fa.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "Redis缓存，数据库发生更新，直接删除缓存的key即可，因为对于应用系统而言，它是一种中心化的缓存。"
				}
			]
		},
		{
			"ID": "20220824115619-kpvbd29",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-kpvbd29",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是本地缓存，它是非中心化的，散落在分布式服务的各个节点上，没法通过客户端的请求删除本地缓存的key，所以得想办法通知集群所有节点，删除对应的本地缓存key。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-4vx3zxv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-plndpum",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-plndpum",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以采用消息队列的方式："
				}
			]
		},
		{
			"ID": "20220824115619-u9am3kh",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-u9am3kh",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-eujfeu9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-eujfeu9",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-airjam1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-airjam1",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "采用Redis本身的Pub/Sub机制，分布式集群的所有节点订阅删除本地缓存频道，删除Redis缓存的节点，同事发布删除本地缓存消息，订阅者们订阅到消息后，删除对应的本地key。但是Redis的发布订阅不是可靠的，不能保证一定删除成功。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-auhjk9e",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-auhjk9e",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-a7lamxa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-a7lamxa",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "引入专业的消息队列，比如RocketMQ，保证消息的可靠性，但是增加了系统的复杂度。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-gzhm5nj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-gzhm5nj",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-2b6rh6p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-2b6rh6p",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置适当的过期时间兜底，本地缓存可以设置相对短一些的过期时间。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-rkw9kfv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-rkw9kfv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "30.怎么处理热key？"
				}
			]
		},
		{
			"ID": "20220824115619-5xkhmrz",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-5xkhmrz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-8ml4gtg",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-8ml4gtg",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "什么是热Key？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 所谓的热key，就是访问频率比较的key。"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-tc2lyye",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-tc2lyye",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如，热门新闻事件或商品，这类key通常有大流量的访问，对存储这类信息的 Redis来说，是不小的压力。"
				}
			]
		},
		{
			"ID": "20220824115619-n12xhfa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-n12xhfa",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假如Redis集群部署，热key可能会造成整体流量的不均衡，个别节点出现OPS过大的情况，极端情况下热点key甚至会超过 Redis本身能够承受的OPS。"
				}
			]
		},
		{
			"ID": "20220824115619-m57qkux",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-m57qkux",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-m6fd3sk",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-m6fd3sk",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "怎么处理热key？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-2o6t4w2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-2o6t4w2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-e7bf7s5.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "对热key的处理，最关键的是对热点key的监控，可以从这些端来监控热点key:"
				}
			]
		},
		{
			"ID": "20220824115619-xj5trxq",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-xj5trxq",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-fpkv8pa",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-fpkv8pa",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-o3rpl6b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-o3rpl6b",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "客户端 客户端其实是距离key“最近”的地方，因为Redis命令就是从客户端发出的，例如在客户端设置全局字典（key和调用次数），每次调用Redis命令时，使用这个字典进行记录。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-fm8mnzr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-fm8mnzr",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-hxayoud",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-hxayoud",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "代理端 像Twemproxy、Codis这些基于代理的Redis分布式架构，所有客户端的请求都是通过代理端完成的，可以在代理端进行收集统计。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-toqa8si",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-toqa8si",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-rip994n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-rip994n",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Redis服务端 使用monitor命令统计热点key是很多开发和运维人员首先想到，monitor命令可以监控到Redis执行的所有命令。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-bl010od",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-bl010od",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只要监控到了热key，对热key的处理就简单了："
				}
			]
		},
		{
			"ID": "20220824115619-6xtcusj",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-6xtcusj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-y923x7t",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-y923x7t",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-n75zyf3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-n75zyf3",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "把热key打散到不同的服务器，降低压⼒"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ayjtbm9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-ayjtbm9",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-79t7wex",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-79t7wex",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加⼊⼆级缓存，提前加载热key数据到内存中，如果redis宕机，⾛内存查询"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-2u12kkz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-2u12kkz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "31.缓存预热怎么做呢？"
				}
			]
		},
		{
			"ID": "20220824115619-50qux5h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-50qux5h",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所谓缓存预热，就是提前把数据库里的数据刷到缓存里，通常有这些方法："
				}
			]
		},
		{
			"ID": "20220824115619-s3t2w8j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-s3t2w8j",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、直接写个缓存刷新页面或者接口，上线时手动操作"
				}
			]
		},
		{
			"ID": "20220824115619-2tsvghk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-2tsvghk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、数据量不大，可以在项目启动的时候自动进行加载"
				}
			]
		},
		{
			"ID": "20220824115619-nl26yvt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-nl26yvt",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、定时任务刷新缓存."
				}
			]
		},
		{
			"ID": "20220824115619-v1hvayz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-v1hvayz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "32.热点key重建？问题？解决？"
				}
			]
		},
		{
			"ID": "20220824115619-gqiysiu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-gqiysiu",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "开发的时候一般使用“缓存+过期时间”的策略，既可以加速数据读写，又保证数据的定期更新，这种模式基本能够满足绝大部分需求。"
				}
			]
		},
		{
			"ID": "20220824115619-xwyhpgd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-xwyhpgd",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是有两个问题如果同时出现，可能就会出现比较大的问题："
				}
			]
		},
		{
			"ID": "20220824115619-osym3cr",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-osym3cr",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-fy0ll3s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-fy0ll3s",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-k8435bi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-k8435bi",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当前key是一个热点key（例如一个热门的娱乐新闻），并发量非常大。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-cqu7i9a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-cqu7i9a",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-vthfwxz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-vthfwxz",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "重建缓存不能在短时间完成，可能是一个复杂计算，例如复杂的 SQL、多次IO、多个依赖等。在缓存失效的瞬间，有大量线程来重建缓存，造成后端负载加大，甚至可能会让应用崩溃。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-jy1f9dm",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-jy1f9dm",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-nqy9h7y",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-nqy9h7y",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "怎么处理呢？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-rxqt6hd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-rxqt6hd",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要解决这个问题也不是很复杂，解决问题的要点在于："
				}
			]
		},
		{
			"ID": "20220824115619-jebmyua",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-jebmyua",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-gbsecyj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-gbsecyj",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-gcut5jq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-gcut5jq",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "减少重建缓存的次数。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-jwn2yzp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-jwn2yzp",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-9up3ofk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-9up3ofk",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数据尽可能一致。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-oyffla0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-oyffla0",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-yubl5zt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-yubl5zt",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "较少的潜在危险。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-08v59do",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-08v59do",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以一般采用如下方式："
				}
			]
		},
		{
			"ID": "20220824115619-i573g36",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-i573g36",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-wys66xo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-wys66xo",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ipk5dyr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ipk5dyr",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "互斥锁（mutex key） 这种方法只允许一个线程重建缓存，其他线程等待重建缓存的线程执行完，重新从缓存获取数据即可。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-5bcphum",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-5bcphum",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-wuo00bm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-wuo00bm",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "永远不过期 “永远不过期”包含两层意思："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ex9c7uz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-ex9c7uz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-pv6alj3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-pv6alj3",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-25h3b6g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-25h3b6g",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从缓存层面来看，确实没有设置过期时间，所以不会出现热点key过期后产生的问题，也就是“物理”不过期。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-khijvbu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-khijvbu",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-57k7xgr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-57k7xgr",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从功能层面来看，为每个value设置一个逻辑过期时间，当发现超过逻辑过期时间后，会使用单独的线程去构建缓存。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ycf8ntz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-ycf8ntz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "33.无底洞问题吗？如何解决？"
				}
			]
		},
		{
			"ID": "20220824115619-ucn5la4",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-ucn5la4",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-r7yej6r",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-r7yej6r",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "什么是无底洞问题？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-fka1vmv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-fka1vmv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2010年，Facebook的Memcache节点已经达到了3000个，承载着TB级别的缓存数据。但开发和运维人员发现了一个问题，为了满足业务要求添加了大量新Memcache节点，但是发现性能不但没有好转反而下降了，当时将这 种现象称为缓存的“ "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "无底洞"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ”现象。"
				}
			]
		},
		{
			"ID": "20220824115619-nd3ryc5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-nd3ryc5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么为什么会产生这种现象呢?"
				}
			]
		},
		{
			"ID": "20220824115619-cv1aijb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-cv1aijb",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通常来说添加节点使得Memcache集群 性能应该更强了，但事实并非如此。键值数据库由于通常采用哈希函数将 key映射到各个节点上，造成key的分布与业务无关，但是由于数据量和访问量的持续增长，造成需要添加大量节点做水平扩容，导致键值分布到更多的 节点上，所以无论是Memcache还是Redis的分布式，批量操作通常需要从不同节点上获取，相比于单机批量操作只涉及一次网络操作，分布式批量操作会涉及多次网络时间。"
				}
			]
		},
		{
			"ID": "20220824115619-mkj1ggw",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-mkj1ggw",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-07piryf",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-07piryf",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "无底洞问题如何优化呢？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-e8awzmk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-e8awzmk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先分析一下无底洞问题："
				}
			]
		},
		{
			"ID": "20220824115619-vehuq00",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-vehuq00",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-82v6ntr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-82v6ntr",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-mptlb4s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-mptlb4s",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "客户端一次批量操作会涉及多次网络操作，也就意味着批量操作会随着节点的增多，耗时会不断增大。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-09gn3g5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-09gn3g5",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-p20p5wl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-p20p5wl",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "网络连接数变多，对节点的性能也有一定影响。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-jy524do",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-jy524do",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常见的优化思路如下："
				}
			]
		},
		{
			"ID": "20220824115619-ei3xv9a",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-ei3xv9a",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-kukifnc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-kukifnc",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-strzq6q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-strzq6q",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "命令本身的优化，例如优化操作语句等。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-x2s3q01",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-x2s3q01",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-nt9zt6x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-nt9zt6x",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "减少网络通信次数。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-s7pvbuu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-s7pvbuu",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ivpnlxq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ivpnlxq",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "降低接入成本，例如客户端使用长连/连接池、NIO等。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-em6mxaa",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220824115619-em6mxaa",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis运维"
				}
			]
		},
		{
			"ID": "20220824115619-e89106n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-e89106n",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "34.Redis报内存不足怎么处理？"
				}
			]
		},
		{
			"ID": "20220824115619-s9ce3hr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-s9ce3hr",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis 内存不足有这么几种处理方式："
				}
			]
		},
		{
			"ID": "20220824115619-77ky6qv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-77ky6qv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-3roqorc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-3roqorc",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-kvj2huw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-kvj2huw",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "修改配置文件 redis.conf 的 maxmemory 参数，增加 Redis 可用内存"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-5ft4n3j",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-5ft4n3j",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-tekmej1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-tekmej1",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "也可以通过命令set maxmemory动态设置内存上限"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-if5qwdj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-if5qwdj",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ogb9zdw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ogb9zdw",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "修改内存淘汰策略，及时释放内存空间"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-qa9794i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-qa9794i",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-cyzlqdk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-cyzlqdk",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 Redis 集群模式，进行横向扩容。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-wpodg2z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-wpodg2z",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "35.Redis的过期数据回收策略有哪些？"
				}
			]
		},
		{
			"ID": "20220824115619-7p5q2se",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-7p5q2se",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis主要有2种过期数据回收策略："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-4fukjz2.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-7sgw0cp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-7sgw0cp",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "惰性删除"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-05yeo6w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-05yeo6w",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "惰性删除指的是当我们查询key的时候才对key进⾏检测，如果已经达到过期时间，则删除。显然，他有⼀个缺点就是如果这些过期的key没有被访问，那么他就⼀直⽆法被删除，⽽且⼀直占⽤内存。"
				}
			]
		},
		{
			"ID": "20220824115619-conwkcv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-conwkcv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "定期删除"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-8npv5sr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-8npv5sr",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定期删除指的是Redis每隔⼀段时间对数据库做⼀次检查，删除⾥⾯的过期key。由于不可能对所有key去做轮询来删除，所以Redis会每次随机取⼀些key去做检查和删除。"
				}
			]
		},
		{
			"ID": "20220824115619-upc6hid",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-upc6hid",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "36.Redis有哪些内存溢出控制/内存淘汰策略？"
				}
			]
		},
		{
			"ID": "20220824115619-rjsea7a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-rjsea7a",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis所用内存达到maxmemory上限时会触发相应的溢出控制策略，Redis支持六种策略："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-8k8pwi5.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-rkpw4j3",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-rkpw4j3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-sddoccs",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-sddoccs",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-sbuj220",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-sbuj220",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "noeviction：默认策略，不会删除任何数据，拒绝所有写入操作并返 回客户端错误信息，此 时Redis只响应读操作。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-3r99quj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-3r99quj",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-tan2ajm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-tan2ajm",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "volatile-lru：根据LRU算法删除设置了超时属性（expire）的键，直 到腾出足够空间为止。如果没有可删除的键对象，回退到noeviction策略。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-4gji9a8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-4gji9a8",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-sb7dprf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-sb7dprf",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性， 直到腾出足够空间为止。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-n2uz1xc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-n2uz1xc",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-kve6mok",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-kve6mok",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "allkeys-random：随机删除所有键，直到腾出足够空间为止。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-38waz3k",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220824115619-38waz3k",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-2ybrqvu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-2ybrqvu",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "volatile-random：随机删除过期键，直到腾出足够空间为止。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-pfhkr51",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20220824115619-pfhkr51",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-x81ot3e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-x81ot3e",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果 没有，回退到noeviction策略。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-guqy15w",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-guqy15w",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "37.Redis阻塞？怎么解决？"
				}
			]
		},
		{
			"ID": "20220824115619-4qefbq7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-4qefbq7",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis发生阻塞，可以从以下几个方面排查："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152151-r7g4bct.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-ww4binj",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-ww4binj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-g0obnru",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-g0obnru",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-42jjpd2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-42jjpd2",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "API或数据结构使用不合理"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20220824115619-ocuyjsd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ocuyjsd",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通常Redis执行命令速度非常快，但是不合理地使用命令，可能会导致执行速度很慢，导致阻塞，对于高并发的场景，应该尽量避免在大对象上执行算法复杂 度超过O（n）的命令。"
								}
							]
						},
						{
							"ID": "20220824115619-i16dbe6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-i16dbe6",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对慢查询的处理分为两步："
								}
							]
						},
						{
							"ID": "20220824115619-n7znsti",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20220824115619-n7znsti",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"ID": "20220824115619-high29p",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20220824115619-high29p",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-4g3uplx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-4g3uplx",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "发现慢查询：slowlog get{n}命令可以获取最近 的n条慢查询命令；"
												}
											]
										}
									]
								},
								{
									"ID": "20220824115619-pfx3h1p",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20220824115619-pfx3h1p",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-mo4dxzj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-mo4dxzj",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "发现慢查询后，可以从两个方向去优化慢查询：1）修改为低算法复杂度的命令，如hgetall改为hmget等，禁用keys、sort等命 令 2）调整大对象：缩减大对象数据或把大对象拆分为多个小对象，防止一次命令操作过多的数据。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-z8hp38u",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-z8hp38u",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-u0iqwiz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-u0iqwiz",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "CPU饱和的问题"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20220824115619-xp8um8h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-xp8um8h",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "单线程的Redis处理命令时只能使用一个CPU。而CPU饱和是指Redis单核CPU使用率跑到接近100%。"
								}
							]
						},
						{
							"ID": "20220824115619-wugnrq0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-wugnrq0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "针对这种情况，处理步骤一般如下："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-01wv625",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-01wv625",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-ljfgq3s",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-ljfgq3s",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ptm1jtf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ptm1jtf",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "判断当前Redis并发量是否已经达到极限，可以使用统计命令redis-cli-h{ip}-p{port}--stat获取当前 Redis使用情况"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-r8ppb8a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-r8ppb8a",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-ztqm916",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-ztqm916",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果Redis的请求几万+，那么大概就是Redis的OPS已经到了极限，应该做集群化水品扩展来分摊OPS压力"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-s63dbvq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-s63dbvq",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-zrg0nkt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-zrg0nkt",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果只有几百几千，那么就得排查命令和内存的使用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-fakm08z",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-fakm08z",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-ukkz4b2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-ukkz4b2",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-978vu8z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-978vu8z",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "持久化相关的阻塞"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20220824115619-j1i87ue",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-j1i87ue",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于开启了持久化功能的Redis节点，需要排查是否是持久化导致的阻塞。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ralxv3t",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-ralxv3t",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-jwef42r",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-jwef42r",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-g0o7asw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-g0o7asw",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "fork阻塞 fork操作发生在RDB和AOF重写时，Redis主线程调用fork操作产生共享 内存的子进程，由子进程完成持久化文件重写工作。如果fork操作本身耗时过长，必然会导致主线程的阻塞。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-e90uvul",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-e90uvul",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-scnq1bl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-scnq1bl",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AOF刷盘阻塞 当我们开启AOF持久化功能时，文件刷盘的方式一般采用每秒一次，后台线程每秒对AOF文件做fsync操作。当硬盘压力过大时，fsync操作需要等 待，直到写入完成。如果主线程发现距离上一次的fsync成功超过2秒，为了 数据安全性它会阻塞直到后台线程执行fsync操作完成。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ouf3h85",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-ouf3h85",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-v82k593",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-v82k593",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "HugePage写操作阻塞 对于开启Transparent HugePages的 操作系统，每次写命令引起的复制内存页单位由4K变为2MB，放大了512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-8y2xewt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-8y2xewt",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "38.大key问题了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-wyrb6aj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-wyrb6aj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis使用过程中，有时候会出现大key的情况， 比如："
				}
			]
		},
		{
			"ID": "20220824115619-qbcxt66",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-qbcxt66",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-0h37hs8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-0h37hs8",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-g4kh0eh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-g4kh0eh",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "单个简单的key存储的value很大，size超过10KB"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-k62g3cr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-k62g3cr",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-oqfitss",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-oqfitss",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "hash， set，zset，list 中存储过多的元素（以万为单位）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-1c6klgx",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-1c6klgx",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-dvk19nq",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-dvk19nq",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "大key会造成什么问题呢？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-y1l8z8c",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-y1l8z8c",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-2rv248b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-2rv248b",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-2cnwz9t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-2cnwz9t",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "客户端耗时增加，甚至超时"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-zhiq1bi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-zhiq1bi",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-z5b0tts",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-z5b0tts",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对大key进行IO操作时，会严重占用带宽和CPU"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-s2wpmvf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-s2wpmvf",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-0hanvfw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-0hanvfw",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "造成Redis集群中数据倾斜"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-0rcpqzu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-0rcpqzu",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-haufzhp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-haufzhp",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主动删除、被动删等，可能会导致阻塞"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ovk0thk",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-ovk0thk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-lniq3vm",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-lniq3vm",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "如何找到大key?"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-2hn1mbu",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-2hn1mbu",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-5boelmx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-5boelmx",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-d1g947e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-d1g947e",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "bigkeys命令：使用bigkeys命令以遍历的方式分析Redis实例中的所有Key，并返回整体统计信息与每个数据类型中Top1的大Key"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-0kcm07w",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-0kcm07w",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-y5mokvu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-y5mokvu",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "redis-rdb-tools：redis-rdb-tools是由Python写的用来分析Redis的rdb快照文件用的工具，它可以把rdb快照文件生成json文件或者生成报表用来分析Redis的使用详情。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-p2djqfj",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-p2djqfj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-u5a5vvz",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-u5a5vvz",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "如何处理大key?"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-uy28mfn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-uy28mfn",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152152-bpn7bi0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n大key处理"
				}
			]
		},
		{
			"ID": "20220824115619-j2lfvwg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-j2lfvwg",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-chdf5oa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-chdf5oa",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-y3kx17i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-y3kx17i",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "删除大key"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20220824115619-ahh0ypg",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20220824115619-ahh0ypg",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"ID": "20220824115619-zktmztk",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220824115619-zktmztk",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-ftr17qf",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-ftr17qf",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "当Redis版本大于4.0时，可使用UNLINK命令安全地删除大Key，该命令能够以非阻塞的方式，逐步地清理传入的Key。"
												}
											]
										}
									]
								},
								{
									"ID": "20220824115619-v3rk7a3",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220824115619-v3rk7a3",
										"updated": "20220824115619"
									},
									"Children": [
										{
											"ID": "20220824115619-8nxc202",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220824115619-8nxc202",
												"updated": "20220824115619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "当Redis版本小于4.0时，避免使用阻塞式命令KEYS，而是建议通过SCAN命令执行增量迭代扫描key，然后判断进行删除。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-qfevu2y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-qfevu2y",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-7w9qqzx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-7w9qqzx",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "压缩和拆分key"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-f439ydw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-f439ydw",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-mayqku8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-mayqku8",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当vaule是string时，比较难拆分，则使用序列化、压缩算法将key的大小控制在合理范围内，但是序列化和反序列化都会带来更多时间上的消耗。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-6oxyfuc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-6oxyfuc",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-xlh0dj4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-xlh0dj4",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当value是string，压缩之后仍然是大key，则需要进行拆分，一个大key分为不同的部分，记录每个部分的key，使用multiget等操作实现事务读取。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-0j69ar3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-0j69ar3",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-tjke1l6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-tjke1l6",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当value是list/set等集合类型时，根据预估的数据规模来进行分片，不同的元素计算后分到不同的片。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-wuvb166",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-wuvb166",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "39.Redis常见性能问题和解决方案？"
				}
			]
		},
		{
			"ID": "20220824115619-okc9cs4",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-okc9cs4",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-e1up2g5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-e1up2g5",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-fzeos5s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-fzeos5s",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Master 最好不要做任何持久化工作，包括内存快照和 AOF 日志文件，特别是不要启用内存快照做持久化。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-v6gz02k",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-v6gz02k",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-wxqzb9k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-wxqzb9k",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果数据比较关键，某个 Slave 开启 AOF 备份数据，策略为每秒同步一次。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-eloutai",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-eloutai",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-hr4111u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-hr4111u",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为了主从复制的速度和连接的稳定性，Slave 和 Master 最好在同一个局域网内。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-zw9sc53",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-zw9sc53",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-isjj6p7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-isjj6p7",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "尽量避免在压力较大的主库上增加从库。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-exqrxge",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220824115619-exqrxge",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-xpxk6cx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-xpxk6cx",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Master 调用 BGREWRITEAOF 重写 AOF 文件，AOF 在重写的时候会占大量的 CPU 和内存资源，导致服务 load 过高，出现短暂服务暂停现象。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-3y66ovb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20220824115619-3y66ovb",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-btya4dk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-btya4dk",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为了 Master 的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关为：Master\u003c–Slave1\u003c–Slave2\u003c–Slave3…，这样的结构也方便解决单点故障问题，实现 Slave 对 Master 的替换，也即，如果 Master 挂了，可以立马启用 Slave1 做 Master，其他不变。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-lf86ial",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220824115619-lf86ial",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis应用"
				}
			]
		},
		{
			"ID": "20220824115619-dxig13n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-dxig13n",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "40.使用Redis 如何实现异步队列？"
				}
			]
		},
		{
			"ID": "20220824115619-7nlaikv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-7nlaikv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们知道redis支持很多种结构的数据，那么如何使用redis作为异步队列使用呢？一般有以下几种方式："
				}
			]
		},
		{
			"ID": "20220824115619-cr2f2fv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-cr2f2fv",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-bbzdx4l",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-bbzdx4l",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-240e9q4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-240e9q4",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "使用list作为队列，lpush生产消息，rpop消费消息"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-fwrudww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-fwrudww",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种方式，消费者死循环rpop从队列中消费消息。但是这样，即使队列里没有消息，也会进行rpop，会导致Redis CPU的消耗。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152152-o9cmdtf.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "可以通过让消费者休眠的方式的方式来处理，但是这样又会又消息的延迟问题。"
				}
			]
		},
		{
			"ID": "20220824115619-qb9qbpq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-qb9qbpq",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "-"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "使用list作为队列，lpush生产消息，brpop消费消息"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-shi0nqy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-shi0nqy",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "brpop是rpop的阻塞版本，list为空的时候，它会一直阻塞，直到list中有值或者超时。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152152-j2la78s.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-nnrmv6a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-nnrmv6a",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种方式只能实现一对一的消息队列。"
				}
			]
		},
		{
			"ID": "20220824115619-9uqxq3y",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-9uqxq3y",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-5ncefcp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-5ncefcp",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-jstz1bx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-jstz1bx",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "使用Redis的pub/sub来进行消息的发布/订阅"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-4hskjfo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-4hskjfo",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发布/订阅模式可以1：N的消息发布/订阅。发布者将消息发布到指定的频道频道（channel），订阅相应频道的客户端都能收到消息。"
				}
			]
		},
		{
			"ID": "20220824115619-vkhv1tc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-vkhv1tc",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152152-j9cq7nz.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "但是这种方式不是可靠的，它不保证订阅者一定能收到消息，也不进行消息的存储。"
				}
			]
		},
		{
			"ID": "20220824115619-cr3eke8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-cr3eke8",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以，一般的异步队列的实现还是交给专业的消息队列。"
				}
			]
		},
		{
			"ID": "20220824115619-uxa3p8w",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-uxa3p8w",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "41.Redis 如何实现延时队列?"
				}
			]
		},
		{
			"ID": "20220824115619-a8w2qe1",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-a8w2qe1",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-v9eep6g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-v9eep6g",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-fjdj7q8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-fjdj7q8",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "使用zset，利用排序实现"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-83b8lrt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-83b8lrt",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用 zset这个结构，用设置好的时间戳作为score进行排序，使用 zadd score1 value1 ....命令就可以一直往内存中生产消息。再利用 zrangebysocre 查询符合条件的所有待处理的任务，通过循环执行队列任务即可。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152152-ws71we0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-gitc4tj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-gitc4tj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "42.Redis 支持事务吗？"
				}
			]
		},
		{
			"ID": "20220824115619-omuh6wt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-omuh6wt",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis提供了简单的事务，但它对事务ACID的支持并不完备。"
				}
			]
		},
		{
			"ID": "20220824115619-98kepu0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-98kepu0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "multi命令代表事务开始，exec命令代表事务结束，它们之间的命令是原子顺序执行的："
				}
			]
		},
		{
			"ID": "20220824115619-vnbgtyo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220824115619-vnbgtyo",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "127.0.0.1:6379\u003e multi \nOK\n127.0.0.1:6379\u003e sadd user:a:follow user:b \nQUEUED \n127.0.0.1:6379\u003e sadd user:b:fans user:a \nQUEUED\n127.0.0.1:6379\u003e sismember user:a:follow user:b \n(integer) 0\n127.0.0.1:6379\u003e exec 1) (integer) 1\n2) (integer) 1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220824115619-wb15nei",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-wb15nei",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis事务的原理，是所有的指令在 exec 之前不执行，而是缓存在 服务器的一个事务队列中，服务器一旦收到 exec 指令，才开执行整个事务队列，执行完毕后一次性返回所有指令的运行结果。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152153-1anmwqe.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-bn0umxk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-bn0umxk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为Redis执行命令是单线程的，所以这组命令顺序执行，而且不会被其它线程打断。"
				}
			]
		},
		{
			"ID": "20220824115619-utuv9h5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-utuv9h5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Redis事务的注意点有哪些？"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-wbn27de",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-wbn27de",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要注意的点有："
				}
			]
		},
		{
			"ID": "20220824115619-zigl66m",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-zigl66m",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-cxlhrwh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-cxlhrwh",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-o10lc9t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-o10lc9t",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Redis 事务是不支持回滚的，不像 MySQL 的事务一样，要么都执行要么都不执行；"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-phu5yll",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-phu5yll",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-6g0nyga",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-6g0nyga",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Redis 服务端在执行事务的过程中，不会被其他客户端发送来的命令请求打断。直到事务命令全部执行完毕才会执行其他客户端的命令。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-r3qu3ed",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-r3qu3ed",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Redis 事务为什么不支持回滚？"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-isgxa09",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-isgxa09",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis 的事务不支持回滚。"
				}
			]
		},
		{
			"ID": "20220824115619-xy4t4ud",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-xy4t4ud",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果执行的命令有语法错误，Redis 会执行失败，这些问题可以从程序层面捕获并解决。但是如果出现其他问题，则依然会继续执行余下的命令。"
				}
			]
		},
		{
			"ID": "20220824115619-l3udp5h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-l3udp5h",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样做的原因是因为回滚需要增加很多工作，而不支持回滚则可以 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "保持简单、快速的特性"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20220824115619-ltxohzz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-ltxohzz",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "43.Redis和Lua脚本的使用了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-qy6qf2z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-qy6qf2z",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis的事务功能比较简单，平时的开发中，可以利用Lua脚本来增强Redis的命令。"
				}
			]
		},
		{
			"ID": "20220824115619-rbs7al0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-rbs7al0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Lua脚本能给开发人员带来这些好处："
				}
			]
		},
		{
			"ID": "20220824115619-78m7wd3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-78m7wd3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-jwg33n1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-jwg33n1",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-wppyufh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-wppyufh",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Lua脚本在Redis中是原子执行的，执行过程中间不会插入其他命令。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-k0zl51c",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-k0zl51c",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-xmg6v3b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-xmg6v3b",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Lua脚本可以帮助开发和运维人员创造出自己定制的命令，并可以将这 些命令常驻在Redis内存中，实现复用的效果。"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-7zjxmcj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-7zjxmcj",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-7hlzt5l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-7hlzt5l",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Lua脚本可以将多条命令一次性打包，有效地减少网络开销。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-pps0nsm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-pps0nsm",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如这一段很（烂）经（大）典（街）的秒杀系统利用lua扣减Redis库存的脚本："
				}
			]
		},
		{
			"ID": "20220824115619-4011fqc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220824115619-4011fqc",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "   -- 库存未预热\n   if (redis.call('exists', KEYS[2]) == 1) then\n        return -9;\n    end;\n    -- 秒杀商品库存存在\n    if (redis.call('exists', KEYS[1]) == 1) then\n        local stock = tonumber(redis.call('get', KEYS[1]));\n        local num = tonumber(ARGV[1]);\n        -- 剩余库存少于请求数量\n        if (stock \u003c num) then\n            return -3\n        end;\n        -- 扣减库存\n        if (stock \u003e= num) then\n            redis.call('incrby', KEYS[1], 0 - num);\n            -- 扣减成功\n            return 1\n        end;\n        return -2;\n    end;\n    -- 秒杀商品库存不存在\n    return -1;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220824115619-jhfqm1b",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-jhfqm1b",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "44.Redis的管道了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-tg6tzq2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-tg6tzq2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis 提供三种将客户端多条命令打包发送给服务端执行的方式："
				}
			]
		},
		{
			"ID": "20220824115619-txbti5o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-txbti5o",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Pipelining(管道) 、 Transactions(事务) 和 Lua Scripts(Lua 脚本) 。"
				}
			]
		},
		{
			"ID": "20220824115619-fq6afm6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-fq6afm6",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Pipelining"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " （管道）"
				}
			]
		},
		{
			"ID": "20220824115619-35ja6cp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-35ja6cp",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis 管道是三者之中最简单的，当客户端需要执行多条 redis 命令时，可以通过管道一次性将要执行的多条命令发送给服务端，其作用是为了降低 RTT(Round Trip Time) 对性能的影响，比如我们使用 nc 命令将两条指令发送给 redis 服务端。"
				}
			]
		},
		{
			"ID": "20220824115619-h08lyos",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-h08lyos",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis 服务端接收到管道发送过来的多条命令后，会一直执命令，并将命令的执行结果进行缓存，直到最后一条命令执行完成，再所有命令的执行结果一次性返回给客户端 。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152153-cn95kat.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-mryfhox",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-mryfhox",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Pipelining的优势"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-b2oeuq2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-b2oeuq2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在性能方面， Pipelining 有下面两个优势："
				}
			]
		},
		{
			"ID": "20220824115619-wkcm32c",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-wkcm32c",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-frb4g2a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-frb4g2a",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-c2dcq9u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-c2dcq9u",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "节省了RTT"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：将多条命令打包一次性发送给服务端，减少了客户端与服务端之间的网络调用次数"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-pr77r9p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-pr77r9p",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-vumbg1i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-vumbg1i",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "减少了上下文切换"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：当客户端/服务端需要从网络中读写数据时，都会产生一次系统调用，系统调用是非常耗时的操作，其中设计到程序由用户态切换到内核态，再从内核态切换回用户态的过程。当我们执行 10 条 redis 命令的时候，就会发生 10 次用户态到内核态的上下文切换，但如果我们使用 Pipeining 将多条命令打包成一条一次性发送给服务端，就只会产生一次上下文切换。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-llg7c2t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-llg7c2t",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "45.Redis实现分布式锁了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-wggk8lj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-wggk8lj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis是分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。"
				}
			]
		},
		{
			"ID": "20220824115619-ra55bt9",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-ra55bt9",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-1vj7crl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-1vj7crl",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-jvq2hg1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-jvq2hg1",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "V1：setnx命令"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-sxyr6lm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-sxyr6lm",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152153-h4dyl05.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-19zg6l5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220824115619-19zg6l5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003e setnx lock:fighter true\nOK\n... do something critical ...\n\u003e del lock:fighter\n(integer) 1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220824115619-be3d70o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-be3d70o",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。"
				}
			]
		},
		{
			"ID": "20220824115619-whwmgm4",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-whwmgm4",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-xqjfj0g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-xqjfj0g",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-xhrc2t3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-xhrc2t3",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "V2:锁超时释放"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ltj2x9y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-ltj2x9y",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152153-soyf9zq.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-3qow2ps",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220824115619-3qow2ps",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003e setnx lock:fighter true\nOK\n\u003e expire lock:fighter 5\n... do something critical ...\n\u003e del lock:fighter\n(integer) 1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220824115619-9izjsxm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-9izjsxm",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。"
				}
			]
		},
		{
			"ID": "20220824115619-6yajrby",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-6yajrby",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。"
				}
			]
		},
		{
			"ID": "20220824115619-gvrmc5m",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-gvrmc5m",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-kqbfj0f",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-kqbfj0f",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-qpwt706",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-qpwt706",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "V3:set指令"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-8fbwse1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-8fbwse1",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个问题在Redis 2.8 版本中得到了解决，这个版本加入了 set 指令的扩展参数，使得 setnx 和expire 指令可以一起执行。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152153-6eywppu.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-b6s3n9i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220824115619-b6s3n9i",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "set lock:fighter3 true ex 5 nx OK ... do something critical ... \u003e del lock:codehole\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220824115619-o36fayn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-o36fayn",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面这个指令就是 setnx 和 expire 组合在一起的原子指令，这个就算是比较完善的分布式锁了。"
				}
			]
		},
		{
			"ID": "20220824115619-v7lqym5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-v7lqym5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当然实际的开发，没人会去自己写分布式锁的命令，因为有专业的轮子—— "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Redisson"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20220824115619-szmjnkj",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220824115619-szmjnkj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "底层结构"
				}
			]
		},
		{
			"ID": "20220824115619-npk6k0c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-npk6k0c",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这一部分就比较深了，如果不是简历上写了精通Redis，应该不会怎么问。"
				}
			]
		},
		{
			"ID": "20220824115619-ed0x2y3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-ed0x2y3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "46.说说Redis底层数据结构？"
				}
			]
		},
		{
			"ID": "20220824115619-74idz53",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-74idz53",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis有"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "动态字符串(sds) "
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 链表(list) "
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 字典(ht) "
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 跳跃表(skiplist) "
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 整数集合(intset) "
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 压缩列表(ziplist)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 等底层数据结构。"
				}
			]
		},
		{
			"ID": "20220824115619-km0is39",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-km0is39",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis并没有使用这些数据结构来直接实现键值对数据库，而是基于这些数据结构创建了一个对象系统，来表示所有的key-value。"
				}
			]
		},
		{
			"ID": "20220824115619-4t0g6m0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-4t0g6m0",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152154-jkpdg38.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "我们常用的数据类型和编码对应的映射关系："
				}
			]
		},
		{
			"ID": "20220824115619-y1sbq85",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-y1sbq85",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152154-40s3yr8.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "简单看一下底层数据结构，如果对数据结构掌握不错的话，理解这些结构应该不是特别难："
				}
			]
		},
		{
			"ID": "20220824115619-r6jcj6x",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-r6jcj6x",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-lsccgve",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-lsccgve",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-nf3jpbi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-nf3jpbi",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "字符串"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：redis没有直接使⽤C语⾔传统的字符串表示，⽽是⾃⼰实现的叫做简单动态字符串SDS的抽象类型。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-nce14of",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-nce14of",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "   C语⾔的字符串不记录⾃身的⻓度信息，⽽SDS则保存了⻓度信息，这样将获取字符串⻓度的时间由O(N)降低到了O(1)，同时可以避免缓冲区溢出和减少修改字符串⻓度时所需的内存重分配次数。"
				}
			]
		},
		{
			"ID": "20220824115619-a58tadk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-a58tadk",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152154-8vfejeq.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\nSDS"
				}
			]
		},
		{
			"ID": "20220824115619-o5ik2em",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-o5ik2em",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-314e6q4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-314e6q4",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-5fiqsa2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-5fiqsa2",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "链表linkedlist"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：redis链表是⼀个双向⽆环链表结构，很多发布订阅、慢查询、监视器功能都是使⽤到了链表来实现，每个链表的节点由⼀个listNode结构来表示，每个节点都有指向前置节点和后置节点的指针，同时表头节点的前置和后置节点都指向NULL。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-7fgttuo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-7fgttuo",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152154-753oyxm.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n链表linkedlist"
				}
			]
		},
		{
			"ID": "20220824115619-6h3o80e",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-6h3o80e",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-6b88pzj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-6b88pzj",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-1o6f9r0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-1o6f9r0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "字典dict"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：⽤于保存键值对的抽象数据结构。Redis使⽤hash表作为底层实现，一个哈希表里可以有多个哈希表节点，而每个哈希表节点就保存了字典里中的一个键值对。每个字典带有两个hash表，供平时使⽤和rehash时使⽤，hash表使⽤链地址法来解决键冲突，被分配到同⼀个索引位置的多个键值对会形成⼀个单向链表，在对hash表进⾏扩容或者缩容的时候，为了服务的可⽤性，rehash的过程不是⼀次性完成的，⽽是渐进式的。"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152155-l6jff3d.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-3qlldf1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-3qlldf1",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-kpf7n4g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-kpf7n4g",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "跳跃表skiplist"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：跳跃表是有序集合的底层实现之⼀，Redis中在实现有序集合键和集群节点的内部结构中都是⽤到了跳跃表。Redis跳跃表由zskiplist和zskiplistNode组成，zskiplist⽤于保存跳跃表信息（表头、表尾节点、⻓度等），zskiplistNode⽤于表示表跳跃节点，每个跳跃表节点的层⾼都是1-32的随机数，在同⼀个跳跃表中，多个节点可以包含相同的分值，但是每个节点的成员对象必须是唯⼀的，节点按照分值⼤⼩排序，如果分值相同，则按照成员对象的⼤⼩排序。"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152155-s2cwkit.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-edw6n61",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220824115619-edw6n61",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-oklxoka",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-oklxoka",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "整数集合intset"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：⽤于保存整数值的集合抽象数据结构，不会出现重复元素，底层实现为数组。"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152155-wf8dejb.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-ywnfou5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20220824115619-ywnfou5",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-l76ycio",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-l76ycio",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "压缩列表ziplist"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：压缩列表是为节约内存⽽开发的顺序性数据结构，它可以包含任意多个节点，每个节点可以保存⼀个字节数组或者整数值。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-1fm7b65",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-1fm7b65",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152156-i2xw7lf.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n压缩列表组成"
				}
			]
		},
		{
			"ID": "20220824115619-260azzu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-260azzu",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "47.Redis 的 SDS 和 C 中字符串相比有什么优势？"
				}
			]
		},
		{
			"ID": "20220824115619-vdxgpkr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-vdxgpkr",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C 语言使用了一个长度为 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "N+1"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的字符数组来表示长度为 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "N"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的字符串，并且字符数组最后一个元素总是 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "\\0"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，这种简单的字符串表示方式 不符合 Redis 对字符串在安全性、效率以及功能方面的要求。"
				}
			]
		},
		{
			"ID": "20220824115619-zgimgm2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-zgimgm2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152156-rope959.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\nC语言的字符串"
				}
			]
		},
		{
			"ID": "20220824115619-hncyiwm",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-hncyiwm",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-o0ukavk",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-o0ukavk",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "C语言的字符串可能有什么问题？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-1erxavs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-1erxavs",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样简单的数据结构可能会造成以下一些问题："
				}
			]
		},
		{
			"ID": "20220824115619-9odj1me",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-9odj1me",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-81gwxiz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-81gwxiz",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-3345i5m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-3345i5m",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "获取字符串长度复杂度高"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：因为 C 不保存数组的长度，每次都需要遍历一遍整个数组，时间复杂度为O(n)；"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-2d3jmnr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-2d3jmnr",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-rmixgtq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-rmixgtq",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不能杜绝 "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "缓冲区溢出/内存泄漏"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 的问题 : C字符串不记录自身长度带来的另外一个问题是容易造成缓存区溢出（buffer overflow），例如在字符串拼接的时候，新的"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-dtxevr4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-dtxevr4",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-23egjqc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-23egjqc",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C 字符串 "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "只能保存文本数据"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " → 因为 C 语言中的字符串必须符合某种编码（比如 ASCII），例如中间出现的 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "'\\0'"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 可能会被判定为提前结束的字符串而识别不了；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-5i40tvi",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-5i40tvi",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-tsdz6cf",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-tsdz6cf",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "Redis如何解决？优势？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-nx2hahm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-nx2hahm",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152156-up7ma4t.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\nRedis sds"
				}
			]
		},
		{
			"ID": "20220824115619-gy162jf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-gy162jf",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说一下 Redis 如何解决的："
				}
			]
		},
		{
			"ID": "20220824115619-qc9f6f5",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-qc9f6f5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-nwmxmzz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-nwmxmzz",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-j0rgz0v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-j0rgz0v",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "多增加 len 表示当前字符串的长度"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：这样就可以直接获取长度了，复杂度 O(1)；"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-qdxqpfu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-qdxqpfu",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-cdb8hcj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-cdb8hcj",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "自动扩展空间"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：当 SDS 需要对字符串进行修改时，首先借助于 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "len"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 和 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "alloc"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 检查空间是否满足修改所需的要求，如果空间不够的话，SDS 会自动扩展空间，避免了像 C 字符串操作中的溢出情况；"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-dkyu68m",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220824115619-dkyu68m",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-gej0i0g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-gej0i0g",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "有效降低内存分配次数"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：C 字符串在涉及增加或者清除操作时会改变底层数组的大小造成重新分配，SDS 使用了 "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "空间预分配"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 和 "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "惰性空间释放"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 机制，简单理解就是每次在扩展时是成倍的多分配的，在缩容是也是先留着并不正式归还给 OS；"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-7do0qcr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220824115619-7do0qcr",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-l8yeo74",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-l8yeo74",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "二进制安全"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ：C 语言字符串只能保存 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "ascii"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 码，对于图片、音频等信息无法保存，SDS 是二进制安全的，写入什么读取就是什么，不做任何过滤和限制；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-sk26y7k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-sk26y7k",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "48.字典是如何实现的？Rehash 了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-gxha5ql",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-gxha5ql",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字典是 Redis 服务器中出现最为频繁的复合型数据结构。除了 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "hash"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 结构的数据会用到字典外，整个 Redis 数据库的所有 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "key"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "value"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 也组成了一个  "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "全局字典"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ，还有带过期时间的 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "key"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 也是一个字典。"
				},
				{
					"Type": "NodeEmphasis",
					"Data": "em",
					"Children": [
						{
							"Type": "NodeEmA6kOpenMarker",
							"Data": "*"
						},
						{
							"Type": "NodeText",
							"Data": "(存储在 RedisDb 数据结构中)"
						},
						{
							"Type": "NodeEmA6kCloseMarker",
							"Data": "*"
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-l5xautu",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-l5xautu",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-dv0dzia",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-dv0dzia",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "字典结构是什么样的呢？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-q04pt12",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-q04pt12",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Redis"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 中的字典相当于 Java 中的  "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "HashMap"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ，内部实现也差不多类似，采用哈希与运算计算下标位置；通过 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "\"数组 + 链表\" "
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "的"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "链地址法"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 来解决哈希冲突，同时这样的结构也吸收了两种不同数据结构的优点。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152156-tiqsvte.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-0et0abj",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-0et0abj",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-4psi6vt",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-4psi6vt",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "字典是怎么扩容的？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-l5uc3x7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-l5uc3x7",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字典结构内部包含  "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "两个 hashtable"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ，通常情况下只有一个哈希表 ht[0] 有值，在扩容的时候，把ht[0]里的值rehash到ht[1]，然后进行 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "渐进式rehash"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ——所谓渐进式rehash，指的是这个rehash的动作并不是一次性、集中式地完成的，而是分多次、渐进式地完成的。"
				}
			]
		},
		{
			"ID": "20220824115619-7jjudmh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-7jjudmh",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "待搬迁结束后，h[1]就取代h[0]存储字典的元素。"
				}
			]
		},
		{
			"ID": "20220824115619-r6lquk3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-r6lquk3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "49.跳跃表是如何实现的？原理？"
				}
			]
		},
		{
			"ID": "20220824115619-7mumza1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-7mumza1",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "PS:跳跃表是比较常问的一种结构。"
				}
			]
		},
		{
			"ID": "20220824115619-m2yc9rl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-m2yc9rl",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其它节点的指针，从而达到快速访问节点的目的。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152156-0vobrl1.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-hdl9ldy",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-hdl9ldy",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-n30zhx1",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-n30zhx1",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "为什么使用跳跃表?"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-te5iael",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-te5iael",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，因为 zset 要支持随机的插入和删除，所以它  "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "不宜使用数组来实现"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ，关于排序问题，我们也很容易就想到 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "红黑树/ 平衡树"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 这样的树形结构，为什么 Redis 不使用这样一些结构呢？"
				}
			]
		},
		{
			"ID": "20220824115619-duqqknw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220824115619-duqqknw",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-a681zyc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220824115619-a681zyc",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-jvs50yn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-jvs50yn",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "性能考虑："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 在高并发的情况下，树形结构需要执行一些类似于 rebalance 这样的可能涉及整棵树的操作，相对来说跳跃表的变化只涉及局部；"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-tflp4th",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220824115619-tflp4th",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-fr6d7ti",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-fr6d7ti",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "实现考虑："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 在复杂度与红黑树相同的情况下，跳跃表实现起来更简单，看起来也更加直观；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-73i5t2u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-73i5t2u",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基于以上的一些考虑，Redis 基于 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "William Pugh"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的论文做出一些改进后采用了 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "跳跃表"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 这样的结构。"
				}
			]
		},
		{
			"ID": "20220824115619-yzs33q8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-yzs33q8",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本质是解决查找问题。"
				}
			]
		},
		{
			"ID": "20220824115619-j686t4q",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220824115619-j686t4q",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220824115619-7t2t1u2",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220824115619-7t2t1u2",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "跳跃表是怎么实现的？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-ohf5but",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-ohf5but",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "跳跃表的节点里有这些元素："
				}
			]
		},
		{
			"ID": "20220824115619-gfgt0p3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-gfgt0p3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-8hreut9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-8hreut9",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-c6izxdd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-c6izxdd",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "层"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "跳跃表节点的level数组可以包含多个元素，每个元素都包含一个指向其它节点的指针，程序可以通过这些层来加快访问其它节点的速度，一般来说，层的数量月多，访问其它节点的速度就越快。"
								}
							]
						},
						{
							"ID": "20220824115619-fjre2i3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-fjre2i3",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每次创建一个新的跳跃表节点的时候，程序都根据幂次定律，随机生成一个介于1和32之间的值作为level数组的大小，这个大小就是层的“高度”"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-z91tuin",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-z91tuin",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-s1nsk46",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-s1nsk46",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "前进指针"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "每个层都有一个指向表尾的前进指针（level[i].forward属性），用于从表头向表尾方向访问节点。"
								}
							]
						},
						{
							"ID": "20220824115619-nmkliq7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-nmkliq7",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们看一下跳跃表从表头到表尾，遍历所有节点的路径："
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152157-dg9g71u.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-4ol1dj1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-4ol1dj1",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-j3oo541",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-j3oo541",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "跨度"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "层的跨度用于记录两个节点之间的距离。跨度是用来计算排位（rank）的：在查找某个节点的过程中，将沿途访问过的所有层的跨度累计起来，得到的结果就是目标节点在跳跃表中的排位。"
								}
							]
						},
						{
							"ID": "20220824115619-pgxo2cj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-pgxo2cj",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "例如查找，分值为3.0、成员对象为o3的节点时，沿途经历的层：查找的过程只经过了一个层，并且层的跨度为3，所以目标节点在跳跃表中的排位为3。"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "图片"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/net-img-640-20230107152157-57hvlg4.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-d087ew8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-d087ew8",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-btjsjcj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-btjsjcj",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "分值和成员"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "节点的分值（score属性）是一个double类型的浮点数，跳跃表中所有的节点都按分值从小到大来排序。"
								}
							]
						},
						{
							"ID": "20220824115619-pouj6lg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-pouj6lg",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "节点的成员对象（obj属性）是一个指针，它指向一个字符串对象，而字符串对象则保存这一个SDS值。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-4p932f9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-4p932f9",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "50.压缩列表了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-kwdiure",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-kwdiure",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "压缩列表是 Redis "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "为了节约内存"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 而使用的一种数据结构，是由一系列特殊编码的连续内存快组成的顺序型数据结构。"
				}
			]
		},
		{
			"ID": "20220824115619-gj571x9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-gj571x9",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个压缩列表可以包含任意多个节点（entry），每个节点可以保存一个字节数组或者一个整数值。"
				}
			]
		},
		{
			"ID": "20220824115619-t347tm3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-t347tm3",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152157-c43qmw5.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "压缩列表由这么几部分组成："
				}
			]
		},
		{
			"ID": "20220824115619-fpikcz6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220824115619-fpikcz6",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"ID": "20220824115619-khepqdl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-khepqdl",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-dwsjss0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-dwsjss0",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "zlbyttes"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " :记录整个压缩列表占用的内存字节数"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-c6xdb67",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-c6xdb67",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-b01tcgk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-b01tcgk",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "zltail"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " :记录压缩列表表尾节点距离压缩列表的起始地址有多少字节"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-8ek5wwp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-8ek5wwp",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-77umhn9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-77umhn9",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "zllen"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " :记录压缩列表包含的节点数量"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-kqfakc7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-kqfakc7",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-67feh29",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-67feh29",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "entryX"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " :列表节点"
								}
							]
						}
					]
				},
				{
					"ID": "20220824115619-x9mfr05",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220824115619-x9mfr05",
						"updated": "20220824115619"
					},
					"Children": [
						{
							"ID": "20220824115619-1febjzg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220824115619-1febjzg",
								"updated": "20220824115619"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "zlend"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " :用于标记压缩列表的末端"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220824115619-b83pby5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-b83pby5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152157-9jwvwoc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n压缩列表示例"
				}
			]
		},
		{
			"ID": "20220824115619-tz1vqg7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-tz1vqg7",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "51.快速列表 quicklist 了解吗？"
				}
			]
		},
		{
			"ID": "20220824115619-20r5hdw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-20r5hdw",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis 早期版本存储 list 列表数据结构使用的是压缩列表 ziplist 和普通的双向链表 linkedlist，也就是说当元素少时使用 ziplist，当元素多时用 linkedlist。"
				}
			]
		},
		{
			"ID": "20220824115619-3zmxua2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-3zmxua2",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但考虑到链表的附加空间相对较高，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "prev"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "next"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 指针就要占去 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "16"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 个字节（64 位操作系统占用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "8"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 个字节），另外每个节点的内存都是单独分配，会家具内存的碎片化，影响内存管理效率。"
				}
			]
		},
		{
			"ID": "20220824115619-yra1gi5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-yra1gi5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "后来 Redis 新版本（3.2）对列表数据结构进行了改造，使用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "quicklist"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 代替了 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "ziplist"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "linkedlist"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，quicklist是综合考虑了时间效率与空间效率引入的新型数据结构。"
				}
			]
		},
		{
			"ID": "20220824115619-z0nmok7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-z0nmok7",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "quicklist由list和ziplist结合而成，它是一个由ziplist充当节点的双向链表。"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152200-x1prpdx.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824115619-kfz0jxy",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220824115619-kfz0jxy",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其他问题"
				}
			]
		},
		{
			"ID": "20220824115619-hj4tif5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220824115619-hj4tif5",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "52.假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？"
				}
			]
		},
		{
			"ID": "20220824115619-dq7h2ov",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-dq7h2ov",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "keys"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 指令可以扫出指定模式的 key 列表。但是要注意 keys 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "scan"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 指令，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "scan"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 指令可以无阻塞的提取出指定模式的 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "key"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "keys"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 指令长。"
				}
			]
		},
		{
			"ID": "20220824115619-pxalvna",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824115619-pxalvna",
				"updated": "20220824115619"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-640-20230107152200-p1bxb7h.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220824133906-s04nu0e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220824133906-s04nu0e"
			}
		}
	]
}