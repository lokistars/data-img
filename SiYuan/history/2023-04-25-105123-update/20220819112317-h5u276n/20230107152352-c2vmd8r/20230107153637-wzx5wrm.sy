{
	"ID": "20230107153637-wzx5wrm",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230107153637-wzx5wrm",
		"scroll": "{\u0026amp;quot;startId\u0026amp;quot;:\u0026amp;quot;20230107153729-tkq9v0x\u0026amp;quot;,\u0026amp;quot;endId\u0026amp;quot;:\u0026amp;quot;20230107153846-rwpigls\u0026amp;quot;,\u0026amp;quot;scrollTop\u0026amp;quot;:5639,\u0026amp;quot;focusId\u0026amp;quot;:\u0026amp;quot;20230107154920-opryot4\u0026amp;quot;,\u0026amp;quot;focusStart\u0026amp;quot;:2,\u0026amp;quot;focusEnd\u0026amp;quot;:2}",
		"title": "Example",
		"updated": "20230315173452"
	},
	"Children": [
		{
			"ID": "20230107153642-d7soc69",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153642-d7soc69",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "批量消息发送"
				}
			]
		},
		{
			"ID": "20230107153642-pn85834",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153642-pn85834",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "批量消息发送能够提高发送效率，提升系统吞吐量。同一批批量消息的topic、waitStoreMsgOK属性必须保持一致，批量消息不支持延迟消息。批量消息发送一次最多可以发送 4MiB 的消息，但是如果需要发送更大的消息，建议将较大的消息分成多个不超过 1MiB 的小消息。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153642-bbdtfiu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153642-bbdtfiu",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 发送批量消息"
				}
			]
		},
		{
			"ID": "20230107153642-gnqpjnu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153642-gnqpjnu",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "如果你一次只发送不超过 4MiB 的消息，使用批处理很容易："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153642-ni424sr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153642-ni424sr",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String topic = \"BatchTest\";\nList\u003cMessage\u003e messages = new ArrayList\u003c\u003e();\nmessages.add(new Message(topic, \"TagA\", \"OrderID001\", \"Hello world 0\".getBytes()));\nmessages.add(new Message(topic, \"TagA\", \"OrderID002\", \"Hello world 1\".getBytes()));\nmessages.add(new Message(topic, \"TagA\", \"OrderID003\", \"Hello world 2\".getBytes()));\ntry {\n    producer.send(messages);\n} catch (Exception e) {\n    e.printStackTrace();\n    //handle the error\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153642-2tghyaw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153642-2tghyaw",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 拆分"
				}
			]
		},
		{
			"ID": "20230107153642-v3wly8a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153642-v3wly8a",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "当您发送较大的消息时，复杂性会增加，如果您不确定它是否超过 4MiB的限制。 这时候，您最好将较大的消息分成多个不超过 1MiB 的小消息："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153642-9ayfqpu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153642-9ayfqpu",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ListSplitter implements Iterator\u003cList\u003cMessage\u003e\u003e { \n    private final int SIZE_LIMIT = 1024 * 1024 * 4;\n    private final List\u003cMessage\u003e messages;\n    private int currIndex;\n    public ListSplitter(List\u003cMessage\u003e messages) { \n        this.messages = messages;\n    }\n    @Override public boolean hasNext() {\n        return currIndex \u003c messages.size(); \n    }\n    @Override public List\u003cMessage\u003e next() { \n        int startIndex = getStartIndex();\n        int nextIndex = startIndex;\n        int totalSize = 0;\n        for (; nextIndex \u003c messages.size(); nextIndex++) {\n            Message message = messages.get(nextIndex); \n            int tmpSize = calcMessageSize(message);\n            if (tmpSize + totalSize \u003e SIZE_LIMIT) {\n                break; \n            } else {\n                totalSize += tmpSize; \n            }\n        }\n        List\u003cMessage\u003e subList = messages.subList(startIndex, nextIndex); \n        currIndex = nextIndex;\n        return subList;\n    }\n    private int getStartIndex() {\n        Message currMessage = messages.get(currIndex); \n        int tmpSize = calcMessageSize(currMessage); \n        while(tmpSize \u003e SIZE_LIMIT) {\n            currIndex += 1;\n            Message message = messages.get(curIndex); \n            tmpSize = calcMessageSize(message);\n        }\n        return currIndex; \n    }\n    private int calcMessageSize(Message message) {\n        int tmpSize = message.getTopic().length() + message.getBody().length(); \n        Map\u003cString, String\u003e properties = message.getProperties();\n        for (Map.Entry\u003cString, String\u003e entry : properties.entrySet()) {\n            tmpSize += entry.getKey().length() + entry.getValue().length(); \n        }\n        tmpSize = tmpSize + 20; // Increase the log overhead by 20 bytes\n        return tmpSize; \n    }\n}\n​\n// then you could split the large list into small ones:\nListSplitter splitter = new ListSplitter(messages);\nwhile (splitter.hasNext()) {\n   try {\n       List\u003cMessage\u003e  listItem = splitter.next();\n       producer.send(listItem);\n   } catch (Exception e) {\n       e.printStackTrace();\n       // handle the error\n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153707-8zqhgmv",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153707-8zqhgmv",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Schedule example"
				}
			]
		},
		{
			"ID": "20230107153707-20lyhzq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-20lyhzq",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 启动消费者等待传入的订阅消息"
				}
			]
		},
		{
			"ID": "20230107153707-gutt43a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153707-gutt43a",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport java.util.List;\n​\npublic class ScheduledMessageConsumer {\n​\n    public static void main(String[] args) throws Exception {\n        // Instantiate message consumer\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"ExampleConsumer\");\n        // Subscribe topics\n        consumer.subscribe(\"TestTopic\", \"*\");\n        // Register message listener\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List\u003cMessageExt\u003e messages, ConsumeConcurrentlyContext context) {\n                for (MessageExt message : messages) {\n                    // Print approximate delay time period\n                    System.out.println(\"Receive message[msgId=\" + message.getMsgId() + \"] \"\n                                       + (System.currentTimeMillis() - message.getStoreTimestamp()) + \"ms later\");\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        // Launch consumer\n        consumer.start();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153707-9pdzyfy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-9pdzyfy",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 发送延迟消息"
				}
			]
		},
		{
			"ID": "20230107153707-4msktep",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153707-4msktep",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\n​\npublic class ScheduledMessageProducer {\n​\n    public static void main(String[] args) throws Exception {\n        // Instantiate a producer to send scheduled messages\n        DefaultMQProducer producer = new DefaultMQProducer(\"ExampleProducerGroup\");\n        // Launch producer\n        producer.start();\n        int totalMessagesToSend = 100;\n        for (int i = 0; i \u003c totalMessagesToSend; i++) {\n            Message message = new Message(\"TestTopic\", (\"Hello scheduled message \" + i).getBytes());\n            // This message will be delivered to consumer 10 seconds later.\n            message.setDelayTimeLevel(3);\n            // Send the message\n            producer.send(message);\n        }\n​\n        // Shutdown producer after use.\n        producer.shutdown();\n    }\n​\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153707-kn9b5xn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-kn9b5xn",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3 确认"
				}
			]
		},
		{
			"ID": "20230107153707-t0i9a6y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153707-t0i9a6y",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "您应该会看到消息在其存储时间后大约 10 秒被消耗。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153707-tnmiqm1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-tnmiqm1",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4 延迟消息的使用场景"
				}
			]
		},
		{
			"ID": "20230107153707-be1ry17",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153707-be1ry17",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "例如在电子商务中，如果提交订单，可以发送延迟消息，1小时后可以查看订单状态。 如果订单仍未付款，则可以取消订单并释放库存。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153707-f56lvdd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-f56lvdd",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5 使用延迟消息的限制"
				}
			]
		},
		{
			"ID": "20230107153707-stm8vv7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153707-stm8vv7",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// org/apache/rocketmq/store/config/MessageStoreConfig.java\n​\nprivate String messageDelayLevel = \"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h\";\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153707-xoqxn46",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153707-xoqxn46",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "当前 RocketMQ 不支持任意时间的延迟。 生产者发送延迟消息前需要设置几个固定的延迟级别，分别对应1s到2h的1到18个延迟级，消息消费失败会进入延迟消息队列，消息发送时间与设置的延迟级别和重试次数有关。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153707-oewvvhh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153707-oewvvhh",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "** See **"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "SendMessageProcessor.java"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-t12k5tx",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153729-t12k5tx",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Light message queue (LMQ)"
				}
			]
		},
		{
			"ID": "20230107153729-tkq9v0x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-tkq9v0x",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "LMQ采用的读放大的策略，写一份数据，多个LMQ队列分发，"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "因为存储的成本和效率对用户的体感最明显。写多份不仅加大了存储成本，同时也对性能和数据准确一致性提出了挑战。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-8hydmjx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-8hydmjx",
				"updated": "20230107153750"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/LMQ_1.png?lastModify=1673077046"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230107153729-yjapvfa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-yjapvfa",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "上图描述的是LMQ的队列存储模型，消息可以来自各个接入场景"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "（如服务端的MQ/AMQP，客户端的MQTT），但只会写一份存到commitlog里面，然后分发出多个需求场景的队列索引（ConsumerQueue），如服务端场景（MQ/AMQP）可以按照一级Topic队列进行传统的服务端消费，客户端MQTT场景可以按照MQTT多级Topic(也即 LMQ)进行消费消息。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-xheqlwr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153729-xheqlwr",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、broker启动配置"
				}
			]
		},
		{
			"ID": "20230107153729-xaoo1qf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-xaoo1qf",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "broker.conf文件需要增加以下的配置项，开启LMQ开关，这样就可以识别LMQ相关属性的消息，进行原子分发消息到LMQ队列"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-y2pwc5g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153729-y2pwc5g",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "enableLmq = true\nenableMultiDispatch = true\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153729-vi48a6m",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153729-vi48a6m",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、发送消息"
				}
			]
		},
		{
			"ID": "20230107153729-n9jqzrt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-n9jqzrt",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "发送消息的时候通过设置 INNER_MULTI_DISPATCH 属性，LMQ queue使用逗号分割，queue前缀必须是 %LMQ%，这样broker就可以识别LMQ queue."
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "以下代码只是demo伪代码 具体逻辑参照执行即可"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-3epvaxh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153729-3epvaxh",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\nproducer.setNamesrvAddr(\"name-server1-ip:9876;name-server2-ip:9876\");\nproducer.start();\n​\n​\n/*\n* Create a message instance, specifying topic, tag and message body.\n*/\nMessage msg = new Message(\"TopicTest\" /* Topic */,\n                          \"TagA\" /* Tag */,\n                          (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n                         );\n/*\n* INNER_MULTI_DISPATCH property and PREFIX must start as \"%LMQ%\",\n* If it is multiple LMQ, need to use “,” split\n*/\nmessage.putUserProperty(\"INNER_MULTI_DISPATCH\", \"%LMQ%123,%LMQ%456\");\n/*\n* Call send message to deliver message to one of brokers.\n*/\nSendResult sendResult = producer.send(msg);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153729-t0hwlo1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153729-t0hwlo1",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、拉取消息"
				}
			]
		},
		{
			"ID": "20230107153729-ylfor6i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-ylfor6i",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "LMQ queue在每个broker上只有一个queue，也即queueId为0， 指明轻量级的MessageQueue，就可以拉取消息进行消费。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "以下代码只是demo伪代码 具体逻辑参照执行即可"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-t0xxq03",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153729-t0xxq03",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer();\ndefaultMQPullConsumer.setNamesrvAddr(\"name-server1-ip:9876;name-server2-ip:9876\");\ndefaultMQPullConsumer.setVipChannelEnabled(false);\ndefaultMQPullConsumer.setConsumerGroup(\"CID_RMQ_SYS_LMQ_TEST\");\ndefaultMQPullConsumer.setInstanceName(\"CID_RMQ_SYS_LMQ_TEST\");\ndefaultMQPullConsumer.setRegisterTopics(new HashSet\u003c\u003e(Arrays.asList(\"TopicTest\")));\ndefaultMQPullConsumer.setBrokerSuspendMaxTimeMillis(2000);\ndefaultMQPullConsumer.setConsumerTimeoutMillisWhenSuspend(3000);\ndefaultMQPullConsumer.start();\n​\nString brokerName = \"set broker Name\";\nMessageQueue mq = new MessageQueue(\"%LMQ%123\", brokerName, 0);\ndefaultMQPullConsumer.getDefaultMQPullConsumerImpl().getRebalanceImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(\"TopicTest\");\n​\nThread.sleep(30000);\nLong offset = defaultMQPullConsumer.maxOffset(mq);\n​\ndefaultMQPullConsumer.pullBlockIfNotFound(\n                mq, \"*\", offset, 32,\n                new PullCallback() {\n                    @Override\n                    public void onSuccess(PullResult pullResult) {\n                        List\u003cMessageExt\u003e list = pullResult.getMsgFoundList();\n                        if (list == null || list.isEmpty()) {\n                            return;\n                        }\n                        for (MessageExt messageExt : list) {\n                            System.out.println(messageExt);\n                        }    \n                    }\n                    @Override\n                    public void onException(Throwable e) {\n                       \n                    }\n});\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-0fq2p3n",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153808-0fq2p3n",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Basic Sample"
				}
			]
		},
		{
			"ID": "20230107153808-5vk3xk3",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230107153808-5vk3xk3",
				"updated": "20230107153808"
			}
		},
		{
			"ID": "20230107153808-hxjpfys",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-hxjpfys",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "基本示例中提供了以下两个功能"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-m2pmtj7",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230107153808-m2pmtj7",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"ID": "20230107153808-kscxzct",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107153808-kscxzct",
						"updated": "20230107153808"
					},
					"Children": [
						{
							"ID": "20230107153808-vq7akk8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153808-vq7akk8",
								"updated": "20230107153808"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "RocketMQ可用于以三种方式发送消息：可靠的同步、可靠的异步和单向传输。前两种消息类型是可靠的，因为无论它们是否成功发送都有响应。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153808-9m0wsh7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107153808-9m0wsh7",
						"updated": "20230107153808"
					},
					"Children": [
						{
							"ID": "20230107153808-omu8ecc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153808-omu8ecc",
								"updated": "20230107153808"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "RocketMQ可以用来消费消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-dt1svn1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153808-dt1svn1",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 添加依赖"
				}
			]
		},
		{
			"ID": "20230107153808-qinstlb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-qinstlb",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "maven:"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-e5pssv8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-e5pssv8",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cdependency\u003e\n  \u003cgroupId\u003eorg.apache.rocketmq\u003c/groupId\u003e\n  \u003cartifactId\u003erocketmq-client\u003c/artifactId\u003e\n  \u003cversion\u003e4.3.0\u003c/version\u003e\n\u003c/dependency\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-jyqpuij",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-jyqpuij",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "**gradle: **"
				}
			]
		},
		{
			"ID": "20230107153808-ne568bk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-ne568bk",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "compile 'org.apache.rocketmq:rocketmq-client:4.3.0'\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-fvqj5ck",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153808-fvqj5ck",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 发送消息"
				}
			]
		},
		{
			"ID": "20230107153808-pcgrm50",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20230107153808-pcgrm50",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 使用Producer发送同步消息"
				}
			]
		},
		{
			"ID": "20230107153808-xuzhjfa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-xuzhjfa",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "可靠的同步传输被广泛应用于各种场景，如重要的通知消息、短消息通知等。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-6z4cqpr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-6z4cqpr",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class SyncProducer {\n  public static void main(String[] args) throws Exception {\n    // Instantiate with a producer group name\n    DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n    // Specify name server addresses\n    producer.setNamesrvAddr(\"localhost:9876\");\n    // Launch the producer instance\n    producer.start();\n    for (int i = 0; i \u003c 100; i++) {\n      // Create a message instance with specifying topic, tag and message body\n      Message msg = new Message(\"TopicTest\" /* Topic */,\n        \"TagA\" /* Tag */,\n        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n        );\n      // Send message to one of brokers\n      SendResult sendResult = producer.send(msg);\n      // Check whether the message has been delivered by the callback of sendResult\n      System.out.printf(\"%s%n\", sendResult);\n    }\n    // Shut down once the producer instance is not longer in use\n    producer.shutdown();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-70v16k0",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20230107153808-70v16k0",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2 发送异步消息"
				}
			]
		},
		{
			"ID": "20230107153808-4orqw00",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-4orqw00",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "异步传输通常用于响应时间敏感的业务场景。这意味着发送方无法等待代理的响应太长时间。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-d9nnd4j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-d9nnd4j",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AsyncProducer {\n  public static void main(String[] args) throws Exception {\n    // Instantiate with a producer group name\n    DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n    // Specify name server addresses\n    producer.setNamesrvAddr(\"localhost:9876\");\n    // Launch the producer instance\n    producer.start();\n    producer.setRetryTimesWhenSendAsyncFailed(0);\n    for (int i = 0; i \u003c 100; i++) {\n      final int index = i;\n      // Create a message instance with specifying topic, tag and message body\n      Message msg = new Message(\"TopicTest\",\n        \"TagA\",\n        \"OrderID188\",\n        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n      // SendCallback: receive the callback of the asynchronous return result.\n      producer.send(msg, new SendCallback() {\n        @Override\n        public void onSuccess(SendResult sendResult) {\n          System.out.printf(\"%-10d OK %s %n\", index,\n            sendResult.getMsgId());\n        }\n        @Override\n        public void onException(Throwable e) {\n          System.out.printf(\"%-10d Exception %s %n\", index, e);\n          e.printStackTrace();\n        }\n      });\n    }\n    // Shut down once the producer instance is not longer in use\n    producer.shutdown();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-me2auzz",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20230107153808-me2auzz",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3 以单向模式发送消息"
				}
			]
		},
		{
			"ID": "20230107153808-o2dedoj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-o2dedoj",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "单向传输用于需要中等可靠性的情况，如日志收集。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-srhyngb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-srhyngb",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class OnewayProducer {\n  public static void main(String[] args) throws Exception{\n    // Instantiate with a producer group name\n    DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n    // Specify name server addresses\n    producer.setNamesrvAddr(\"localhost:9876\");\n    // Launch the producer instance\n    producer.start();\n    for (int i = 0; i \u003c 100; i++) {\n      // Create a message instance with specifying topic, tag and message body\n      Message msg = new Message(\"TopicTest\" /* Topic */,\n        \"TagA\" /* Tag */,\n        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n      );\n      // Send in one-way mode, no return result\n      producer.sendOneway(msg);\n    }\n    // Shut down once the producer instance is not longer in use\n     producer.shutdown();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-78y8uis",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153808-78y8uis",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3 消费消息"
				}
			]
		},
		{
			"ID": "20230107153808-khkvglk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-khkvglk",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Consumer {\n  public static void main(String[] args) throws InterruptedException, MQClientException {\n    // Instantiate with specified consumer group name\n    DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name\");\n    \n    // Specify name server addresses\n    consumer.setNamesrvAddr(\"localhost:9876\");\n​\n    // Subscribe one or more topics and tags for finding those messages need to be consumed\n    consumer.subscribe(\"TopicTest\", \"*\");\n    // Register callback to execute on arrival of messages fetched from brokers\n    consumer.registerMessageListener(new MessageListenerConcurrently() {\n      @Override\n      public ConsumeConcurrentlyStatus consumeMessage(List\u003cMessageExt\u003e msgs, ConsumeConcurrentlyContext context) {\n        System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n        // Mark the message that have been consumed successfully\n        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n      }\n    });\n    // Launch the consumer instance\n    consumer.start();\n    System.out.printf(\"Consumer Started.%n\");\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-opryot4",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107154920-opryot4",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "样例"
				}
			]
		},
		{
			"ID": "20230107154920-31infkc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107154920-31infkc",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 基本样例"
				}
			]
		},
		{
			"ID": "20230107154920-43eereh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-43eereh",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "在基本样例中我们提供如下的功能场景："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-27dm4b8",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230107154920-27dm4b8",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"ID": "20230107154920-88weccs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-88weccs",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-rvd40qr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-rvd40qr",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "使用RocketMQ发送三种类型的消息：同步消息、异步消息和单向消息。其中前两种消息是可靠的，因为会有发送是否成功的应答。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-havlj4g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-havlj4g",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-9wdwo72",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-9wdwo72",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "使用RocketMQ来消费接收到的消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-5c8lwnl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-5c8lwnl",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1 加入依赖："
				}
			]
		},
		{
			"ID": "20230107154920-sokrqa9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-sokrqa9",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "maven:"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-i42ybr0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-i42ybr0",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cdependency\u003e\n    \u003cgroupId\u003eorg.apache.rocketmq\u003c/groupId\u003e\n    \u003cartifactId\u003erocketmq-client\u003c/artifactId\u003e\n    \u003cversion\u003e4.9.1\u003c/version\u003e\n\u003c/dependency\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-7spcw9k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-7spcw9k",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "gradle"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-nsj4gjk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-nsj4gjk",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "compile 'org.apache.rocketmq:rocketmq-client:4.3.0'\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-whk9l3a",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-whk9l3a",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2 消息发送"
				}
			]
		},
		{
			"ID": "20230107154920-ip9suen",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230107154920-ip9suen",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、Producer端发送同步消息"
				}
			]
		},
		{
			"ID": "20230107154920-c6916r3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-c6916r3",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "这种可靠性同步地发送方式使用的比较广泛，比如：重要的消息通知，短信通知。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-z5efl4z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-z5efl4z",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class SyncProducer {\n    public static void main(String[] args) throws Exception {\n        // 实例化消息生产者Producer\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        // 设置NameServer的地址\n        producer.setNamesrvAddr(\"localhost:9876\");\n        // 启动Producer实例\n        producer.start();\n        for (int i = 0; i \u003c 100; i++) {\n            // 创建消息，并指定Topic，Tag和消息体\n            Message msg = new Message(\"TopicTest\" /* Topic */,\n            \"TagA\" /* Tag */,\n            (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n            );\n            // 发送消息到一个Broker\n            SendResult sendResult = producer.send(msg);\n            // 通过sendResult返回消息是否成功送达\n            System.out.printf(\"%s%n\", sendResult);\n        }\n        // 如果不再发送消息，关闭Producer实例。\n        producer.shutdown();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-9ip3boe",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230107154920-9ip3boe",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、发送异步消息"
				}
			]
		},
		{
			"ID": "20230107154920-ds3r6h8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-ds3r6h8",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "异步消息通常用在对响应时间敏感的业务场景，即发送端不能容忍长时间地等待Broker的响应。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-asf500y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-asf500y",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AsyncProducer {\n    public static void main(String[] args) throws Exception {\n        // 实例化消息生产者Producer\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        // 设置NameServer的地址\n        producer.setNamesrvAddr(\"localhost:9876\");\n        // 启动Producer实例\n        producer.start();\n        producer.setRetryTimesWhenSendAsyncFailed(0);\n  \n    int messageCount = 100;\n        // 根据消息数量实例化倒计时计算器\n    final CountDownLatch2 countDownLatch = new CountDownLatch2(messageCount);\n        for (int i = 0; i \u003c messageCount; i++) {\n                final int index = i;\n                // 创建消息，并指定Topic，Tag和消息体\n                Message msg = new Message(\"TopicTest\",\n                    \"TagA\",\n                    \"OrderID188\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                // SendCallback接收异步返回结果的回调\n                producer.send(msg, new SendCallback() {\n                    @Override\n                    public void onSuccess(SendResult sendResult) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d OK %s %n\", index,\n                            sendResult.getMsgId());\n                    }\n                    @Override\n                    public void onException(Throwable e) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d Exception %s %n\", index, e);\n                        e.printStackTrace();\n                    }\n                });\n        }\n    // 等待5s\n    countDownLatch.await(5, TimeUnit.SECONDS);\n        // 如果不再发送消息，关闭Producer实例。\n        producer.shutdown();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-z6zy3su",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230107154920-z6zy3su",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、单向发送消息"
				}
			]
		},
		{
			"ID": "20230107154920-xcy6aj4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-xcy6aj4",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "这种方式主要用在不特别关心发送结果的场景，例如日志发送。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-vv7vpzk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-vv7vpzk",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class OnewayProducer {\n    public static void main(String[] args) throws Exception{\n        // 实例化消息生产者Producer\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        // 设置NameServer的地址\n        producer.setNamesrvAddr(\"localhost:9876\");\n        // 启动Producer实例\n        producer.start();\n        for (int i = 0; i \u003c 100; i++) {\n            // 创建消息，并指定Topic，Tag和消息体\n            Message msg = new Message(\"TopicTest\" /* Topic */,\n                \"TagA\" /* Tag */,\n                (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n            );\n            // 发送单向消息，没有任何返回结果\n            producer.sendOneway(msg);\n​\n        }\n        // 如果不再发送消息，关闭Producer实例。\n        producer.shutdown();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-9a4rzz1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-9a4rzz1",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.3 消费消息"
				}
			]
		},
		{
			"ID": "20230107154920-8zli6a9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-8zli6a9",
				"updated": "20230315173452"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Consumer {\n\n    public static void main(String[] args) throws InterruptedException, MQClientException {\n\n        // 实例化消费者\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name\");\n\n        // 设置NameServer的地址\n        consumer.setNamesrvAddr(\"localhost:9876\");\n\n        // 订阅一个或者多个Topic，以及Tag来过滤需要消费的消息\n        consumer.subscribe(\"TopicTest\", \"*\");\n        // 注册回调实现类来处理从broker拉取回来的消息\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override \n            public ConsumeConcurrentlyStatus consumeMessage(List\u003cMessageExt\u003e msgs, ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                // 标记该消息已经被成功消费\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        // 启动消费者实例\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-35dv4yn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107154920-35dv4yn",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 顺序消息样例"
				}
			]
		},
		{
			"ID": "20230107154920-oqhnp5p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-oqhnp5p",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "消息有序指的是可以按照消息的发送顺序来消费(FIFO)。RocketMQ可以严格的保证消息有序，可以分为分区有序或者全局有序。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-ckjxjp5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-ckjxjp5",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "顺序消费的原理解析，在默认的情况下消息发送会采取Round Robin轮询方式把消息发送到不同的queue(分区队列)；而消费消息的时候从多个queue上拉取消息，这种情况发送和消费是不能保证顺序。但是如果控制发送的顺序消息只依次发送到同一个queue中，消费的时候只从这个queue上依次拉取，则就保证了顺序。当发送和消费参与的queue只有一个，则是全局有序；如果多个queue参与，则为分区有序，即相对每个queue，消息都是有序的。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-1g993wr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-1g993wr",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "下面用订单进行分区有序的示例。一个订单的顺序流程是：创建、付款、推送、完成。订单号相同的消息会被先后发送到同一个队列中，消费时，同一个OrderId获取到的肯定是同一个队列。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-wf35xty",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-wf35xty",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 顺序消息生产"
				}
			]
		},
		{
			"ID": "20230107154920-autm99d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-autm99d",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package org.apache.rocketmq.example.order2;\n​\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\n​\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n​\n/**\n* Producer，发送顺序消息\n*/\npublic class Producer {\n​\n   public static void main(String[] args) throws Exception {\n       DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n​\n       producer.setNamesrvAddr(\"127.0.0.1:9876\");\n​\n       producer.start();\n​\n       String[] tags = new String[]{\"TagA\", \"TagC\", \"TagD\"};\n​\n       // 订单列表\n       List\u003cOrderStep\u003e orderList = new Producer().buildOrders();\n​\n       Date date = new Date();\n       SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n       String dateStr = sdf.format(date);\n       for (int i = 0; i \u003c 10; i++) {\n           // 加个时间前缀\n           String body = dateStr + \" Hello RocketMQ \" + orderList.get(i);\n           Message msg = new Message(\"TopicTest\", tags[i % tags.length], \"KEY\" + i, body.getBytes());\n​\n           SendResult sendResult = producer.send(msg, new MessageQueueSelector() {\n               @Override\n               public MessageQueue select(List\u003cMessageQueue\u003e mqs, Message msg, Object arg) {\n                   Long id = (Long) arg;  //根据订单id选择发送queue\n                   long index = id % mqs.size();\n                   return mqs.get((int) index);\n               }\n           }, orderList.get(i).getOrderId());//订单id\n​\n           System.out.println(String.format(\"SendResult status:%s, queueId:%d, body:%s\",\n               sendResult.getSendStatus(),\n               sendResult.getMessageQueue().getQueueId(),\n               body));\n       }\n​\n       producer.shutdown();\n   }\n​\n   /**\n    * 订单的步骤\n    */\n   private static class OrderStep {\n       private long orderId;\n       private String desc;\n​\n       public long getOrderId() {\n           return orderId;\n       }\n​\n       public void setOrderId(long orderId) {\n           this.orderId = orderId;\n       }\n​\n       public String getDesc() {\n           return desc;\n       }\n​\n       public void setDesc(String desc) {\n           this.desc = desc;\n       }\n​\n       @Override\n       public String toString() {\n           return \"OrderStep{\" +\n               \"orderId=\" + orderId +\n               \", desc='\" + desc + '\\'' +\n               '}';\n       }\n   }\n​\n   /**\n    * 生成模拟订单数据\n    */\n   private List\u003cOrderStep\u003e buildOrders() {\n       List\u003cOrderStep\u003e orderList = new ArrayList\u003cOrderStep\u003e();\n​\n       OrderStep orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103111039L);\n       orderDemo.setDesc(\"创建\");\n       orderList.add(orderDemo);\n​\n       orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103111065L);\n       orderDemo.setDesc(\"创建\");\n       orderList.add(orderDemo);\n​\n       orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103111039L);\n       orderDemo.setDesc(\"付款\");\n       orderList.add(orderDemo);\n​\n       orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103117235L);\n       orderDemo.setDesc(\"创建\");\n       orderList.add(orderDemo);\n​\n       orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103111065L);\n       orderDemo.setDesc(\"付款\");\n       orderList.add(orderDemo);\n​\n       orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103117235L);\n       orderDemo.setDesc(\"付款\");\n       orderList.add(orderDemo);\n​\n       orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103111065L);\n       orderDemo.setDesc(\"完成\");\n       orderList.add(orderDemo);\n​\n       orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103111039L);\n       orderDemo.setDesc(\"推送\");\n       orderList.add(orderDemo);\n​\n       orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103117235L);\n       orderDemo.setDesc(\"完成\");\n       orderList.add(orderDemo);\n​\n       orderDemo = new OrderStep();\n       orderDemo.setOrderId(15103111039L);\n       orderDemo.setDesc(\"完成\");\n       orderList.add(orderDemo);\n​\n       return orderList;\n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-ajepwr1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-ajepwr1",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2 顺序消费消息"
				}
			]
		},
		{
			"ID": "20230107154920-bc0uske",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-bc0uske",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package org.apache.rocketmq.example.order2;\n​\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n​\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\n​\n/**\n* 顺序消息消费，带事务方式（应用可控制Offset什么时候提交）\n*/\npublic class ConsumerInOrder {\n​\n   public static void main(String[] args) throws Exception {\n       DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_3\");\n       consumer.setNamesrvAddr(\"127.0.0.1:9876\");\n       /**\n        * 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费\u003cbr\u003e\n        * 如果非第一次启动，那么按照上次消费的位置继续消费\n        */\n       consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n​\n       consumer.subscribe(\"TopicTest\", \"TagA || TagC || TagD\");\n​\n       consumer.registerMessageListener(new MessageListenerOrderly() {\n​\n           Random random = new Random();\n​\n           @Override\n           public ConsumeOrderlyStatus consumeMessage(List\u003cMessageExt\u003e msgs, ConsumeOrderlyContext context) {\n               context.setAutoCommit(true);\n               for (MessageExt msg : msgs) {\n                   // 可以看到每个queue有唯一的consume线程来消费, 订单对每个queue(分区)有序\n                   System.out.println(\"consumeThread=\" + Thread.currentThread().getName() + \"queueId=\" + msg.getQueueId() + \", content:\" + new String(msg.getBody()));\n               }\n​\n               try {\n                   //模拟业务逻辑处理中...\n                   TimeUnit.SECONDS.sleep(random.nextInt(10));\n               } catch (Exception e) {\n                   e.printStackTrace();\n               }\n               return ConsumeOrderlyStatus.SUCCESS;\n           }\n       });\n​\n       consumer.start();\n​\n       System.out.println(\"Consumer Started.\");\n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-uornzvt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107154920-uornzvt",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3 延时消息样例"
				}
			]
		},
		{
			"ID": "20230107154920-13x3fkr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-13x3fkr",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.1 启动消费者等待传入订阅消息"
				}
			]
		},
		{
			"ID": "20230107154920-qhuhrn4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-qhuhrn4",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport java.util.List;\n\npublic class ScheduledMessageConsumer {\n   public static void main(String[] args) throws Exception {\n      // 实例化消费者\n      DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"ExampleConsumer\");\n      // 订阅Topics\n      consumer.subscribe(\"TestTopic\", \"*\");\n      // 注册消息监听者\n      consumer.registerMessageListener(new MessageListenerConcurrently() {\n          @Override\n          public ConsumeConcurrentlyStatus consumeMessage(List\u003cMessageExt\u003e messages, ConsumeConcurrentlyContext context) {\n              for (MessageExt message : messages) {\n                  // Print approximate delay time period\n                  System.out.println(\"Receive message[msgId=\" + message.getMsgId() + \"] \" + (System.currentTimeMillis() - message.getBornTimestamp()) + \"ms later\");\n              }\n              return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n          }\n      });\n      // 启动消费者\n      consumer.start();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-rfnrunn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-rfnrunn",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.2 发送延时消息"
				}
			]
		},
		{
			"ID": "20230107154920-nzbst5o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-nzbst5o",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class ScheduledMessageProducer {\n   public static void main(String[] args) throws Exception {\n      // 实例化一个生产者来产生延时消息\n      DefaultMQProducer producer = new DefaultMQProducer(\"ExampleProducerGroup\");\n      // 启动生产者\n      producer.start();\n      int totalMessagesToSend = 100;\n      for (int i = 0; i \u003c totalMessagesToSend; i++) {\n          Message message = new Message(\"TestTopic\", (\"Hello scheduled message \" + i).getBytes());\n          // 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)\n          message.setDelayTimeLevel(3);\n          // 发送消息\n          producer.send(message);\n      }\n       // 关闭生产者\n      producer.shutdown();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-wfjyvyd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-wfjyvyd",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.3 验证"
				}
			]
		},
		{
			"ID": "20230107154920-4m3q5do",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-4m3q5do",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "您将会看到消息的消费比存储时间晚10秒。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-7yvjwas",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-7yvjwas",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.4 延时消息的使用场景"
				}
			]
		},
		{
			"ID": "20230107154920-wl1w97j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-wl1w97j",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "比如电商里，提交了一个订单就可以发送一个延时消息，1h后去检查这个订单的状态，如果还是未付款就取消订单释放库存。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-tv26b5d",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-tv26b5d",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.5 延时消息的使用限制"
				}
			]
		},
		{
			"ID": "20230107154920-huz1tqi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-huz1tqi",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// org/apache/rocketmq/store/config/MessageStoreConfig.java\n\nprivate String messageDelayLevel = \"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h\";\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-vbjafal",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-vbjafal",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "现在RocketMq并不支持任意时间的延时，需要设置几个固定的延时等级，从1s到2h分别对应着等级1到18"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "消息消费失败会进入延时消息队列，消息发送时间与设置的延时等级和重试次数有关，详见代码"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "SendMessageProcessor.java"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-o5a90wb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107154920-o5a90wb",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4 批量消息样例"
				}
			]
		},
		{
			"ID": "20230107154920-ep0xp8y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-ep0xp8y",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "批量发送消息能显著提高传递小消息的性能。限制是这些批量消息应该有相同的topic，相同的waitStoreMsgOK，而且不能是延时消息。此外，这一批消息的总大小不应超过4MB。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-6oc6jxy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-6oc6jxy",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.1 发送批量消息"
				}
			]
		},
		{
			"ID": "20230107154920-h4oqpn3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-h4oqpn3",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "如果您每次只发送不超过4MB的消息，则很容易使用批处理，样例如下："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-ix47dwe",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-ix47dwe",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String topic = \"BatchTest\";\nList\u003cMessage\u003e messages = new ArrayList\u003c\u003e();\nmessages.add(new Message(topic, \"TagA\", \"OrderID001\", \"Hello world 0\".getBytes()));\nmessages.add(new Message(topic, \"TagA\", \"OrderID002\", \"Hello world 1\".getBytes()));\nmessages.add(new Message(topic, \"TagA\", \"OrderID003\", \"Hello world 2\".getBytes()));\ntry {\n   producer.send(messages);\n} catch (Exception e) {\n   e.printStackTrace();\n   //处理error\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-bsip33c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-bsip33c",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.2 消息列表分割"
				}
			]
		},
		{
			"ID": "20230107154920-8i92yfx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-8i92yfx",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "复杂度只有当你发送大批量时才会增长，你可能不确定它是否超过了大小限制（4MB）。这时候你最好把你的消息列表分割一下："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-f2y3eef",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-f2y3eef",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ListSplitter implements Iterator\u003cList\u003cMessage\u003e\u003e { \n    private final int SIZE_LIMIT = 1024 * 1024 * 4;\n    private final List\u003cMessage\u003e messages;\n    private int currIndex;\n    public ListSplitter(List\u003cMessage\u003e messages) { \n        this.messages = messages;\n    }\n    @Override public boolean hasNext() {\n        return currIndex \u003c messages.size(); \n    }\n    @Override public List\u003cMessage\u003e next() { \n        int startIndex = getStartIndex();\n        int nextIndex = startIndex;\n        int totalSize = 0;\n        for (; nextIndex \u003c messages.size(); nextIndex++) {\n            Message message = messages.get(nextIndex); \n            int tmpSize = calcMessageSize(message);\n            if (tmpSize + totalSize \u003e SIZE_LIMIT) {\n                break; \n            } else {\n                totalSize += tmpSize; \n            }\n        }\n        List\u003cMessage\u003e subList = messages.subList(startIndex, nextIndex); \n        currIndex = nextIndex;\n        return subList;\n    }\n    private int getStartIndex() {\n        Message currMessage = messages.get(currIndex); \n        int tmpSize = calcMessageSize(currMessage); \n        while(tmpSize \u003e SIZE_LIMIT) {\n            currIndex += 1;\n            Message message = messages.get(curIndex); \n            tmpSize = calcMessageSize(message);\n        }\n        return currIndex; \n    }\n    private int calcMessageSize(Message message) {\n        int tmpSize = message.getTopic().length() + message.getBody().length; \n        Map\u003cString, String\u003e properties = message.getProperties();\n        for (Map.Entry\u003cString, String\u003e entry : properties.entrySet()) {\n            tmpSize += entry.getKey().length() + entry.getValue().length(); \n        }\n        tmpSize = tmpSize + 20; // 增加⽇日志的开销20字节\n        return tmpSize; \n    }\n}\n//把大的消息分裂成若干个小的消息\nListSplitter splitter = new ListSplitter(messages);\nwhile (splitter.hasNext()) {\n  try {\n      List\u003cMessage\u003e  listItem = splitter.next();\n      producer.send(listItem);\n  } catch (Exception e) {\n      e.printStackTrace();\n      //处理error\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-o03tmxz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107154920-o03tmxz",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5 过滤消息样例"
				}
			]
		},
		{
			"ID": "20230107154920-2nkvcr8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-2nkvcr8",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "在大多数情况下，TAG是一个简单而有用的设计，其可以来选择您想要的消息。例如："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-404ble9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-404ble9",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"CID_EXAMPLE\");\nconsumer.subscribe(\"TOPIC\", \"TAGA || TAGB || TAGC\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-bydzl26",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-bydzl26",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "消费者将接收包含TAGA或TAGB或TAGC的消息。但是限制是一个消息只能有一个标签，这对于复杂的场景可能不起作用。在这种情况下，可以使用SQL表达式筛选消息。SQL特性可以通过发送消息时的属性来进行计算。在RocketMQ定义的语法下，可以实现一些简单的逻辑。下面是一个例子："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-ezjcu2y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-ezjcu2y",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "------------\n| message  |\n|----------|  a \u003e 5 AND b = 'abc'\n| a = 10   |  --------------------\u003e Gotten\n| b = 'abc'|\n| c = true |\n------------\n------------\n| message  |\n|----------|   a \u003e 5 AND b = 'abc'\n| a = 1    |  --------------------\u003e Missed\n| b = 'abc'|\n| c = true |\n------------\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-us2m1b9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-us2m1b9",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.1 基本语法"
				}
			]
		},
		{
			"ID": "20230107154920-8s8away",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-8s8away",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "RocketMQ只定义了一些基本语法来支持这个特性。你也可以很容易地扩展它。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-ty7pn7b",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230107154920-ty7pn7b",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"ID": "20230107154920-ypvy0c6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-ypvy0c6",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-80nq8h5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-80nq8h5",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "数值比较，比如：\u003e，\u003e=，\u003c，\u003c=，BETWEEN，=；"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-gdlq4ro",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-gdlq4ro",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-91vlskl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-91vlskl",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "字符比较，比如：=，\u003c\u003e，IN；"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-pi12bzj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-pi12bzj",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-bf3rbns",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-bf3rbns",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "IS NULL"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 或者 "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "IS NOT NULL；"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-dau97rl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-dau97rl",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-mqyq9p2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-mqyq9p2",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "**逻辑符号 **"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "AND，OR，NOT；"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-dormecg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-dormecg",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "常量支持类型为："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-e0icuur",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230107154920-e0icuur",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"ID": "20230107154920-r6ov415",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-r6ov415",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-rpntzvn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-rpntzvn",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "数值，比如：123，3.1415；"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-cfxy4e1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-cfxy4e1",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-6a8vk47",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-6a8vk47",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "字符，比如：'abc'，必须用单引号包裹起来；"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-rh4429p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-rh4429p",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-p33wukb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-p33wukb",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "NULL"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，特殊的常量"
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-eces92m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-eces92m",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-936xvmx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-936xvmx",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "布尔值，TRUE"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 或 "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "FALSE"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-2cljivd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-2cljivd",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "只有使用push模式的消费者才能用使用SQL92标准的sql语句，接口如下："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-dba1yc1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-dba1yc1",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public void subscribe(finalString topic, final MessageSelector messageSelector)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-gulym4k",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-gulym4k",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.2 使用样例"
				}
			]
		},
		{
			"ID": "20230107154920-yp2k28n",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230107154920-yp2k28n",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、生产者样例"
				}
			]
		},
		{
			"ID": "20230107154920-k85c4sj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-k85c4sj",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "发送消息时，你能通过"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "putUserProperty"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来设置消息的属性"
				}
			]
		},
		{
			"ID": "20230107154920-suo2sa8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-suo2sa8",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\nproducer.start();\nMessage msg = new Message(\"TopicTest\",\n   tag,\n   (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET)\n);\n// 设置一些属性\nmsg.putUserProperty(\"a\", String.valueOf(i));\nSendResult sendResult = producer.send(msg);\n\nproducer.shutdown();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-wch751n",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230107154920-wch751n",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、消费者样例"
				}
			]
		},
		{
			"ID": "20230107154920-1epmaal",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-1epmaal",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "用MessageSelector.bySql来使用sql筛选消息"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-i43sd73",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-i43sd73",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_4\");\n// 只有订阅的消息有这个属性a, a \u003e=0 and a \u003c= 3\nconsumer.subscribe(\"TopicTest\", MessageSelector.bySql(\"a between 0 and 3\");\nconsumer.registerMessageListener(new MessageListenerConcurrently() {\n   @Override\n   public ConsumeConcurrentlyStatus consumeMessage(List\u003cMessageExt\u003e msgs, ConsumeConcurrentlyContext context) {\n       return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n   }\n});\nconsumer.start();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-hhcfmkf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107154920-hhcfmkf",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6 消息事务样例"
				}
			]
		},
		{
			"ID": "20230107154920-xdidkm8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-xdidkm8",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "事务消息共有三种状态，提交状态、回滚状态、中间状态："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-qj74px5",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230107154920-qj74px5",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"ID": "20230107154920-1z9yn88",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-1z9yn88",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-j9rauah",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-j9rauah",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "TransactionStatus.CommitTransaction: 提交事务，它允许消费者消费此消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-pio3f3h",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-pio3f3h",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-mk0jwew",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-mk0jwew",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "TransactionStatus.RollbackTransaction: 回滚事务，它代表该消息将被删除，不允许被消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-tx0vrfw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107154920-tx0vrfw",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-vf6q7r4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-vf6q7r4",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "TransactionStatus.Unknown: 中间状态，它代表需要检查消息队列来确定状态。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-n7dx81u",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-n7dx81u",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6.1 发送事务消息样例"
				}
			]
		},
		{
			"ID": "20230107154920-2k20vy6",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230107154920-2k20vy6",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、创建事务性生产者"
				}
			]
		},
		{
			"ID": "20230107154920-nxoc1m4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-nxoc1m4",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "**使用 **"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "TransactionMQProducer"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "类创建生产者，并指定唯一的 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "ProducerGroup"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，就可以设置自定义线程池来处理这些检查请求。执行本地事务后、需要根据执行结果对消息队列进行回复。回传的事务状态在请参考前一节。"
				}
			]
		},
		{
			"ID": "20230107154920-yoh2jck",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-yoh2jck",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport java.util.List;\npublic class TransactionProducer {\n   public static void main(String[] args) throws MQClientException, InterruptedException {\n       TransactionListener transactionListener = new TransactionListenerImpl();\n       TransactionMQProducer producer = new TransactionMQProducer(\"please_rename_unique_group_name\");\n       ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue\u003cRunnable\u003e(2000), new ThreadFactory() {\n           @Override\n           public Thread newThread(Runnable r) {\n               Thread thread = new Thread(r);\n               thread.setName(\"client-transaction-msg-check-thread\");\n               return thread;\n           }\n       });\n       producer.setExecutorService(executorService);\n       producer.setTransactionListener(transactionListener);\n       producer.start();\n       String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n       for (int i = 0; i \u003c 10; i++) {\n           try {\n               Message msg =\n                   new Message(\"TopicTest1234\", tags[i % tags.length], \"KEY\" + i,\n                       (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n               SendResult sendResult = producer.sendMessageInTransaction(msg, null);\n               System.out.printf(\"%s%n\", sendResult);\n               Thread.sleep(10);\n           } catch (MQClientException | UnsupportedEncodingException e) {\n               e.printStackTrace();\n           }\n       }\n       for (int i = 0; i \u003c 100000; i++) {\n           Thread.sleep(1000);\n       }\n       producer.shutdown();\n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-wvechp6",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230107154920-wvechp6",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、实现事务的监听接口"
				}
			]
		},
		{
			"ID": "20230107154920-0mfo16t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-0mfo16t",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "**当发送半消息成功时，我们使用 **"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "executeLocalTransaction"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 方法来执行本地事务。它返回前一节中提到的三个事务状态之一。"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "checkLocalTransaction"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 方法用于检查本地事务状态，并回应消息队列的检查请求。它也是返回前一节中提到的三个事务状态之一。"
				}
			]
		},
		{
			"ID": "20230107154920-8syb0u1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-8syb0u1",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class TransactionListenerImpl implements TransactionListener {\n  private AtomicInteger transactionIndex = new AtomicInteger(0);\n  private ConcurrentHashMap\u003cString, Integer\u003e localTrans = new ConcurrentHashMap\u003c\u003e();\n  @Override\n  public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n      int value = transactionIndex.getAndIncrement();\n      int status = value % 3;\n      localTrans.put(msg.getTransactionId(), status);\n      return LocalTransactionState.UNKNOW;\n  }\n  @Override\n  public LocalTransactionState checkLocalTransaction(MessageExt msg) {\n      Integer status = localTrans.get(msg.getTransactionId());\n      if (null != status) {\n          switch (status) {\n              case 0:\n                  return LocalTransactionState.UNKNOW;\n              case 1:\n                  return LocalTransactionState.COMMIT_MESSAGE;\n              case 2:\n                  return LocalTransactionState.ROLLBACK_MESSAGE;\n          }\n      }\n      return LocalTransactionState.COMMIT_MESSAGE;\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-5yqct7a",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-5yqct7a",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6.2 事务消息使用上的限制"
				}
			]
		},
		{
			"ID": "20230107154920-8miptqs",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230107154920-8miptqs",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"ID": "20230107154920-pua6a42",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230107154920-pua6a42",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-qa0sx01",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-qa0sx01",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "事务消息不支持延时消息和批量消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-l1ceeh0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230107154920-l1ceeh0",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-oh0dtat",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-oh0dtat",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "**为了避免单个消息被检查太多次而导致半队列消息累积，我们默认将单个消息的检查次数限制为 15 次，但是用户可以通过 Broker 配置文件的 **"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "transactionCheckMax"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "参数来修改此限制。如果已经检查某条消息超过 N 次的话（ N = "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "transactionCheckMax"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ） 则 Broker 将丢弃此消息，并在默认情况下同时打印错误日志。用户可以通过重写 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "AbstractTransactionalMessageCheckListener"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 类来修改这个行为。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-2j1l7og",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230107154920-2j1l7og",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-2xj389r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-2xj389r",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "**事务消息将在 Broker 配置文件中的参数 transactionTimeout 这样的特定时间长度之后被检查。当发送事务消息时，用户还可以通过设置用户属性 CHECK_IMMUNITY_TIME_IN_SECONDS 来改变这个限制，该参数优先于 **"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "transactionTimeout"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 参数。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-8mk3np7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230107154920-8mk3np7",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-4vbpmoh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-4vbpmoh",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "事务性消息可能不止一次被检查或消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-gffac3e",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230107154920-gffac3e",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-j9dyxaz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-j9dyxaz",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "提交给用户的目标主题消息可能会失败，目前这依日志的记录而定。它的高可用性通过 RocketMQ 本身的高可用性机制来保证，如果希望确保事务消息不丢失、并且事务完整性得到保证，建议使用同步的双重写入机制。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107154920-s828zh6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230107154920-s828zh6",
						"updated": "20230107154920"
					},
					"Children": [
						{
							"ID": "20230107154920-i0zk96l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107154920-i0zk96l",
								"updated": "20230107154920"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "事务消息的生产者 ID 不能与其他类型消息的生产者 ID 共享。与其他类型的消息不同，事务消息允许反向查询、MQ服务器能通过它们的生产者 ID 查询到消费者。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-ozfpmmi",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107154920-ozfpmmi",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7 Logappender样例"
				}
			]
		},
		{
			"ID": "20230107154920-a60plc3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-a60plc3",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "RocketMQ日志提供log4j、log4j2和logback日志框架作为业务应用，下面是配置样例"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-6w90y5q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-6w90y5q",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7.1 log4j样例"
				}
			]
		},
		{
			"ID": "20230107154920-9ytgzgz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-9ytgzgz",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "按下面样例使用log4j属性配置"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-oiu0tua",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-oiu0tua",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "log4j.appender.mq=org.apache.rocketmq.logappender.log4j.RocketmqLog4jAppender\nlog4j.appender.mq.Tag=yourTag\nlog4j.appender.mq.Topic=yourLogTopic\nlog4j.appender.mq.ProducerGroup=yourLogGroup\nlog4j.appender.mq.NameServerAddress=yourRocketmqNameserverAddress\nlog4j.appender.mq.layout=org.apache.log4j.PatternLayout\nlog4j.appender.mq.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-4r [%t] (%F:%L) %-5p - %m%n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-xkekolz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-xkekolz",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "按下面样例使用log4j xml配置来使用异步添加日志"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-vzitlr9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-vzitlr9",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cappender name=\"mqAppender1\"class=\"org.apache.rocketmq.logappender.log4j.RocketmqLog4jAppender\"\u003e\n  \u003cparam name=\"Tag\" value=\"yourTag\" /\u003e\n  \u003cparam name=\"Topic\" value=\"yourLogTopic\" /\u003e\n  \u003cparam name=\"ProducerGroup\" value=\"yourLogGroup\" /\u003e\n  \u003cparam name=\"NameServerAddress\" value=\"yourRocketmqNameserverAddress\"/\u003e\n  \u003clayout class=\"org.apache.log4j.PatternLayout\"\u003e\n      \u003cparam name=\"ConversionPattern\" value=\"%d{yyyy-MM-dd HH:mm:ss}-%p %t %c - %m%n\" /\u003e\n  \u003c/layout\u003e\n\u003c/appender\u003e\n\u003cappender name=\"mqAsyncAppender1\"class=\"org.apache.log4j.AsyncAppender\"\u003e\n  \u003cparam name=\"BufferSize\" value=\"1024\" /\u003e\n  \u003cparam name=\"Blocking\" value=\"false\" /\u003e\n  \u003cappender-ref ref=\"mqAppender1\"/\u003e\n\u003c/appender\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-u036olx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-u036olx",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7.2 log4j2样例"
				}
			]
		},
		{
			"ID": "20230107154920-75m3mmy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-75m3mmy",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "用log4j2时，配置如下，如果想要非阻塞，只需要使用异步添加引用即可"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-wtbpaaj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-wtbpaaj",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cRocketMQ name=\"rocketmqAppender\" producerGroup=\"yourLogGroup\" nameServerAddress=\"yourRocketmqNameserverAddress\"\n   topic=\"yourLogTopic\" tag=\"yourTag\"\u003e\n  \u003cPatternLayout pattern=\"%d [%p] hahahah %c %m%n\"/\u003e\n\u003c/RocketMQ\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-ok6hyld",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-ok6hyld",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7.3 logback样例"
				}
			]
		},
		{
			"ID": "20230107154920-0fvm0yh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-0fvm0yh",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cappender name=\"mqAppender1\"class=\"org.apache.rocketmq.logappender.logback.RocketmqLogbackAppender\"\u003e\n  \u003ctag\u003eyourTag\u003c/tag\u003e\n  \u003ctopic\u003eyourLogTopic\u003c/topic\u003e\n  \u003cproducerGroup\u003eyourLogGroup\u003c/producerGroup\u003e\n  \u003cnameServerAddress\u003eyourRocketmqNameserverAddress\u003c/nameServerAddress\u003e\n  \u003clayout\u003e\n      \u003cpattern\u003e%date %p %t - %m%n\u003c/pattern\u003e\n  \u003c/layout\u003e\n\u003c/appender\u003e\n\u003cappender name=\"mqAsyncAppender1\"class=\"ch.qos.logback.classic.AsyncAppender\"\u003e\n  \u003cqueueSize\u003e1024\u003c/queueSize\u003e\n  \u003cdiscardingThreshold\u003e80\u003c/discardingThreshold\u003e\n  \u003cmaxFlushTime\u003e2000\u003c/maxFlushTime\u003e\n  \u003cneverBlock\u003etrue\u003c/neverBlock\u003e\n  \u003cappender-ref ref=\"mqAppender1\"/\u003e\n\u003c/appender\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-6iyvibd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107154920-6iyvibd",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "8 OpenMessaging样例"
				}
			]
		},
		{
			"ID": "20230107154920-9wf8f0q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-9wf8f0q",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "** **"
				},
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "OpenMessaging"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://www.google.com/url?q=http://openmessaging.cloud/\u0026sa=D\u0026ust=1546524111089000"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "旨在建立消息和流处理规范，以为金融、电子商务、物联网和大数据领域提供通用框架及工业级指导方案。在分布式异构环境中，设计原则是面向云、简单、灵活和独立于语言。符合这些规范将帮助企业方便的开发跨平台和操作系统的异构消息传递应用程序。提供了openmessaging-api 0.3.0-alpha的部分实现，下面的示例演示如何基于OpenMessaging访问RocketMQ。"
				}
			]
		},
		{
			"ID": "20230107154920-7typqwt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-7typqwt",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "8.1 OMSProducer样例"
				}
			]
		},
		{
			"ID": "20230107154920-57kqai8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-57kqai8",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "下面的示例演示如何在同步、异步或单向传输中向RocketMQ代理发送消息。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-1romeav",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-1romeav",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import io.openmessaging.Future;\nimport io.openmessaging.FutureListener;\nimport io.openmessaging.Message;\nimport io.openmessaging.MessagingAccessPoint;\nimport io.openmessaging.OMS;\nimport io.openmessaging.producer.Producer;\nimport io.openmessaging.producer.SendResult;\nimport java.nio.charset.Charset;\nimport java.util.concurrent.CountDownLatch;\n\npublic class SimpleProducer {\n    public static void main(String[] args) {\n       final MessagingAccessPoint messagingAccessPoint =\n           OMS.getMessagingAccessPoint(\"oms:rocketmq://localhost:9876/default:default\");\n       final Producer producer = messagingAccessPoint.createProducer();\n       messagingAccessPoint.startup();\n       System.out.printf(\"MessagingAccessPoint startup OK%n\");\n       producer.startup();\n       System.out.printf(\"Producer startup OK%n\");\n       {\n           Message message = producer.createBytesMessage(\"OMS_HELLO_TOPIC\", \"OMS_HELLO_BODY\".getBytes(Charset.forName(\"UTF-8\")));\n           SendResult sendResult = producer.send(message);\n           //final Void aVoid = result.get(3000L);\n           System.out.printf(\"Send async message OK, msgId: %s%n\", sendResult.messageId());\n       }\n       final CountDownLatch countDownLatch = new CountDownLatch(1);\n       {\n           final Future\u003cSendResult\u003e result = producer.sendAsync(producer.createBytesMessage(\"OMS_HELLO_TOPIC\", \"OMS_HELLO_BODY\".getBytes(Charset.forName(\"UTF-8\"))));\n           result.addListener(new FutureListener\u003cSendResult\u003e() {\n               @Override\n               public void operationComplete(Future\u003cSendResult\u003e future) {\n                   if (future.getThrowable() != null) {\n                       System.out.printf(\"Send async message Failed, error: %s%n\", future.getThrowable().getMessage());\n                   } else {\n                       System.out.printf(\"Send async message OK, msgId: %s%n\", future.get().messageId());\n                   }\n                   countDownLatch.countDown();\n               }\n           });\n       }\n       {\n           producer.sendOneway(producer.createBytesMessage(\"OMS_HELLO_TOPIC\", \"OMS_HELLO_BODY\".getBytes(Charset.forName(\"UTF-8\"))));\n           System.out.printf(\"Send oneway message OK%n\");\n       }\n       try {\n           countDownLatch.await();\n           Thread.sleep(500); // 等一些时间来发送消息\n       } catch (InterruptedException ignore) {\n       }\n       producer.shutdown();\n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-20pqk95",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-20pqk95",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "8.2 OMSPullConsumer"
				}
			]
		},
		{
			"ID": "20230107154920-7iuprla",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-7iuprla",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "用OMS PullConsumer 来从指定的队列中拉取消息"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-f6nz4th",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-f6nz4th",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import io.openmessaging.Message;\nimport io.openmessaging.MessagingAccessPoint;\nimport io.openmessaging.OMS;\nimport io.openmessaging.OMSBuiltinKeys;\nimport io.openmessaging.consumer.PullConsumer;\nimport io.openmessaging.producer.Producer;\nimport io.openmessaging.producer.SendResult;\n​\npublic class SimplePullConsumer {\n    public static void main(String[] args) {\n       final MessagingAccessPoint messagingAccessPoint =\n           OMS.getMessagingAccessPoint(\"oms:rocketmq://localhost:9876/default:default\");\n       messagingAccessPoint.startup();\n       final Producer producer = messagingAccessPoint.createProducer();\n       final PullConsumer consumer = messagingAccessPoint.createPullConsumer(\n           OMS.newKeyValue().put(OMSBuiltinKeys.CONSUMER_ID, \"OMS_CONSUMER\"));\n       messagingAccessPoint.startup();\n       System.out.printf(\"MessagingAccessPoint startup OK%n\");\n       final String queueName = \"TopicTest\";\n       producer.startup();\n       Message msg = producer.createBytesMessage(queueName, \"Hello Open Messaging\".getBytes());\n       SendResult sendResult = producer.send(msg);\n       System.out.printf(\"Send Message OK. MsgId: %s%n\", sendResult.messageId());\n       producer.shutdown();\n       consumer.attachQueue(queueName);\n       consumer.startup();\n       System.out.printf(\"Consumer startup OK%n\");\n       // 运行直到发现一个消息被发送了\n       boolean stop = false;\n       while (!stop) {\n           Message message = consumer.receive();\n           if (message != null) {\n               String msgId = message.sysHeaders().getString(Message.BuiltinKeys.MESSAGE_ID);\n               System.out.printf(\"Received one message: %s%n\", msgId);\n               consumer.ack(msgId);\n               if (!stop) {\n                   stop = msgId.equalsIgnoreCase(sendResult.messageId());\n               }\n           } else {\n               System.out.printf(\"Return without any message%n\");\n           }\n       }\n       consumer.shutdown();\n       messagingAccessPoint.shutdown();\n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107154920-edcv6dt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107154920-edcv6dt",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "8.3 OMSPushConsumer"
				}
			]
		},
		{
			"ID": "20230107154920-4x8npsm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107154920-4x8npsm",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "以下示范如何将 OMS PushConsumer 添加到指定的队列，并通过 MessageListener 消费这些消息。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107154920-020c9sl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107154920-020c9sl",
				"updated": "20230107154920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import io.openmessaging.Message;\nimport io.openmessaging.MessagingAccessPoint;\nimport io.openmessaging.OMS;\nimport io.openmessaging.OMSBuiltinKeys;\nimport io.openmessaging.consumer.MessageListener;\nimport io.openmessaging.consumer.PushConsumer;\n​\npublic class SimplePushConsumer {\n    public static void main(String[] args) {\n       final MessagingAccessPoint messagingAccessPoint = OMS\n           .getMessagingAccessPoint(\"oms:rocketmq://localhost:9876/default:default\");\n       final PushConsumer consumer = messagingAccessPoint.\n           createPushConsumer(OMS.newKeyValue().put(OMSBuiltinKeys.CONSUMER_ID, \"OMS_CONSUMER\"));\n       messagingAccessPoint.startup();\n       System.out.printf(\"MessagingAccessPoint startup OK%n\");\n       Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {\n           @Override\n           public void run() {\n               consumer.shutdown();\n               messagingAccessPoint.shutdown();\n           }\n       }));\n       consumer.attachQueue(\"OMS_HELLO_TOPIC\", new MessageListener() {\n           @Override\n           public void onReceived(Message message, Context context) {\n               System.out.printf(\"Received one message: %s%n\", message.sysHeaders().getString(Message.BuiltinKeys.MESSAGE_ID));\n               context.ack();\n           }\n       });\n       consumer.startup();\n       System.out.printf(\"Consumer startup OK%n\");\n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153842-gyfkymg",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153842-gyfkymg",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "经常被问到的问题"
				}
			]
		},
		{
			"ID": "20230107153842-vjivjzo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153842-vjivjzo",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "以下是关于RocketMQ项目的常见问题"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-35da3o3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153842-35da3o3",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 基本"
				}
			]
		},
		{
			"ID": "20230107153842-6bisb5z",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230107153842-6bisb5z",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"ID": "20230107153842-eu74e4d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230107153842-eu74e4d",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-gqvpnd0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-gqvpnd0",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "为什么我们要使用RocketMQ而不是选择其他的产品？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "请参考"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeLink",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "为什么要选择RocketMQ"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "http://rocketmq.apache.org/docs/motivation/"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-3yd8jxt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230107153842-3yd8jxt",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-i10chn0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-i10chn0",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "我是否需要安装其他的软件才能使用RocketMQ，例如zookeeper？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "不需要，RocketMQ可以独立的运行。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-qf9ibam",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153842-qf9ibam",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 使用"
				}
			]
		},
		{
			"ID": "20230107153842-9gf4b48",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230107153842-9gf4b48",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"ID": "20230107153842-8rktad6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230107153842-8rktad6",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-qbmxjzk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-qbmxjzk",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "新创建的Consumer ID从哪里开始消费消息？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）如果发送的消息在三天之内，那么消费者会从服务器中保存的第一条消息开始消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）如果发送的消息已经超过三天，则消费者会从服务器中的最新消息开始消费，也就是从队列的尾部开始消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "3）如果消费者重新启动，那么它会从最后一个消费位置开始消费消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-j8ywyl6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230107153842-j8ywyl6",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-kh5eme2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-kh5eme2",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当消费失败的时候如何重新消费消息？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）在集群模式下，消费的业务逻辑代码会返回Action.ReconsumerLater，NULL，或者抛出异常，如果一条消息消费失败，最多会重试16次，之后该消息会被丢弃。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）在广播消费模式下，广播消费仍然保证消息至少被消费一次，但不提供重发的选项。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-pmkdniu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230107153842-pmkdniu",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-jp0eqfl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-jp0eqfl",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当消费失败的时候如何找到失败的消息？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）使用按时间的主题查询，可以查询到一段时间内的消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）使用主题和消息ID来准确查询消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "3）使用主题和消息的Key来准确查询所有消息Key相同的消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-jpkyc1d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230107153842-jpkyc1d",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-ebnhy4u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-ebnhy4u",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消息只会被传递一次吗？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "RocketMQ 确保所有消息至少传递一次。 在大多数情况下，消息不会重复。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-n2f4yla",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230107153842-n2f4yla",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-wgongh8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-wgongh8",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "如何增加一个新的Broker？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）启动一个新的Broker并将其注册到name server中的Broker列表里。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）默认只自动创建内部系统topic和consumer group。 如果您希望在新节点上拥有您的业务主题和消费者组，请从现有的Broker中复制它们。 我们提供了管理工具和命令行来处理此问题。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-wy9pcy8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153842-wy9pcy8",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3 配置相关"
				}
			]
		},
		{
			"ID": "20230107153842-1vonuab",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153842-1vonuab",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "以下回答均为默认值，可通过配置修改。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-lgrzpmv",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230107153842-lgrzpmv",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"ID": "20230107153842-rl4kfgv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230107153842-rl4kfgv",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-uqsq843",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-uqsq843",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消息在服务器上可以保存多长时间？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "存储的消息将最多保存 3 天，超过 3 天未使用的消息将被删除。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-yd40bti",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230107153842-yd40bti",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-2oh0rc4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-2oh0rc4",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消息体的大小限制是多少？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "通常是256KB"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-nkq6alm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230107153842-nkq6alm",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-jtmwlsn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-jtmwlsn",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "怎么设置消费者线程数？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当你启动消费者的时候，可以设置 ConsumeThreadNums属性的值，举例如下："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20230107153842-3qw0yvr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230107153842-3qw0yvr",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "consumer.setConsumeThreadMin(20);\nconsumer.setConsumeThreadMax(20);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-0xsd03v",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153842-0xsd03v",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4 错误"
				}
			]
		},
		{
			"ID": "20230107153842-7idp8gb",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230107153842-7idp8gb",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"ID": "20230107153842-s46pmsi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230107153842-s46pmsi",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-ulg0lyq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-ulg0lyq",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当你启动一个生产者或消费者的过程失败了并且错误信息是生产者组或消费者重复"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "原因：使用同一个Producer/Consumer Group在同一个JVM中启动多个Producer/Consumer实例可能会导致客户端无法启动。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "解决方案：确保一个 Producer/Consumer Group 对应的 JVM 只启动一个 Producer/Consumer 实例。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-kvui8gx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230107153842-kvui8gx",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-danfds9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-danfds9",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消费者无法在广播模式下开始加载 json 文件"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "原因：fastjson 版本太低，无法让广播消费者加载本地 offsets.json，导致消费者启动失败。 损坏的 fastjson 文件也会导致同样的问题。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "解决方案：Fastjson 版本必须升级到 RocketMQ 客户端依赖版本，以确保可以加载本地 offsets.json。 默认情况下，offsets.json 文件在 /home/{user}/.rocketmq_offsets 中。 或者检查fastjson的完整性。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-9ssu61h",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230107153842-9ssu61h",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-q9bkwl0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-q9bkwl0",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Broker崩溃以后有什么影响？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）Master节点崩溃"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消息不能再发送到该Broker集群，但是如果您有另一个可用的Broker集群，那么在主题存在的条件下仍然可以发送消息。消息仍然可以从Slave节点消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）一些Slave节点崩溃"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "只要有另一个工作的slave，就不会影响发送消息。 对消费消息也不会产生影响，除非消费者组设置为优先从该Slave消费。 默认情况下，消费者组从 master 消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "3）所有Slave节点崩溃"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "向master发送消息不会有任何影响，但是，如果master是SYNC_MASTER，producer会得到一个SLAVE_NOT_AVAILABLE，表示消息没有发送给任何slave。 对消费消息也没有影响，除非消费者组设置为优先从slave消费。 默认情况下，消费者组从master消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-3kfms6b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230107153842-3kfms6b",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-0j1mo6h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-0j1mo6h",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Producer提示“No Topic Route Info”，如何诊断？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当您尝试将消息发送到一个路由信息对生产者不可用的主题时，就会发生这种情况。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）确保生产者可以连接到名称服务器并且能够从中获取路由元信息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）确保名称服务器确实包含主题的路由元信息。 您可以使用管理工具或 Web 控制台通过 topicRoute 从名称服务器查询路由元信息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "3）确保您的Broker将心跳发送到您的生产者正在连接的同一name server列表。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "4）确保主题的权限为6(rw-)，或至少为2(-w-)。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "如果找不到此主题，请通过管理工具命令updateTopic或Web控制台在Broker上创建它。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153846-rwpigls",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153846-rwpigls"
			}
		}
	]
}