{
	"ID": "20230107152616-qk8nrod",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230107152616-qk8nrod",
		"scroll": "{\u0026amp;quot;startId\u0026amp;quot;:\u0026amp;quot;20230107152639-x8648pr\u0026amp;quot;,\u0026amp;quot;endId\u0026amp;quot;:\u0026amp;quot;20230107152639-1bhav2q\u0026amp;quot;,\u0026amp;quot;scrollTop\u0026amp;quot;:0,\u0026amp;quot;focusId\u0026amp;quot;:\u0026amp;quot;20230107152639-x8648pr\u0026amp;quot;,\u0026amp;quot;focusStart\u0026amp;quot;:4,\u0026amp;quot;focusEnd\u0026amp;quot;:4}",
		"title": "架构设计",
		"updated": "20230214174526"
	},
	"Children": [
		{
			"ID": "20230107152639-wqvphmt",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230107152639-wqvphmt",
				"updated": "20230107152639"
			}
		},
		{
			"ID": "20230107152639-71l07kr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107152639-71l07kr",
				"updated": "20230107152639"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 技术架构"
				}
			]
		},
		{
			"ID": "20230107152639-77owz8s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107152639-77owz8s",
				"updated": "20230107152759"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/rocketmq_architecture_1.png?lastModify=1673076397"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230107152639-f3t0f1o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107152639-f3t0f1o",
				"updated": "20230107152639"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "RocketMQ架构上主要分为四部分，如上图所示:"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107152639-fgrv2vx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230107152639-fgrv2vx",
				"updated": "20230214154141"
			},
			"Children": [
				{
					"ID": "20230107152639-364sqtt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-364sqtt",
						"updated": "20230214154012"
					},
					"Children": [
						{
							"ID": "20230107152639-wmg5hht",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-wmg5hht",
								"updated": "20230214154012"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Producer"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：消息发布的角色，支持分布式集群方式部署。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投递，投递的过程支持快速失败并且低延迟。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-gtzgpzx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-gtzgpzx",
						"updated": "20230214154015"
					},
					"Children": [
						{
							"ID": "20230107152639-qe2u60s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-qe2u60s",
								"updated": "20230214154015"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Consumer"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：消息消费的角色，支持分布式集群方式部署。支持以push推，pull拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-hz78kml",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-hz78kml",
						"updated": "20230214154134"
					},
					"Children": [
						{
							"ID": "20230107152639-ucdsh58",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-ucdsh58",
								"updated": "20230214154134"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "NameServer"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：NameServer是一个非常简单的Topic路由注册中心，其角色类似Dubbo中的zookeeper，支持Broker的动态注册与发现。主要包括两个功能：Broker管理，NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活；路由信息管理，每个NameServer将保存关于Broker集群的整个路由信息和用于客户端查询的队列信息。然后Producer和Conumser通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费。NameServer通常也是集群的方式部署，各实例间相互不进行信息通讯。Broker是向每一台NameServer注册自己的路由信息，所以每一个NameServer实例上面都保存一份完整的路由信息。当某个NameServer因某种原因下线了，Broker仍然可以向其它NameServer同步其路由信息，Producer和Consumer仍然可以动态感知Broker的路由的信息。 "
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-oyvb8ib",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-oyvb8ib",
						"updated": "20230214154141"
					},
					"Children": [
						{
							"ID": "20230107152639-fw70jz4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-fw70jz4",
								"updated": "20230214154141"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "BrokerServer"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：Broker主要负责消息的存储、投递和查询以及服务高可用保证，为了实现这些功能，Broker包含了以下几个重要子模块。"
								}
							]
						},
						{
							"ID": "20230107152639-zovuexi",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230107152639-zovuexi",
								"updated": "20230214154049"
							},
							"Children": [
								{
									"ID": "20230107152639-bt2uygk",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230107152639-bt2uygk",
										"updated": "20230214154032"
									},
									"Children": [
										{
											"ID": "20230107152639-1t2eqnr",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230107152639-1t2eqnr",
												"updated": "20230214154032"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Remoting Module：整个Broker的实体，负责处理来自Client端的请求。"
												}
											]
										}
									]
								},
								{
									"ID": "20230107152639-twqyu21",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230107152639-twqyu21",
										"updated": "20230214154043"
									},
									"Children": [
										{
											"ID": "20230107152639-ton7yil",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230107152639-ton7yil",
												"updated": "20230214154043"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Client Manager：负责管理客户端(Producer/Consumer)和维护Consumer的Topic订阅信息。"
												}
											]
										}
									]
								},
								{
									"ID": "20230107152639-y3by2ah",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20230107152639-y3by2ah",
										"updated": "20230214154044"
									},
									"Children": [
										{
											"ID": "20230107152639-2z5gmqp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230107152639-2z5gmqp",
												"updated": "20230214154044"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Store Service：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。"
												}
											]
										}
									]
								},
								{
									"ID": "20230107152639-1mukjwq",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20230107152639-1mukjwq",
										"updated": "20230214154046"
									},
									"Children": [
										{
											"ID": "20230107152639-w73hwga",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230107152639-w73hwga",
												"updated": "20230214154046"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "HA Service：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。"
												}
											]
										}
									]
								},
								{
									"ID": "20230107152639-4r2v3k8",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NS4=",
										"Num": 5
									},
									"Properties": {
										"id": "20230107152639-4r2v3k8",
										"updated": "20230214154049"
									},
									"Children": [
										{
											"ID": "20230107152639-t2kihau",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230107152639-t2kihau",
												"updated": "20230214154049"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Index Service：根据特定的Message key对投递到Broker的消息进行索引服务，以提供消息的快速查询。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107152639-nm6nftt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107152639-nm6nftt",
				"updated": "20230107152817"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/rocketmq_architecture_2.png?lastModify=1673076397"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230107152639-n0q83hs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107152639-n0q83hs",
				"updated": "20230107152639"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 部署架构"
				}
			]
		},
		{
			"ID": "20230107152639-wximg4s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107152639-wximg4s",
				"updated": "20230107152832"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/rocketmq_architecture_3.png?lastModify=1673076397"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230107152639-rhwtud8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107152639-rhwtud8",
				"updated": "20230107152639"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RocketMQ 网络部署特点"
				}
			]
		},
		{
			"ID": "20230107152639-939eopd",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230107152639-939eopd",
				"updated": "20230214162629"
			},
			"Children": [
				{
					"ID": "20230107152639-57wfa50",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-57wfa50",
						"updated": "20230214162625"
					},
					"Children": [
						{
							"ID": "20230107152639-f8xlsx4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-f8xlsx4",
								"updated": "20230214162625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NameServer是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-74p8u8a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-74p8u8a",
						"updated": "20230214162623"
					},
					"Children": [
						{
							"ID": "20230107152639-qd1mo6q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-qd1mo6q",
								"updated": "20230214162623"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Broker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave 的对应关系通过指定相同的BrokerName，不同的BrokerId 来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。 注意：当前RocketMQ版本在部署架构上支持一Master多Slave，但只有BrokerId=1的从服务器才会参与消息的读负载。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-bc0ic84",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-bc0ic84",
						"updated": "20230214162628"
					},
					"Children": [
						{
							"ID": "20230107152639-0ns2j0l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-0ns2j0l",
								"updated": "20230214162628"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Producer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic 服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-r3c8m7q",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-r3c8m7q",
						"updated": "20230214162629"
					},
					"Children": [
						{
							"ID": "20230107152639-1v62k04",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-1v62k04",
								"updated": "20230214162629"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Consumer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，消费者在向Master拉取消息时，Master服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读I/O），以及从服务器是否可读等因素建议下一次是从Master还是Slave拉取。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107152639-rs492x5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107152639-rs492x5",
				"updated": "20230107152639"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "结合部署架构图，描述集群工作流程："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107152639-1bhav2q",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230107152639-1bhav2q",
				"updated": "20230107152639"
			},
			"Children": [
				{
					"ID": "20230107152639-dz8vt2w",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-dz8vt2w",
						"updated": "20230107152639"
					},
					"Children": [
						{
							"ID": "20230107152639-6fti8pe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-6fti8pe",
								"updated": "20230214162851"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-52ux7kz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-52ux7kz",
						"updated": "20230107152639"
					},
					"Children": [
						{
							"ID": "20230107152639-c5nzny9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-c5nzny9",
								"updated": "20230214162853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-f7mf379",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-f7mf379",
						"updated": "20230107152639"
					},
					"Children": [
						{
							"ID": "20230107152639-8i8x1j2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-8i8x1j2",
								"updated": "20230214162854"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-ulpwcsa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-ulpwcsa",
						"updated": "20230107152639"
					},
					"Children": [
						{
							"ID": "20230107152639-89c1vl9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-89c1vl9",
								"updated": "20230214162856"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。"
								}
							]
						}
					]
				},
				{
					"ID": "20230107152639-75rgqqc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107152639-75rgqqc",
						"updated": "20230107152639"
					},
					"Children": [
						{
							"ID": "20230107152639-x5c73sc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107152639-x5c73sc",
								"updated": "20230214162857"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230214174522-qngch74",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230214174522-qngch74",
				"updated": "20230214174526"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本概念"
				}
			]
		},
		{
			"ID": "20230214174241-zgyz6uv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-zgyz6uv",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 消息模型（Message Model）"
				}
			]
		},
		{
			"ID": "20230214174241-6c59i6g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-6c59i6g",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。"
				}
			]
		},
		{
			"ID": "20230214174241-9ts957n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-9ts957n",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 消息生产者（Producer）"
				}
			]
		},
		{
			"ID": "20230214174241-imnwr36",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-imnwr36",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。 "
				}
			]
		},
		{
			"ID": "20230214174241-3gc7jt1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-3gc7jt1",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3 消息消费者（Consumer）"
				}
			]
		},
		{
			"ID": "20230214174241-fzjy3e8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-fzjy3e8",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。"
				}
			]
		},
		{
			"ID": "20230214174241-cxrwq4y",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-cxrwq4y",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4 主题（Topic）"
				}
			]
		},
		{
			"ID": "20230214174241-i31p00q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-i31p00q",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。"
				}
			]
		},
		{
			"ID": "20230214174241-2gp5970",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-2gp5970",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5 代理服务器（Broker Server）"
				}
			]
		},
		{
			"ID": "20230214174241-5gp11zd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-5gp11zd",
				"updated": "20230214174252"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。"
				}
			]
		},
		{
			"ID": "20230214174241-nkb07pp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-nkb07pp",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6 名字服务（Name Server）"
				}
			]
		},
		{
			"ID": "20230214174241-4uamiu7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-4uamiu7",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。"
				}
			]
		},
		{
			"ID": "20230214174241-nfud96e",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-nfud96e",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7 拉取式消费（Pull Consumer）"
				}
			]
		},
		{
			"ID": "20230214174241-v7ke2gr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-v7ke2gr",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。"
				}
			]
		},
		{
			"ID": "20230214174241-fy6vb3v",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-fy6vb3v",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "8 推动式消费（Push Consumer）"
				}
			]
		},
		{
			"ID": "20230214174241-xf5c3bz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-xf5c3bz",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Consumer消费的一种类型，该模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。"
				}
			]
		},
		{
			"ID": "20230214174241-qodfrdz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-qodfrdz",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "9 生产者组（Producer Group）"
				}
			]
		},
		{
			"ID": "20230214174241-3ff43j8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-3ff43j8",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。"
				}
			]
		},
		{
			"ID": "20230214174241-lihmhpa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-lihmhpa",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "10 消费者组（Consumer Group）"
				}
			]
		},
		{
			"ID": "20230214174241-ynvk25e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-ynvk25e",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。"
				}
			]
		},
		{
			"ID": "20230214174241-6b7j3ek",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-6b7j3ek",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "11 集群消费（Clustering）"
				}
			]
		},
		{
			"ID": "20230214174241-dnwitum",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-dnwitum",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-o564mne",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-o564mne",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "12 广播消费（Broadcasting）"
				}
			]
		},
		{
			"ID": "20230214174241-9t0scqe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-9t0scqe",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-gebc66t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-gebc66t",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "13 普通顺序消息（Normal Ordered Message）"
				}
			]
		},
		{
			"ID": "20230214174241-asb1av6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-asb1av6",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "普通顺序消费模式下，消费者通过同一个消息队列（ Topic 分区，称作 Message Queue） 收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-4nbzgqr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-4nbzgqr",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "14 严格顺序消息（Strictly Ordered Message）"
				}
			]
		},
		{
			"ID": "20230214174241-wd5f6al",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-wd5f6al",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "严格顺序消息模式下，消费者收到的所有消息均是有顺序的。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-m9y8k9l",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-m9y8k9l",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "15 消息（Message）"
				}
			]
		},
		{
			"ID": "20230214174241-8tq4avp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-8tq4avp",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-z09ssfb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-z09ssfb",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "16 标签（Tag）"
				}
			]
		},
		{
			"ID": "20230214174241-dx4fb57",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-dx4fb57",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。"
				}
			]
		},
		{
			"ID": "20230214174241-ryc6s0e",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-ryc6s0e",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "“Request-Reply”特性"
				}
			]
		},
		{
			"ID": "20230214174241-yw62ih5",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230214174241-yw62ih5",
				"updated": "20230214174241"
			}
		},
		{
			"ID": "20230214174241-wxekefs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-wxekefs",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 使用场景"
				}
			]
		},
		{
			"ID": "20230214174241-yn08amh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-yn08amh",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "随着服务规模的扩大，单机服务无法满足性能和容量的要求，此时需要将服务拆分为更小粒度的服务或者部署多个服务实例构成集群来提供服务。在分布式场景下，RPC是最常用的联机调用的方式。"
				}
			]
		},
		{
			"ID": "20230214174241-7u6omt5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-7u6omt5",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在构建分布式应用时，有些领域，例如金融服务领域，常常使用消息队列来构建服务总线，实现联机调用的目的。消息队列的主要场景是解耦、削峰填谷，在联机调用的场景下，需要将服务的调用抽象成基于消息的交互，并增强同步调用的这种交互逻辑。为了更好地支持消息队列在联机调用场景下的应用，rocketmq-4.6.0推出了“Request-Reply”特性来支持RPC调用。"
				}
			]
		},
		{
			"ID": "20230214174241-whrabp2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-whrabp2",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 设计思路"
				}
			]
		},
		{
			"ID": "20230214174241-8tvxanq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-8tvxanq",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "在rocketmq中，整个同步调用主要包括两个过程："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-hw6oyiv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-hw6oyiv",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "（1）请求方生成消息，发送给响应方，并等待响应方回包；"
				}
			]
		},
		{
			"ID": "20230214174241-qa6mi2l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-qa6mi2l",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "（2）响应方收到请求消息后，消费这条消息，并发出一条响应消息给请求方。"
				}
			]
		},
		{
			"ID": "20230214174241-pmapzit",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-pmapzit",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "整个过程实质上是两个消息收发过程的组合。所以这里最关键的问题是如何将异步的消息收发过程构建成一个同步的过程。其中主要有两个问题需要解决："
				}
			]
		},
		{
			"ID": "20230214174241-209doyh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230214174241-209doyh",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 请求方如何同步等待回包"
				}
			]
		},
		{
			"ID": "20230214174241-5w0wwb5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-5w0wwb5",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个问题的解决方案中，一个关键的数据结构是RequestResponseFuture。"
				}
			]
		},
		{
			"ID": "20230214174241-g9zxur8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230214174241-g9zxur8",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class RequestResponseFuture {\n    private final String correlationId;\n    private final RequestCallback requestCallback;\n    private final long beginTimestamp = System.currentTimeMillis();\n    private final Message requestMsg = null;\n    private long timeoutMillis;\n    private CountDownLatch countDownLatch = new CountDownLatch(1);\n    private volatile Message responseMsg = null;\n    private volatile boolean sendRequestOk = true;\n    private volatile Throwable cause = null;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230214174241-76s456f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-76s456f",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RequestResponseFuture中，利用correlationId来标识一个请求。如下图所示，Producer发送request时创建一个RequestResponseFuture，以correlationId为key，RequestResponseFuture为value存入map，同时请求中带上RequestResponseFuture中的correlationId，收到回包后根据correlationId拿到对应的RequestResponseFuture，并设置回包内容。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/producer_send_request.png?lastModify=1673077849"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230214174241-2sijqcy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230214174241-2sijqcy",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2 consumer消费消息后，如何准确回包"
				}
			]
		},
		{
			"ID": "20230214174241-1i2m29o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-1i2m29o",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "（1）producer在发送消息的时候，会给每条消息生成唯一的标识符，同时还带上了producer的clientId。当consumer收到并消费消息后，从消息中取出消息的标识符correlationId和producer的标识符clientId，放入响应消息，用来确定此响应消息是哪条请求消息的回包，以及此响应消息应该发给哪个producer。同时响应消息中设置了消息的类型以及响应消息的topic，然后consumer将消息发给broker，如下图所示。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/consumer_reply.png?lastModify=1673077849"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230214174241-20j2bo7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-20j2bo7",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "（2）broker收到响应消息后，需要将消息发回给指定的producer。Broker如何知道发回给哪个producer？因为消息中包含了producer的标识符clientId，在ProducerManager中，维护了标识符和channel信息的对应关系，通过这个对应关系，就能把回包发给对应的producer。"
				}
			]
		},
		{
			"ID": "20230214174241-nzdjepw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-nzdjepw",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "响应消息发送和一般的消息发送流程区别在于，响应消息不需要producer拉取，而是由broker直接推给producer。同时选择broker的策略也有变化：请求消息从哪个broker发过来，响应消息也发到对应的broker上。"
				}
			]
		},
		{
			"ID": "20230214174241-zk3717f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-zk3717f",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Producer收到响应消息后，根据消息中的唯一标识符，从RequestResponseFuture的map中找到对应的RequestResponseFuture结构，设置响应消息，同时计数器减一，解除等待状态，使请求方收到响应消息。"
				}
			]
		},
		{
			"ID": "20230214174241-u9jylnm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-u9jylnm",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3 使用方法"
				}
			]
		},
		{
			"ID": "20230214174241-fzdi9zu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-fzdi9zu",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同步调用的示例在example文件夹的rpc目录下。"
				}
			]
		},
		{
			"ID": "20230214174241-3wqx6k6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230214174241-3wqx6k6",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.1 Producer"
				}
			]
		},
		{
			"ID": "20230214174241-h0id6om",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230214174241-h0id6om",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Message msg = new Message(topic,\n                \"\",\n                \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n​\n            long begin = System.currentTimeMillis();\n            Message retMsg = producer.request(msg, ttl);\n            long cost = System.currentTimeMillis() - begin;\n            System.out.printf(\"request to \u003c%s\u003e cost: %d replyMessage: %s %n\", topic, cost, retMsg);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230214174241-4xbarq7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-4xbarq7",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "调用接口替换为request即可。"
				}
			]
		},
		{
			"ID": "20230214174241-hvu5o4s",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230214174241-hvu5o4s",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.2 Consumer"
				}
			]
		},
		{
			"ID": "20230214174241-ak6vhn8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-ak6vhn8",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要启动一个producer，同时在覆写consumeMessage方法的时候，自定义响应消息并发送。"
				}
			]
		},
		{
			"ID": "20230214174241-pwjh1c4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230214174241-pwjh1c4",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List\u003cMessageExt\u003e msgs, ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                for (MessageExt msg : msgs) {\n                    try {\n                        System.out.printf(\"handle message: %s\", msg.toString());\n                        String replyTo = MessageUtil.getReplyToClient(msg);\n                        byte[] replyContent = \"reply message contents.\".getBytes();\n                        // create reply message with given util, do not create reply message by yourself\n                        Message replyMessage = MessageUtil.createReplyMessage(msg, replyContent);\n​\n                        // send reply message with producer\n                        SendResult replyResult = replyProducer.send(replyMessage, 3000);\n                        System.out.printf(\"reply to %s , %s %n\", replyTo, replyResult.toString());\n                    } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230214174241-apt9zc1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230214174241-apt9zc1",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4 接口参数"
				}
			]
		},
		{
			"ID": "20230214174241-b4vykgt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-b4vykgt",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.1 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "public Message request(Message msg,long timeout)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-wlf7w2v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-wlf7w2v",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "msg：待发送的消息"
				}
			]
		},
		{
			"ID": "20230214174241-ghcsexi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-ghcsexi",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "timeout：同步调用超时时间"
				}
			]
		},
		{
			"ID": "20230214174241-iuoiks7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-iuoiks7",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.2 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "public void request(Message msg, final RequestCallback requestCallback, long timeout)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-aprebwa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-aprebwa",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "msg：待发送的消息"
				}
			]
		},
		{
			"ID": "20230214174241-4k2ewdd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-4k2ewdd",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "requestCallback：回调函数"
				}
			]
		},
		{
			"ID": "20230214174241-k8ou7fv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-k8ou7fv",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "timeout：同步调用超时时间"
				}
			]
		},
		{
			"ID": "20230214174241-2367jpc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-2367jpc",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "4.3 public Message request(final Message msg, final MessageQueueSelector selector, final Object arg,final long timeout)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-ee11nzd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-ee11nzd",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "msg：待发送的消息"
				}
			]
		},
		{
			"ID": "20230214174241-rdycyca",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-rdycyca",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "selector：消息队列选择器"
				}
			]
		},
		{
			"ID": "20230214174241-jvftst0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-jvftst0",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "arg：消息队列选择器需要的参数"
				}
			]
		},
		{
			"ID": "20230214174241-4wj0u0d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-4wj0u0d",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "timeout：同步调用超时时间"
				}
			]
		},
		{
			"ID": "20230214174241-c7e9030",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-c7e9030",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "4.4 public void request(final Message msg, final MessageQueueSelector selector, final Object arg,final RequestCallback requestCallback, final long timeout)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-v6s17sp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-v6s17sp",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "msg：待发送的消息"
				}
			]
		},
		{
			"ID": "20230214174241-v0sh7vq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-v0sh7vq",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "selector：消息队列选择器"
				}
			]
		},
		{
			"ID": "20230214174241-pw0f4ig",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-pw0f4ig",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "arg：消息队列选择器需要的参数"
				}
			]
		},
		{
			"ID": "20230214174241-q598d36",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-q598d36",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "requestCallback：回调函数"
				}
			]
		},
		{
			"ID": "20230214174241-man76bz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-man76bz",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "timeout：同步调用超时时间"
				}
			]
		},
		{
			"ID": "20230214174241-g7143m0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-g7143m0",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "4.5"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\t"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "public Message request(final Message msg, final MessageQueue mq, final long timeout)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-23we3ij",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-23we3ij",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "msg：待发送的消息"
				}
			]
		},
		{
			"ID": "20230214174241-tkvgwbl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-tkvgwbl",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "mq：目标消息队列"
				}
			]
		},
		{
			"ID": "20230214174241-vortfgh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-vortfgh",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "timeout：同步调用超时时间"
				}
			]
		},
		{
			"ID": "20230214174241-pnrnflo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-pnrnflo",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "4.6"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\t"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "public void request(final Message msg, final MessageQueue mq, final RequestCallback requestCallback, long timeout)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230214174241-cfgi0a0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-cfgi0a0",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "msg：待发送的消息"
				}
			]
		},
		{
			"ID": "20230214174241-4t8i4gs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-4t8i4gs",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "mq：目标消息队列"
				}
			]
		},
		{
			"ID": "20230214174241-qcks4dp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-qcks4dp",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "requestCallback：回调函数"
				}
			]
		},
		{
			"ID": "20230214174241-fo58keb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-fo58keb",
				"updated": "20230214174241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "timeout：同步调用超时时间"
				}
			]
		},
		{
			"ID": "20230214174241-6qgmw1q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230214174241-6qgmw1q"
			}
		}
	]
}