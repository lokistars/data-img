{
	"ID": "20230115191308-h1hejo1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230115191308-h1hejo1",
		"scroll": "{\u0026amp;quot;startId\u0026amp;quot;:\u0026amp;quot;20230115191308-rp89a00\u0026amp;quot;,\u0026amp;quot;endId\u0026amp;quot;:\u0026amp;quot;20230115192403-6xlb2ce\u0026amp;quot;,\u0026amp;quot;scrollTop\u0026amp;quot;:5293,\u0026amp;quot;focusId\u0026amp;quot;:\u0026amp;quot;20230115192403-6xlb2ce\u0026amp;quot;,\u0026amp;quot;focusStart\u0026amp;quot;:0,\u0026amp;quot;focusEnd\u0026amp;quot;:0}",
		"title": "字符串性能优化不容小觑",
		"updated": "20230115192403"
	},
	"Children": [
		{
			"ID": "20230115191308-rp89a00",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191308-rp89a00",
				"updated": "20230115191324"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "String 对象是我们使用最频繁的一个对象类型，但它的性能问题却是最容易被忽略的。String 对象作为 Java 语言中重要的数据类型，是内存中占据空间最大的一个对象。高效地使用字符串，可以提升系统的整体性能。"
				}
			]
		},
		{
			"ID": "20230115191325-ranfyly",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230115191325-ranfyly",
				"updated": "20230115191347"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、String 对象是如何实现的？"
				}
			]
		},
		{
			"ID": "20230115191344-g8qgrpi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191344-g8qgrpi",
				"updated": "20230115191400"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Java 语言中，Sun 公司的工程师们对 String 对象做了大量的优化，来节约内存空间，提升 String 对象在系统中的性能。一起来看看优化过程，如下图所示："
				}
			]
		},
		{
			"ID": "20230115191400-8njp7ek",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191400-8njp7ek",
				"updated": "20230115191404"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20230115191404-f4jvdoo.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230115191436-vs7pktw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230115191436-vs7pktw"
			},
			"Children": [
				{
					"ID": "20230115191436-y3gzr9l",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230115191436-y3gzr9l"
					},
					"Children": [
						{
							"ID": "20230115191404-1380b6n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230115191404-1380b6n",
								"updated": "20230115191414"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 Java6 以及之前的版本中，String 对象是对 char 数组进行了封装实现的对象，主要有四个成员变量：char 数组、偏移量 offset、字符数量 count、哈希值 hash。"
								}
							]
						},
						{
							"ID": "20230115191530-ukcj8vy",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230115191530-ukcj8vy"
							},
							"Children": [
								{
									"ID": "20230115191523-73n7s17",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230115191523-73n7s17"
									},
									"Children": [
										{
											"ID": "20230115191523-5nbtf8q",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230115191523-5nbtf8q",
												"updated": "20230115191541"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "String 对象是通过 offset 和 count 两个属性来定位 char[]数组，获取字符串。这么做可以高效、快速地共享数组对象，同时节省内存空间，但这种方式很有可能会导致内存泄漏。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230115191518-mqd3dg1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230115191518-mqd3dg1"
					},
					"Children": [
						{
							"ID": "20230115191518-83qd0le",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230115191518-83qd0le",
								"updated": "20230115191521"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从 Java7 版本开始到 Java8 版本，Java 对 String 类做了一些改变。String 类中不再有 offset 和 count 两个变量了。这样的好处是 String 对象占用的内存稍微少了些，同时，String.substring 方法也不再共享 char[]，从而解决了使用该方法可能导致的内存泄漏问题。"
								}
							]
						}
					]
				},
				{
					"ID": "20230115191547-6x41rfr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230115191547-6x41rfr"
					},
					"Children": [
						{
							"ID": "20230115191547-c79gukb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230115191547-c79gukb",
								"updated": "20230115191547"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从 Java9 版本开始，工程师将 char[]字段改为了 byte[]字段，又维护了一个新的属性 coder，它是一个编码格式的标识。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230115191559-sp3llgp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191559-sp3llgp",
				"updated": "20230115191559"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "工程师为什么这样修改呢？"
				}
			]
		},
		{
			"ID": "20230115191600-vwf2fce",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191600-vwf2fce",
				"updated": "20230115191605"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们知道一个 char 字符占 16 位，2 个字节。这个情况下，存储单字节编码内的字符（占一个字节的字符）就显得非常浪费。JDK1.9 的 String 类为了节约内存空间，于是使用了占 8 位，1 个字节的 byte 数组来存放字符串。"
				}
			]
		},
		{
			"ID": "20230115191606-dhsed6l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191606-dhsed6l",
				"updated": "20230115191610"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而新属性 coder 的作用是，在计算字符串长度或者使用 indexOf（）函数时，我们需要根据这个字段，判断如何计算字符串长度。coder 属性默认有 0 和 1 两个值，0 代表 Latin-1（单字节编码），1 代表 UTF-16。如果 String 判断字符串只包含了 Latin-1，则 coder 属性值为 0，反之则为 1。"
				}
			]
		},
		{
			"ID": "20230115191610-8nj4q3r",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230115191610-8nj4q3r",
				"updated": "20230115191619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、String 对象的不可变性"
				}
			]
		},
		{
			"ID": "20230115191620-hb8crux",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191620-hb8crux",
				"updated": "20230115191626"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "了解了 String 对象的实现后，你有没有发现在实现代码中 String 类被 final 关键字修饰了，而且变量 char 数组也被 final 修饰了。"
				}
			]
		},
		{
			"ID": "20230115191626-4nz8gwd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191626-4nz8gwd",
				"updated": "20230115191631"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们知道类被 final 修饰代表该类不可继承，而 char[]被 final+private 修饰，代表了 String 对象不可被更改。Java 实现的这个特性叫作 String 对象的不可变性，即 String 对象一旦创建成功，就不能再对它进行改变。"
				}
			]
		},
		{
			"ID": "20230115191631-x8sigyw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191631-x8sigyw",
				"updated": "20230115191643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 这样做的好处在哪里呢？"
				}
			]
		},
		{
			"ID": "20230115191644-giouvjx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191644-giouvjx",
				"updated": "20230115191648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一，保证 String 对象的安全性。假设 String 对象是可变的，那么 String 对象将可能被恶意修改。"
				}
			]
		},
		{
			"ID": "20230115191648-htqkz59",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191648-htqkz59",
				"updated": "20230115191652"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第二，保证 hash 属性值不会频繁变更，确保了唯一性，使得类似 HashMap 容器才能实现相应的 key-value 缓存功能。"
				}
			]
		},
		{
			"ID": "20230115191652-0bbvo8m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191652-0bbvo8m",
				"updated": "20230115191656"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第三，可以实现字符串常量池。在 Java 中，通常有两种创建字符串对象的方式，一种是通过字符串常量的方式创建，如 String str=“abc”；另一种是字符串变量通过 new 形式的创建，如 String str = new String(“abc”)。"
				}
			]
		},
		{
			"ID": "20230115191657-th36968",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191657-th36968",
				"updated": "20230115191702"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当代码中使用第一种方式创建字符串对象时，JVM 首先会检查该对象是否在字符串常量池中，如果在，就返回该对象引用，否则新的字符串将在常量池中被创建。这种方式可以减少同一个值的字符串对象的重复创建，节约内存。"
				}
			]
		},
		{
			"ID": "20230115191702-vf4h3h5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191702-vf4h3h5",
				"updated": "20230115191707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "String str = new String(“abc”) 这种方式，首先在编译类文件时，\"abc\"常量字符串将会放入到常量结构中，在类加载时，“abc\"将会在常量池中创建；其次，在调用 new 时，JVM 命令将会调用 String 的构造函数，同时引用常量池中的\"abc” 字符串，在堆内存中创建一个 String 对象；最后，str 将引用 String 对象。"
				}
			]
		},
		{
			"ID": "20230115191707-jxnxgcl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191707-jxnxgcl",
				"updated": "20230115191721"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "这里附上一个你可能会想到的经典反例。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230115191415-qiwlgee",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191415-qiwlgee",
				"updated": "20230115191727"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "平常编程时，对一个 String 对象 str 赋值“hello”，然后又让 str 值为“world”，这个时候 str 的值变成了“world”。那么 str 值确实改变了，为什么我还说 String 对象不可变呢？"
				}
			]
		},
		{
			"ID": "20230115191727-toa1b8c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191727-toa1b8c",
				"updated": "20230115191731"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，我来解释下什么是对象和对象引用。Java 初学者往往对此存在误区，特别是一些从 PHP 转 Java 的同学。在 Java 中要比较两个对象是否相等，往往是用 ==，而要判断两个对象的值是否相等，则需要用 equals 方法来判断。"
				}
			]
		},
		{
			"ID": "20230115191732-48yx76g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191732-48yx76g",
				"updated": "20230115191736"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这是因为 str 只是 String 对象的引用，并不是对象本身。对象在内存中是一块内存地址，str 则是一个指向该内存地址的引用。所以在刚刚我们说的这个例子中，第一次赋值的时候，创建了一个“hello”对象，str 引用指向“hello”地址；第二次赋值的时候，又重新创建了一个对象“world”，str 引用指向了“world”，但“hello”对象依然存在于内存中。"
				}
			]
		},
		{
			"ID": "20230115191736-9j6dbe2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191736-9j6dbe2",
				"updated": "20230115191740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也就是说 str 并不是对象，而只是一个对象引用。真正的对象依然还在内存中，没有被改变。"
				}
			]
		},
		{
			"ID": "20230115191741-27sonzo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230115191741-27sonzo",
				"updated": "20230115191747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、String 对象的优化"
				}
			]
		},
		{
			"ID": "20230115191747-f99xu20",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191747-f99xu20",
				"updated": "20230115191753"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "了解了 String 对象的实现原理和特性，接下来我们就结合实际场景，看看如何优化 String 对象的使用，优化的过程中又有哪些需要注意的地方。"
				}
			]
		},
		{
			"ID": "20230115191753-n8bbzq8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191753-n8bbzq8",
				"updated": "20230115191759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、如何构建超大字符串？"
				}
			]
		},
		{
			"ID": "20230115191759-bckpabh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191759-bckpabh",
				"updated": "20230115191804"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "编程过程中，字符串的拼接很常见。前面我讲过 String 对象是不可变的，如果我们使用 String 对象相加，拼接我们想要的字符串，是不是就会产生多个对象呢？例如以下代码："
				}
			]
		},
		{
			"ID": "20230115191805-7z67g5k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230115191805-7z67g5k",
				"updated": "20230115191814"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String str= \"ab\" + \"cd\" + \"ef\";\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230115191423-toex433",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191423-toex433",
				"updated": "20230115191821"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分析代码可知：首先会生成 ab 对象，再生成 abcd 对象，最后生成 abcdef 对象，从理论上来说，这段代码是低效的。"
				}
			]
		},
		{
			"ID": "20230115191821-kdmj1q6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191821-kdmj1q6",
				"updated": "20230115191826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但实际运行中，我们发现只有一个对象生成，这是为什么呢？难道我们的理论判断错了？我们再来看编译后的代码，你会发现编译器自动优化了这行代码，如下："
				}
			]
		},
		{
			"ID": "20230115191826-3oqqqs0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230115191826-3oqqqs0",
				"updated": "20230115191834"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String str= \"abcdef\";\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230115191835-b5zx1yi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191835-b5zx1yi",
				"updated": "20230115191842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面我介绍的是字符串常量的累计，我们再来看看字符串变量的累计又是怎样的呢？"
				}
			]
		},
		{
			"ID": "20230115191843-ww4wk45",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230115191843-ww4wk45",
				"updated": "20230115191852"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String str = \"abcdef\";\nfor(int i=0; i\u003c1000; i++) {\n      str = str + i;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230115191854-1wbzkh6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191854-1wbzkh6",
				"updated": "20230115191900"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的代码编译后，你可以看到编译器同样对这段代码进行了优化。不难发现，Java 在进行字符串的拼接时，偏向使用 StringBuilder，这样可以提高程序的效率。"
				}
			]
		},
		{
			"ID": "20230115191901-hemb407",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230115191901-hemb407",
				"updated": "20230115191914"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String str = \"abcdef\";\nfor(int i=0; i\u003c1000; i++) {\n     str = (new StringBuilder(String.valueOf(str))).append(i).toString();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230115191917-5phjvrz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191917-5phjvrz",
				"updated": "20230115191922"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "综上已知：即使使用 + 号作为字符串的拼接，也一样可以被编译器优化成 StringBuilder 的方式。但再细致些，你会发现在编译器优化的代码中，每次循环都会生成一个新的 StringBuilder 实例，同样也会降低系统的性能。"
				}
			]
		},
		{
			"ID": "20230115191923-d8dlhfv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191923-d8dlhfv",
				"updated": "20230115191926"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以平时做字符串拼接的时候，我建议你还是要显示地使用 String Builder 来提升系统性能。"
				}
			]
		},
		{
			"ID": "20230115191926-jwg29hj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191926-jwg29hj",
				"updated": "20230115191930"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果在多线程编程中，String 对象的拼接涉及到线程安全，你可以使用 StringBuffer。但是要注意，由于 StringBuffer 是线程安全的，涉及到锁竞争，所以从性能上来说，要比 StringBuilder 差一些。"
				}
			]
		},
		{
			"ID": "20230115191930-6dkiqpb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230115191930-6dkiqpb",
				"updated": "20230115191943"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4、如何使用 String.intern 节省内存？"
				}
			]
		},
		{
			"ID": "20230115191951-8jnkeks",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115191951-8jnkeks",
				"updated": "20230115191952"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如何使用 String.intern 节省内存？"
				}
			]
		},
		{
			"ID": "20230115192006-fpjo2y2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192006-fpjo2y2",
				"updated": "20230115192006"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "witter 每次发布消息状态的时候，都会产生一个地址信息，以当时 Twitter 用户的规模预估，服务器需要 32G 的内存来存储地址信息。"
				}
			]
		},
		{
			"ID": "20230115192007-9xlvp7j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230115192007-9xlvp7j",
				"updated": "20230115192017"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Location {\n    private String city;\n    private String region;\n    private String countryCode;\n    private double longitude;\n    private double latitude;\n} \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230115192018-2vs2yyl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192018-2vs2yyl",
				"updated": "20230115192024"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "考虑到其中有很多用户在地址信息上是有重合的，比如，国家、省份、城市等，这时就可以将这部分信息单独列出一个类，以减少重复，代码如下："
				}
			]
		},
		{
			"ID": "20230115192024-lfe1slk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230115192024-lfe1slk",
				"updated": "20230115192037"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class SharedLocation {\n  private String city;\n  private String region;\n  private String countryCode;\n}\npublic class Location {\n  private SharedLocation sharedLocation;\n  double longitude;\n  double latitude;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230115192047-dlyd433",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192047-dlyd433",
				"updated": "20230115192048"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过优化，数据存储大小减到了 20G 左右。但对于内存存储这个数据来说，依然很大，怎么办呢？"
				}
			]
		},
		{
			"ID": "20230115192048-7m0g0tj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192048-7m0g0tj",
				"updated": "20230115192053"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个案例来自一位 Twitter 工程师在 QCon 全球软件开发大会上的演讲，他们想到的解决方法，就是使用 String.intern 来节省内存空间，从而优化 String 对象的存储。"
				}
			]
		},
		{
			"ID": "20230115192054-t5to80t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192054-t5to80t",
				"updated": "20230115192058"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体做法就是，在每次赋值的时候使用 String 的 intern 方法，如果常量池中有相同值，就会重复使用该对象，返回对象引用，这样一开始的对象就可以被回收掉。这种方式可以使重复性非常高的地址信息存储大小从 20G 降到几百兆。"
				}
			]
		},
		{
			"ID": "20230115192059-t4cstw2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230115192059-t4cstw2",
				"updated": "20230115192110"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SharedLocation sharedLocation = new SharedLocation();\nsharedLocation.setCity(messageInfo.getCity().intern());    sharedLocation.setCountryCode(messageInfo.getRegion().intern());\nsharedLocation.setRegion(messageInfo.getCountryCode().intern());\nLocation location = new Location();\nlocation.set(sharedLocation);\nlocation.set(messageInfo.getLongitude());\nlocation.set(messageInfo.getLatitude());\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230115192112-ke9lftq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192112-ke9lftq",
				"updated": "20230115192118"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了更好地理解，我们再来通过一个简单的例子，回顾下其中的原理"
				}
			]
		},
		{
			"ID": "20230115192118-o0ladll",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230115192118-o0ladll",
				"updated": "20230115192129"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String a =new String(\"abc\").intern();\nString b = new String(\"abc\").intern();\nif(a==b) {\n    System.out.print(\"a==b\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230115192131-ooosnsx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192131-ooosnsx",
				"updated": "20230115192146"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果： "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "a==b"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20230115192147-k29emus",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192147-k29emus",
				"updated": "20230115192151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在字符串常量中，默认会将对象放入常量池；在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，String 对象中的 char 数组将会引用常量池中的 char 数组，并返回堆内存对象引用。"
				}
			]
		},
		{
			"ID": "20230115192152-889f07g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192152-889f07g",
				"updated": "20230115192156"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果调用 intern 方法，会去查看字符串常量池中是否有等于该对象的字符串的引用，如果没有，在 JDK1.6 版本中会复制堆中的字符串到常量池中，并返回该字符串引用，堆内存中原有的字符串由于没有引用指向它，将会通过垃圾回收器回收。"
				}
			]
		},
		{
			"ID": "20230115192156-45z7ew6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192156-45z7ew6",
				"updated": "20230115192200"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 JDK1.7 版本以后，由于常量池已经合并到了堆中，所以不会再复制具体字符串了，只是会把首次遇到的字符串的引用添加到常量池中；如果有，就返回常量池中的字符串引用。"
				}
			]
		},
		{
			"ID": "20230115192201-e4nk0gl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192201-e4nk0gl",
				"updated": "20230115192204"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "了解了原理，我们再一起看下上边的例子。"
				}
			]
		},
		{
			"ID": "20230115192205-dow05c1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192205-dow05c1",
				"updated": "20230115192209"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在一开始字符串\"abc\"会在加载类时，在常量池中创建一个字符串对象。"
				}
			]
		},
		{
			"ID": "20230115192209-izwd6fk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192209-izwd6fk",
				"updated": "20230115192214"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 a 变量时，调用 new Sting() 会在堆内存中创建一个 String 对象，String 对象中的 char 数组将会引用常量池中字符串。在调用 intern 方法之后，会去常量池中查找是否有等于该字符串对象的引用，有就返回引用。"
				}
			]
		},
		{
			"ID": "20230115192214-u5sidhk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192214-u5sidhk",
				"updated": "20230115192218"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 b 变量时，调用 new Sting() 会在堆内存中创建一个 String 对象，String 对象中的 char 数组将会引用常量池中字符串。在调用 intern 方法之后，会去常量池中查找是否有等于该字符串对象的引用，有就返回引用。"
				}
			]
		},
		{
			"ID": "20230115192219-yvwud12",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192219-yvwud12",
				"updated": "20230115192223"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而在堆内存中的两个对象，由于没有引用指向它，将会被垃圾回收。所以 a 和 b 引用的是同一个对象。"
				}
			]
		},
		{
			"ID": "20230115192224-xnkqfo0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192224-xnkqfo0",
				"updated": "20230115192228"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果在运行时，创建字符串对象，将会直接在堆内存中创建，不会在常量池中创建。所以动态创建的字符串对象，调用 intern 方法，在 JDK1.6 版本中会去常量池中创建运行时常量以及返回字符串引用，在 JDK1.7 版本之后，会将堆中的字符串常量的引用放入到常量池中，当其它堆中的字符串对象通过 intern 方法获取字符串对象引用时，则会去常量池中判断是否有相同值的字符串的引用，此时有，则返回该常量池中字符串引用，跟之前的字符串指向同一地址的字符串对象。"
				}
			]
		},
		{
			"ID": "20230115192228-r8ccwud",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192228-r8ccwud",
				"updated": "20230115192233"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以一张图来总结 String 字符串的创建分配内存地址情况："
				}
			]
		},
		{
			"ID": "20230115192233-5wi58tq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192233-5wi58tq",
				"updated": "20230115192237"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20230115192237-vezgt2f.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230115192237-cl8l95z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192237-cl8l95z",
				"updated": "20230115192242"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 intern 方法需要注意的一点是，一定要结合实际场景。因为常量池的实现是类似于一个 HashTable 的实现方式，HashTable 存储的数据越大，遍历的时间复杂度就会增加。如果数据过大，会增加整个字符串常量池的负担。"
				}
			]
		},
		{
			"ID": "20230115192242-srybirg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230115192242-srybirg",
				"updated": "20230115192255"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5、如何使用字符串的分割方法？"
				}
			]
		},
		{
			"ID": "20230115192256-fkbqfgc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192256-fkbqfgc",
				"updated": "20230115192305"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最后我想跟你聊聊字符串的分割，这种方法在编码中也很最常见。Split() 方法使用了正则表达式实现了其强大的分割功能，而正则表达式的性能是非常不稳定的，使用不恰当会引起回溯问题，很可能导致 CPU 居高不下。"
				}
			]
		},
		{
			"ID": "20230115192306-94z7ql7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192306-94z7ql7",
				"updated": "20230115192311"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以我们应该慎重使用 Split() 方法，我们可以用 String.indexOf() 方法代替 Split() 方法完成字符串的分割。如果实在无法满足需求，你就在使用 Split() 方法时，对回溯问题加以重视就可以了。"
				}
			]
		},
		{
			"ID": "20230115192311-ugk9eoj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230115192311-ugk9eoj",
				"updated": "20230115192323"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总结"
				}
			]
		},
		{
			"ID": "20230115192324-k21wpfc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192324-k21wpfc",
				"updated": "20230115192347"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这一讲中，我们认识到做好 String 字符串性能优化，可以提高系统的整体性能。在这个理论基础上，Java 版本在迭代中通过不断地更改成员变量，节约内存空间，对 String 对象进行优化。"
				}
			]
		},
		{
			"ID": "20230115192347-yj9skdw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192347-yj9skdw",
				"updated": "20230115192351"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们还特别提到了 String 对象的不可变性，正是这个特性实现了字符串常量池，通过减少同一个值的字符串对象的重复创建，进一步节约内存。"
				}
			]
		},
		{
			"ID": "20230115192351-qvz2k1p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192351-qvz2k1p",
				"updated": "20230115192355"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但也是因为这个特性，我们在做长字符串拼接时，需要显示使用 StringBuilder，以提高字符串的拼接性能。最后，在优化方面，我们还可以使用 intern 方法，让变量字符串对象重复使用常量池中相同值的对象，进而节约内存。"
				}
			]
		},
		{
			"ID": "20230115192355-tg8vfgz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192355-tg8vfgz",
				"updated": "20230115192359"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最后再分享一个个人观点。那就是千里之堤，溃于蚁穴。日常编程中，我们往往可能就是对一个小小的字符串了解不够深入，使用不够恰当，从而引发线上事故。"
				}
			]
		},
		{
			"ID": "20230115192359-5lzopbz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192359-5lzopbz",
				"updated": "20230115192402"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如，在我之前的工作经历中，就曾因为使用正则表达式对字符串进行匹配，导致并发瓶颈，这里也可以将其归纳为字符串使用的性能问题。具体实战分析，我将在 04 讲中为你详解。"
				}
			]
		},
		{
			"ID": "20230115192403-6xlb2ce",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230115192403-6xlb2ce"
			}
		}
	]
}